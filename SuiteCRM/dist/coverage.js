(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["SuiteCRM"] = factory();
	else
		root["SuiteCRM"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ApplicationCoverageHandler.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/CoverageHandlers/ApplicationCoverageHandler.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(/*! ../Model/RepositoryHandler */ "./node_modules/@jacada-jbot/base/include/Model/RepositoryHandler.js");
var CoverageHandler_1 = __webpack_require__(/*! ./CoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandler.js");
var GenericResult_1 = __webpack_require__(/*! ../Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
var ScreenCoverageHandler_1 = __webpack_require__(/*! ./ScreenCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ScreenCoverageHandler.js");
var RepositoryHandler_1 = __webpack_require__(/*! ../Model/RepositoryHandler */ "./node_modules/@jacada-jbot/base/include/Model/RepositoryHandler.js");
var ElementPath_1 = __webpack_require__(/*! ../Model/ElementPath */ "./node_modules/@jacada-jbot/base/include/Model/ElementPath.js");
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var ListeningElement_1 = __webpack_require__(/*! ../Model/ListeningElement */ "./node_modules/@jacada-jbot/base/include/Model/ListeningElement.js");
var Constants_1 = __webpack_require__(/*! ../Model/Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
var log = Log4jConfig_1.logFactory.getLogger("ApplicationCoverageHandler");
/**
 * The Coverage Handler in the application level. When initiated, it is given the platformDriver which is connected to the current coverageHandler
 *  of this application (such as the IE tab) and given the repository from this
 */
var ApplicationCoverageHandler = /** @class */ (function (_super) {
    __extends(ApplicationCoverageHandler, _super);
    function ApplicationCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) {
        if (applicationCoverageHandler === void 0) { applicationCoverageHandler = null; }
        var _this = _super.call(this, platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) || this;
        _this.listeningElements = {};
        return _this;
    }
    /**
    * This method executes the action received on the related element.
    * @param lElementPathId - the path to the element
    * @param lAction - a struct holding the action name and a list of values, when needed
    * @returns a GenericResult struct with the action result in the data
    */
    ApplicationCoverageHandler.prototype.executeAction = function (lElementPathId, lAction) {
        log.info("executeAction: element path- " + lElementPathId + ", action- " + lAction.actionName);
        var elementPath = new ElementPath_1.default(lElementPathId);
        // TBD: Incase application doesn't exist, execute the lifecycle
        // The first element is 'us' (the application). 
        var applicationId = elementPath.next();
        if (applicationId === null)
            return this.returnFailure("Empty element path id");
        // If we are last, the action should be on the application
        if (elementPath.isLast()) {
            // Execute the action on application level
            return this[lAction.actionName](lAction.values);
        }
        else {
            // Second element is the screen. Get it and its repository
            var result = this.getNextPathRepository(elementPath);
            if (!result.success)
                return new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
            var screenRepositoryHandler = result.data.repositoryHandler;
            log.debug("executeAction: screen repository handler id is " + screenRepositoryHandler.id + " and path is " + screenRepositoryHandler.pathId);
            // get the screen coverage handler
            result = this.getElementCoverageHandler(screenRepositoryHandler, this, this.getDefaultScreenCoverageHandler.bind(this));
            if (!result.success)
                return result;
            var screenCoverageHandler = result.data.coverageHandler;
            // Execute using the screen handler
            return screenCoverageHandler.execLastNodeOnScreen(elementPath, lAction, false);
        }
    };
    /**
    * This method executes asynchronously the action received on the related element.
    * @param lElementPathId - the path to the element
    * @param lAction - a struct holding the action name and a list of values, when needed
    * @returns a GenericResult struct with the action result in the data
    */
    ApplicationCoverageHandler.prototype.executeActionAsync = function (lElementPathId, lAction) {
        return __awaiter(this, void 0, void 0, function () {
            var elementPath, applicationId, result, screenRepositoryHandler, screenCoverageHandler;
            return __generator(this, function (_a) {
                log.info("executeActionAsync: element path- " + lElementPathId + ", action- " + lAction.actionName);
                elementPath = new ElementPath_1.default(lElementPathId);
                applicationId = elementPath.next();
                if (applicationId === null)
                    return [2 /*return*/, this.returnFailure("Empty element path id")];
                // If we are last, the action should be on the application
                if (elementPath.isLast()) {
                    // Execute the action on application level
                    return [2 /*return*/, this[lAction.actionName](lAction.values)];
                }
                else {
                    result = this.getNextPathRepository(elementPath);
                    if (!result.success)
                        return [2 /*return*/, new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION)];
                    screenRepositoryHandler = result.data.repositoryHandler;
                    log.debug("executeActionAsync: screen repository handler id is " + screenRepositoryHandler.id + " and path is " + screenRepositoryHandler.pathId);
                    // get the screen coverage handler
                    result = this.getElementCoverageHandler(screenRepositoryHandler, this, this.getDefaultScreenCoverageHandler.bind(this));
                    if (!result.success)
                        return [2 /*return*/, result];
                    screenCoverageHandler = result.data.coverageHandler;
                    // Execute using the screen handler
                    return [2 /*return*/, screenCoverageHandler.execLastNodeOnScreenAsync(elementPath, lAction, false)];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * This method creates a default screenCoverageHandler, in case there isn't a specific one yet.
     * @param applicationCoverageHandler - the applicationCoverageHandler
     * @param screenRepositoryHandler - the applicationRepositoryHandler
     * @returns a new ScreenCoverageHandler
     */
    ApplicationCoverageHandler.prototype.getDefaultScreenCoverageHandler = function (applicationCoverageHandler, screenRepositoryHandler) {
        return new ScreenCoverageHandler_1.default(applicationCoverageHandler.platformDriver, screenRepositoryHandler, applicationCoverageHandler.applicationData, applicationCoverageHandler, applicationCoverageHandler.factory, this);
    };
    /**
     * This method starts the recording process for all the application.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.startRecording = function () {
        log.info('Starting recording process');
        // Starts a recording process in the platformDriver using the repositorySection
        // If we were called, it means there is an application/screen open.
        // We might have already a repository or not and we should return this repository updated.
        // Get the screen coverage handler for the current screen.
        var result = this.getScreenCoverageHandlerForCurrent();
        if (!result.success)
            return result;
        this.currentScreenCoverageHandler = result.data.coverageHandler;
        // We move the logic to the screen coverage handler as we are in a screen.
        return this.currentScreenCoverageHandler.startRecording();
    };
    /**
     * This method stops the recording process for all the application.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.stopRecording = function () {
        return this.returnFailure("TBD");
    };
    /**
     * This method starts the capturing process for all the application.
     * @returns a GenericResult
     */
    ApplicationCoverageHandler.prototype.startCapturing = function () {
        log.info('Starting capturing process');
        // Starts a capturing process in the platformDriver using the repositorySection
        // If we were called, it means there is an application/screen open.
        // We might have already a repository or not and we should return this repository updated.
        // Get the screen coverage handler for the current screen.
        var result = this.getScreenCoverageHandlerForCurrent();
        if (!result.success)
            return result;
        this.currentScreenCoverageHandler = result.data.coverageHandler;
        // We move the logic to the screen coverage handler as we are in a screen.
        return this.currentScreenCoverageHandler.startCapturing();
    };
    /**
     * This method gets the screen coverageHandler for the current screen.
     * @returns a GenericResult with the screen coverageHandler inside the data
     */
    ApplicationCoverageHandler.prototype.getScreenCoverageHandlerForCurrent = function () {
        // Need to have the right screen handler and from it the id. We then might need to change to another coverage handler.
        // So we start from the default for this screen
        var defaultScreenCoverageHandler = this.getDefaultScreenCoverageHandlerForCurrent();
        // Getting the screen Id. the default screen coverage should get it.
        var screenId = defaultScreenCoverageHandler.uniqueId;
        // check if it was stored in the application data
        var coverageHandler = defaultScreenCoverageHandler.fetchCoverageHandlerFromUniqueId(screenId);
        if (coverageHandler) {
            log.debug("Screen coverage handler retrieved from memory");
            return this.returnSuccess({ coverageHandler: coverageHandler });
        }
        // Look for it in the repository
        var screenElement = this.repositoryHandler.findElementByIdInCurrent(screenId);
        if (screenElement) {
            // We are in the repository!
            // Do we already have coverage handler? If yes, it should be stored in the Element Data
            var pathId = this.repositoryHandler.getPathWithElement(screenId);
            var elementData = this.pathIdToTemporaryElementData(pathId);
            if (elementData.coverageHandler) {
                log.debug("coverageHandler returned from pathIdToTemporaryElementData: " + elementData.coverageHandler.constructor.name);
                // already exists! we can return the one we have
                return this.returnSuccess({ coverageHandler: elementData.coverageHandler });
            }
            // No coverage handler. Let's create the repository handler and then the coverage handler
            var screenRepositoryHandler = new RepositoryHandler_1.default(this.repositoryHandler.repository, screenElement, this.repositoryHandler);
            // Now lets get the coverage handler from the repository handler.
            var result = this.getElementCoverageHandler(screenRepositoryHandler, this, this.getDefaultScreenCoverageHandlerForCurrent.bind(this));
            if (!result.success)
                return result;
            if (result.data.coverageHandler) {
                result.data.coverageHandler.saveCoverageHandlerForUniqueId(screenId);
                return result;
            }
        }
        // No indication in the repository -> return the default. We don't have yet a repositoryHandler for it and we expect it to create it and add it
        defaultScreenCoverageHandler.saveCoverageHandlerForUniqueId(screenId);
        return this.returnSuccess({ coverageHandler: defaultScreenCoverageHandler });
    };
    /**
     * This method gets the default screen coverageHandler for the current screen.
     * @returns a new ScreenCoverageHandler
     */
    ApplicationCoverageHandler.prototype.getDefaultScreenCoverageHandlerForCurrent = function () {
        // is the default screen coverage indicated in the repository?
        var screenCoverageHandler;
        if (this.repositoryHandler) {
            screenCoverageHandler = this.factory.createScreenCoverageHandler(this.platformDriver, null, this.applicationData, this, this.factory, this);
        }
        if (screenCoverageHandler) {
            return screenCoverageHandler;
        }
        else {
            return this.createDefaultScreenCoverageHandler();
        }
    };
    /**
     * This method gets the repository for the application - application level should always have repository, even if empty
     * @returns the RepositoryHandler
     */
    ApplicationCoverageHandler.prototype.createRepositoryIfNotExists = function () {
        return this.repositoryHandler; // Application level should always have repository, even if empty
    };
    /**
     * This method creates a default screen coverageHandler.
     * @returns a new ScreenCoverageHandler
     */
    ApplicationCoverageHandler.prototype.createDefaultScreenCoverageHandler = function () {
        // Need to be inherited if not indicated in the repository
        return new ScreenCoverageHandler_1.default(this.platformDriver, null, this.applicationData, this, this.factory, this);
    };
    /**
     * This method stops the capturing process for all the application.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.stopCapturing = function () {
        // Stops a capturing process
        return this.returnFailure("TBD");
    };
    /**
     * This method starts the listening process.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.startListening = function () {
        log.info('Starting listening process');
        // Starts a listening process
        // If we were called, it means there is an application/screen open.
        for (var path in this.listeningElements) {
            var listeningElement = this.listeningElements[path];
            this.startListeningOnElement(listeningElement);
        }
        return this.returnSuccess("");
    };
    /**
     * This method starts listening on each element from ListeningElements
     * @param listeningElement the listeningElement to listen to
     */
    ApplicationCoverageHandler.prototype.startListeningOnElement = function (listeningElement) {
        log.debug("startListening: pathId is: " + listeningElement.path);
        var elementPath = new ElementPath_1.default(listeningElement.path);
        // The first element is 'us' (the application). 
        var applicationId = elementPath.next();
        if (applicationId === null)
            return;
        // Second element is the screen. Get it and its repository
        var result = this.getNextPathRepository(elementPath);
        if (!result.success)
            return;
        var screenRepositoryHandler = result.data.repositoryHandler;
        log.debug("startListening: screen repository handler id is " + screenRepositoryHandler.id + " and path is " + screenRepositoryHandler.pathId);
        // get the screen coverage handler
        result = this.getElementCoverageHandler(screenRepositoryHandler, this, this.getDefaultScreenCoverageHandler.bind(this));
        if (!result.success)
            return;
        var screenCoverageHandler = result.data.coverageHandler;
        // Validate that we are in the screen needed to be listening to
        result = screenCoverageHandler.validateScreen();
        if (!result.success)
            return;
        // Listening using the screen handler
        screenCoverageHandler.listenLastNodeOnScreen(elementPath, listeningElement);
    };
    /**
     * This method sets the listeningElements list.
     * @param listeningInfos
     */
    ApplicationCoverageHandler.prototype.setListeningInfo = function (listeningInfos) {
        log.debug("In setListeningInfo");
        // Creating the listening elements map
        this.listeningElements = {};
        this.addListeningInfos(listeningInfos);
    };
    /**
     * This method adds the listeningInfos received to the listeningElements.
     * @param listeningInfos
     */
    ApplicationCoverageHandler.prototype.addListeningInfos = function (listeningInfos) {
        for (var _i = 0, listeningInfos_1 = listeningInfos; _i < listeningInfos_1.length; _i++) {
            var listeningInfo = listeningInfos_1[_i];
            this.addListeningInfo(listeningInfo);
        }
    };
    /**
     * This method adds a single listeningInfo to the listeningElements.
     */
    ApplicationCoverageHandler.prototype.addListeningInfo = function (listeningInfo) {
        var path = listeningInfo.path;
        if (path && path.length > 0) {
            var listeningElement = new ListeningElement_1.default(listeningInfo.path, listeningInfo.attributes, listeningInfo.triggers);
            this.listeningElements[path] = listeningElement;
            return listeningElement;
        }
        else {
            return null;
        }
    };
    /**
     * This method gets a listeningElement, given the pathId.
     * @param path - the path to search
     * @returns the appropriate ListeningElement
     */
    ApplicationCoverageHandler.prototype.getListeningElement = function (path) {
        return this.listeningElements[path];
    };
    /**
     * This method stops the listening process for all the application.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.stopListening = function () {
        // Stops a listening process
        return this.returnFailure("TBD");
    };
    /**
     * Get current screen and notify it that a page was opened
     */
    ApplicationCoverageHandler.prototype.pageOpened = function () {
        // Get the screen coverage handler for the current screen.
        var result = this.getScreenCoverageHandlerForCurrent();
        if (!result.success)
            return;
        this.currentScreenCoverageHandler = result.data.coverageHandler;
        this.currentScreenCoverageHandler.pageOpened();
    };
    return ApplicationCoverageHandler;
}(CoverageHandler_1.default));
exports["default"] = ApplicationCoverageHandler;
//# sourceMappingURL=ApplicationCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/BaseCustomControlCoverageHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/CoverageHandlers/BaseCustomControlCoverageHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseCustomControlCoverageHandler = void 0;
var BaseCustomControlCoverageHandler = /** @class */ (function () {
    function BaseCustomControlCoverageHandler(node, recordingStepReporter, listeningReporter) {
        if (recordingStepReporter === void 0) { recordingStepReporter = null; }
        if (listeningReporter === void 0) { listeningReporter = null; }
    }
    /**
     * This method determines if a node matches the coverage handler.
     * @static
     * @param {*} node - the node to check
     * @return {*}  {boolean} - default is false
     * @memberof CustomControlCoverageHandler
     */
    BaseCustomControlCoverageHandler.isMatch = function (node) {
        return false;
    };
    /**
     * This method indicates if the element is capturable.
     * @returns default value is true.
     */
    BaseCustomControlCoverageHandler.prototype.isCapturable = function () {
        return true;
    };
    /**
     *  This method updates elementNode with the specific values in order to identify the element correctly
     * @param elementNode the element node to update
     */
    BaseCustomControlCoverageHandler.prototype.updateElementRepositoryNode = function (elementNode) { };
    Object.defineProperty(BaseCustomControlCoverageHandler.prototype, "isNodeToBeAddedToRepository", {
        /**
         * This property indicates whether we need to add this node the repository or not.
         * @returns Default value is true.
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    return BaseCustomControlCoverageHandler;
}());
exports.BaseCustomControlCoverageHandler = BaseCustomControlCoverageHandler;
//# sourceMappingURL=BaseCustomControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var CoverageHandler_1 = __webpack_require__(/*! ./CoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandler.js");
var Constants_1 = __webpack_require__(/*! ../Model/Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var GenericResult_1 = __webpack_require__(/*! ../Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
var ScreenCoverageHandler_1 = __webpack_require__(/*! ./ScreenCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ScreenCoverageHandler.js");
var log = Log4jConfig_1.logFactory.getLogger("ControlCoverageHandler");
var ControlCoverageHandler = /** @class */ (function (_super) {
    __extends(ControlCoverageHandler, _super);
    function ControlCoverageHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This method gets the bounding rectangle of the element.
     * @returns a rectangle that bounds the element
     */
    ControlCoverageHandler.prototype.boundingRectangle = function () {
        return null; // Should be inherited
    };
    /**
     * Perform the access to the element
     * @remark needs to be inherited
     * @returns a GenericResult struct with data that holds the element that was found
     */
    ControlCoverageHandler.prototype.executeAccessNodeWithSelector = function (previousResult) {
        return this.returnFailure("Needs to be inherited");
    };
    /**
     * This method starts the process of recording for this element.
     * @returns a GenericResult struct
     */
    ControlCoverageHandler.prototype.performStartRecording = function () {
        return this.returnFailure("Must be inherited");
    };
    /**
     * This method performs the start recording process on the node it gets.
     * @param node - the element to perform start recording on
     * @returns true, if the process of start recording for this element succeeded, and false otherwise.
     */
    ControlCoverageHandler.prototype.performStartRecordingOnNode = function (node) {
        return false;
    };
    /**
     * This method performs the start capturing process on the node it gets.
     * @param node - the node to start capturing on
     * @returns false.
     */
    ControlCoverageHandler.prototype.performStartCapturingOnNode = function (node) {
        return false;
    };
    /**
     * This method inserts the control to capture mode.
     * @remark Need to be inherited by specific element type and execute the relevant start capturing
     * @returns default value is true.
     */
    ControlCoverageHandler.prototype.executeStartCapturingOnNode = function () {
        return true;
    };
    /**
     *
     * @param elementDomNode
     * @returns the created selector
     */
    ControlCoverageHandler.prototype.createRepositoryNodeSelector = function (elementDomNode) {
        log.debug("This method needs to be inherited");
        return "";
    };
    /**
     * This method concatenates selector.
     * @param anchorSelector
     * @param partialSelector
     * @returns
     */
    ControlCoverageHandler.prototype.concatenateSelectorParts = function (anchorSelector, partialSelector) {
        log.debug("This method needs to be inherited");
        return "";
    };
    /**
     * This method creates a selector command that finds the element node on parent element.
     * @param parentNode
     * @param elementNode
     * @returns the created selector
     */
    ControlCoverageHandler.prototype.createSelectorFromParentToChild = function (parentNode, elementNode) {
        log.debug("This method needs to be inherited");
        return "";
    };
    /**
     * This method adds our child repository node to our repository.
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns the unified repositoryHandler
     */
    ControlCoverageHandler.prototype.addChildRepositoryNodeToOurselvesRecursively = function (childRepositoryNode, childCoverageHandler) {
        if (!this.customCoverageHandler.isNodeToBeAddedToRepository) {
            return this.parentCoverageHandler.addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode, childCoverageHandler);
        }
        return this.addChildRepositoryNodeToOurselves(childRepositoryNode, childCoverageHandler);
    };
    ControlCoverageHandler.prototype.addChildRepositoryNodeToOurselves = function (childRepositoryNode, childCoverageHandler) {
        log.trace("addChildRepositoryNodeToOurselves");
        // Adding a node to coverage handler which is base (like table and body)
        // Make sure we have repository
        this.createRepositoryIfNotExists();
        // Adding this repository to ourselves
        childRepositoryNode = this.addChildRepositoryNodeToParent(childRepositoryNode);
        // In case the ID & Name haven't been set yet, we auto generate them
        if (childRepositoryNode.id === Constants_1.Constants.AUTO_GENERATE_ID_PREFIX) {
            childRepositoryNode.id = this.generateId(childCoverageHandler, "");
        }
        if (childRepositoryNode.name === Constants_1.Constants.AUTO_GENERATE_ID_PREFIX) {
            childRepositoryNode.name = childRepositoryNode.id;
        }
        // Create a repository handler where we are the current node.
        return this.createChildRepositoryHandler(childRepositoryNode);
    };
    /**
     * This method adds the received repository node to the closest parent of the node.
     * @param {*} repositoryNode - the node to add
     * @memberof ControlCoverageHandler
     */
    ControlCoverageHandler.prototype.AddToClosestParentInRepository = function (repositoryNode) {
        var _a;
        if (!(this.parentCoverageHandler instanceof ScreenCoverageHandler_1.default)) {
            if (!((_a = this.parentCoverageHandler.customCoverageHandler) === null || _a === void 0 ? void 0 : _a.isNodeToBeAddedToRepository)) {
                return this.parentCoverageHandler.AddToClosestParentInRepository(repositoryNode);
            }
        }
        this.parentCoverageHandler.repositoryHandler.addNodeToChildren(repositoryNode);
    };
    /**
     * This method starts the process of capturing for this element.
     * @returns a GenericResult struct
     */
    ControlCoverageHandler.prototype.performStartCapturing = function () {
        return this.returnFailure("Need to be inherited");
    };
    /**
     * This method generates id for the control.
     * @param controlCoverageHandler
     * @param suffix
     * @returns a string representing the generated id.
     */
    ControlCoverageHandler.prototype.generateId = function (controlCoverageHandler, suffix) {
        // Auto generate Id. We will do it by tag name and index it while finding free in parent
        var prefix = controlCoverageHandler.getAutoGeneratedIdPrefix();
        return this.findFreeId("" + prefix + suffix);
    };
    /**
     * In case this control has no unique id this method is called to auto generate prefix id.
     * @returns a string representing the generated id prefix
     */
    ControlCoverageHandler.prototype.getAutoGeneratedIdPrefix = function () {
        return this.customCoverageHandler.type;
    };
    /**
     * Find a free id in current repository
     * @param name Base name to search id
     * @returns a string representing the id.
     */
    ControlCoverageHandler.prototype.findFreeId = function (name) {
        // Find a free ID by attaching to the name
        var index = 1;
        // If name is not built for auto number, try to search it without a number (looks nicer than ending with '1')
        if (!name.endsWith("_")) {
            // Start by finding without number and if already exists, starts with number 2
            if (!this.findElementByIdInCurrent(name)) {
                return name;
            }
            index = 2;
        }
        // Loop of attaching index until finding a free name
        var id;
        do {
            id = "" + name + index;
            index++;
        } while (this.findElementByIdInCurrent(id));
        return id;
    };
    /**
     * This method executes the action on the given path, in case it is the last element on the path.
     * @param elementPath - contains our current position in the path
     * @param lAction - a struct holding the action name and a value
     * @param validateOnly - indicates whether we just need the element or we need to execute the action
     * @returns a GenericResult struct with the action result inside the data, if there is one.
     */
    ControlCoverageHandler.prototype.execLastNodeOnScreen = function (elementPath, lAction, validateOnly) {
        var result = this.getNodeOnScreen();
        if (!result.success) {
            if (lAction.actionName === "isExists") {
                return this.returnSuccess(false);
            }
            return new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        }
        var currentNode = result.data.accessResult;
        //save current node on its custom coverage handler
        this.customCoverageHandler.node = currentNode;
        if (elementPath.isLast()) {
            // validateOnly means we just needed to get the element but not to execute the action
            if (validateOnly)
                return this.returnSuccess(); // Found!
            //running the action
            return this.executingAction(lAction, elementPath);
        }
        else {
            // Go deeper on the path: Continue to next node
            return this.execNextNodeOnScreen(elementPath, lAction, validateOnly);
        }
    };
    ControlCoverageHandler.prototype.executingAction = function (lAction, elementPath) {
        if (this.customCoverageHandler[lAction.actionName]) {
            var parsedValue = JSON.parse(lAction.values);
            return this.customCoverageHandler[lAction.actionName].apply(this.customCoverageHandler, parsedValue);
        }
        log.error("Control coverage handler " + this.repositoryHandler.name + " does not implement action " + lAction.actionName);
        return new GenericResult_1.GenericResult(false, "Invalid action " + lAction.actionName + " on element " + elementPath._elementPathId, Constants_1.Constants.TYPE_MISMATCH_EXCEPTION);
    };
    /**
     * This method is digging down all the way to the requested element on the elementPath for execution.
     * @param elementPath
     * @param lAction
     * @param validateOnly
     * @returns a  GenericResult struct with the action result inside the data, if there is one.
     */
    ControlCoverageHandler.prototype.execNextNodeOnScreen = function (elementPath, lAction, validateOnly) {
        var result = this.getCoverageHandlerByNextPathInRepository(elementPath);
        if (!result.success)
            return result;
        var elementCoverageHandler = result.data.coverageHandler;
        // Deepening down using the element coverage handler
        return elementCoverageHandler.execLastNodeOnScreen(elementPath, lAction, validateOnly);
    };
    /**
     * This method is digging down all the way to the requested element on the elementPath for execution.
     * @param elementPath
     * @param lAction
     * @param validateOnly
     * @returns a  GenericResult struct with the action result inside the data, if there is one.
     */
    ControlCoverageHandler.prototype.execNextNodeOnScreenAsync = function (elementPath, lAction, validateOnly) {
        return __awaiter(this, void 0, void 0, function () {
            var result, elementRepositoryHandler, elementCoverageHandler;
            return __generator(this, function (_a) {
                result = this.getNextPathRepository(elementPath);
                if (!result.success)
                    return [2 /*return*/, new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION)];
                elementRepositoryHandler = result.data.repositoryHandler;
                // Get the element coverage handler
                result = this.getElementCoverageHandler(elementRepositoryHandler, this, this.coverageHandlerByType.bind(this));
                if (!result.success)
                    return [2 /*return*/, result];
                elementCoverageHandler = result.data.coverageHandler;
                // Deepening down using the element coverage handler
                return [2 /*return*/, elementCoverageHandler.execLastNodeOnScreenAsync(elementPath, lAction, validateOnly)];
            });
        });
    };
    /**
     * This method executes asynchronously the action on the given path, in case it is the last element on the path.
     * @param elementPath - contains our current position in the path
     * @param lAction - a struct holding the action name and a value
     * @param validateOnly - indicates whether we just need the element or we need to execute the action
     * @returns a GenericResult struct with the action result inside the data, if there is one.
     */
    ControlCoverageHandler.prototype.execLastNodeOnScreenAsync = function (elementPath, lAction, validateOnly) {
        return __awaiter(this, void 0, void 0, function () {
            var result, currentNode;
            return __generator(this, function (_a) {
                result = this.getNodeOnScreen();
                if (!result.success) {
                    if (lAction.actionName === "isExists") {
                        return [2 /*return*/, this.returnSuccess(false)];
                    }
                    return [2 /*return*/, new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION)];
                }
                currentNode = result.data.accessResult;
                //save current node on its custom coverage handler
                this.customCoverageHandler.node = currentNode;
                if (elementPath.isLast()) {
                    // validateOnly means we just needed to get the element but not to execute the action
                    if (validateOnly)
                        return [2 /*return*/, this.returnSuccess()]; // Found!
                    //running the action
                    return [2 /*return*/, this.executingAction(lAction, elementPath)];
                }
                else {
                    // Go deeper on the path: Continue to next node
                    return [2 /*return*/, this.execNextNodeOnScreenAsync(elementPath, lAction, validateOnly)];
                }
                return [2 /*return*/];
            });
        });
    };
    ControlCoverageHandler.ELEMENT_HIGHLIGHT_COLOR = "#202aa7";
    ControlCoverageHandler.ELEMENT_SNAPSHOT_COLOR = "#ff0000";
    ControlCoverageHandler.ELEMENT_NOT_FOUND = "Element not found";
    ControlCoverageHandler.CONFIG_BIND_NOT_FOUND = "No binding configuration was found for this element";
    return ControlCoverageHandler;
}(CoverageHandler_1.default));
exports["default"] = ControlCoverageHandler;
//# sourceMappingURL=ControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandler.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandler.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var GenericResult_1 = __webpack_require__(/*! ../Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
var RepositoryHandler_1 = __webpack_require__(/*! ../Model/RepositoryHandler */ "./node_modules/@jacada-jbot/base/include/Model/RepositoryHandler.js");
var ElementData_1 = __webpack_require__(/*! ../Model/ElementData */ "./node_modules/@jacada-jbot/base/include/Model/ElementData.js");
var Constants_1 = __webpack_require__(/*! ../Model/Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
// The Coverage Handler is in the root level of all CoverageHandlers.
// The Hierarchy is something like that:
//
//  - CoverageHandler
//      - ApplicationCoverageHandler
//          - WebApplicationCoverageHandler
//              - WebApplicationCoverageHandler
//          - WinApplicationCoverageHandler
//      - ControlCoverageHandler
//          - ScreenCoverageHandler
//              - WebScreenCoverageHandler
//              - WinScreenCoverageHandler
//          - WebControlCoverageHandler
//              - TextInputWebControlCoverageHandler
//              - DropdownWebControlCoverageHandler
//              - ComboBoxWebControlCoverageHandler
//              - RadioGroupWebControlCoverageHandler
//              - ButtonWebControlCoverageHandler
//              - ImageWebControlCoverageHandler
//                  - TableWebControlCoverageHandler
//          - WinControlCoverageHandler
//
//
//   Each CoverageHandler has the Platform Driver which is responsible for the actual connection to the screen such as IEPlatformDriver.
//   It contains the repository with a cursor inside that tells on which element it points now and the current data we save for this application.
//
//   From data prospective, every CoverageHandler points to it's parent while the parent can get to the CH based on the PathId.
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var log = Log4jConfig_1.logFactory.getLogger("CoverageHandler");
var CoverageHandler = /** @class */ (function () {
    function CoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) {
        if (applicationCoverageHandler === void 0) { applicationCoverageHandler = null; }
        this.platformDriver = platformDriver;
        this.repositoryHandler = repositoryHandler;
        this.applicationData = applicationData;
        this.parentCoverageHandler = parentCoverageHandler;
        this.applicationCoverageHandler = applicationCoverageHandler;
        this.factory = factory;
    }
    /**
     * This method executes the action received on the related element.
     * @param lElementPathId - the path to the element
     * @param lAction - a struct holding the action name and a list of values, when needed
     * @returns a GenericResult struct with the action result in the data
     */
    CoverageHandler.prototype.executeAction = function (lElementPathId, lAction) {
        return this.returnFailure("executeAction Need to be inherited");
    };
    /**
     * This method executes the action received on the related element.
     * @param lElementPathId - the path to the element
     * @param lAction - a struct holding the action name and a list of values, when needed
     * @returns a GenericResult struct with the action result in the data
     */
    CoverageHandler.prototype.executeActionAsync = function (lElementPathId, lAction) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.returnFailure("executeAction Need to be inherited")];
            });
        });
    };
    /**
     * This method starts the recording process.
     * @returns a GenericResult struct
     */
    CoverageHandler.prototype.startRecording = function () {
        return this.returnFailure("startRecording Need to be inherited");
    };
    /**
     * This method stops the recording process.
     * @returns a GenericResult struct
     */
    CoverageHandler.prototype.stopRecording = function () {
        return this.returnFailure("stopRecording Need to be inherited");
    };
    /**
     * This method starts the capturing process.
     * @returns a GenericResult
     */
    CoverageHandler.prototype.startCapturing = function () {
        return this.returnFailure("startCapturing Need to be inherited");
    };
    /**
     * This method stops the capturing process.
     * @returns a GenericResult struct
     */
    CoverageHandler.prototype.stopCapturing = function () {
        return this.returnFailure("stopCapturing Need to be inherited");
    };
    /**
     * This method starts the listening process.
     * @returns a GenericResult struct
     */
    CoverageHandler.prototype.startListening = function () {
        return this.returnFailure("startListening Need to be inherited");
    };
    /**
     * This method stops the listening process.
     * @returns a GenericResult struct
     */
    CoverageHandler.prototype.stopListening = function () {
        return this.returnFailure("stopListening Need to be inherited");
    };
    /**
     * This method iterates on the parentNodes' children and on each child it performs the func function.
     * @param parentNode - the node to iterate its children on.
     * @param func - the function that will be execute on each child
     */
    CoverageHandler.prototype.walkOnChildren = function (parentNode, func) {
        log.debug("This method should be inherited");
    };
    /**
     * This method registers the element for highlighting (for recording and capturing process), it sets it in the highlightMap.
     * @param controlCoverageHandler - the elements' coverageHandler
     * @param elem - the node
     * @param functionHandler - the callback function to call in case we are in capturing mode.
     */
    CoverageHandler.prototype.registerControlForHighlight = function (controlCoverageHandler, elem, functionHandler) {
        log.debug("This needs to be inherited");
    };
    // public elementId(): string {
    //     if (this.repositoryHandler) {
    //         return this.repositoryHandler.id;
    //     } else {
    //         return null;
    //     }
    // }
    /**
     * This method sets a GenericResult struct with failure value, and an error message.
     * @param errorMessage
     * @returns a GenericResult struct with failure value.
     */
    CoverageHandler.prototype.returnFailure = function (errorMessage) {
        log.error(errorMessage);
        return new GenericResult_1.GenericResult(false, errorMessage, null);
    };
    /**
     * This method sets a GenericResult struct with success value, and data.
     * @param data
     * @returns  a GenericResult struct with success value.
     */
    CoverageHandler.prototype.returnSuccess = function (data) {
        return new GenericResult_1.GenericResult(true, null, data);
    };
    /**
     * This method creates a coverageHandler for the element, using the defaultCoverageHandlerFunction in case it doesn't exist yet, or return it
     * if it is already exist.
     * @param repositoryHandler - the repositoryHandler holds the path to the element
     * @param parentCoverageHandler
     * @param defaultCoverageHandlerFunction - the default function to create a coverageHandler
     * @returns a GenericResult struct with the coverageHandler inside the data.
     */
    CoverageHandler.prototype.getElementCoverageHandler = function (repositoryHandler, parentCoverageHandler, defaultCoverageHandlerFunction) {
        // We save the coverage handler object in the applicationData based on the pathId of the element (should be full)
        var pathId = repositoryHandler.pathId;
        var elementData = this.pathIdToTemporaryElementData(pathId);
        if (elementData.coverageHandler) {
            log.trace("elementData.coverageHandler: " + elementData.coverageHandler.constructor.name);
            // Update the repository handler as conceptually, it might have changed (manually)
            log.trace("Reusing coverage handler for path " + pathId);
            elementData.coverageHandler.repositoryHandler = repositoryHandler;
        }
        else {
            if (repositoryHandler.coverageHandlerName) {
                // Coverage Handler Name is indicated on the node?
                elementData.coverageHandler = new CoverageHandler[repositoryHandler.coverageHandlerName](this.platformDriver, repositoryHandler, this.applicationData, parentCoverageHandler, this.applicationCoverageHandler);
            }
            else {
                if (defaultCoverageHandlerFunction) {
                    elementData.coverageHandler = defaultCoverageHandlerFunction(parentCoverageHandler, repositoryHandler);
                }
                else {
                    elementData.coverageHandler = null;
                }
            }
        }
        var resultData = {
            coverageHandler: elementData.coverageHandler,
        };
        return this.returnSuccess(resultData);
    };
    /**
     * TODO RONA : change name?
     * This method returns a struct holding coverageHandler for the element, that was stored in applicationData field.
     * In case there still isn't a stored coverageHandler, it creates an empty struct.
     * @param pathId - the path of the element
     * @returns a ElementData struct that holds the coverageHandler.
     */
    CoverageHandler.prototype.pathIdToTemporaryElementData = function (pathId) {
        var elementData = this.applicationData.getScreenTopicData(Constants_1.Constants.ELEMENT_DATA_TOPIC, pathId);
        if (!elementData) {
            elementData = new ElementData_1.default();
            this.applicationData.setScreenTopicData(Constants_1.Constants.ELEMENT_DATA_TOPIC, pathId, elementData);
        }
        return elementData;
    };
    /**
     * This method stores the coverageHandler in applicationData field using the uniqueId as the key.
     * @param uniqueId
     */
    CoverageHandler.prototype.saveCoverageHandlerForUniqueId = function (uniqueId) {
        var elemData = new ElementData_1.default();
        elemData.coverageHandler = this;
        this.applicationData.setScreenTopicData(Constants_1.Constants.ELEMENT_DATA_TOPIC, uniqueId, elemData);
    };
    /**
     * This method deletes the coverageHandler stored in applicationData field using the uniqueId as the key.
     * @param uniqueId
     */
    CoverageHandler.prototype.deleteCoverageHandlerForUniqueId = function (uniqueId) {
        this.applicationData.deleteScreenTopicData(Constants_1.Constants.ELEMENT_DATA_TOPIC, uniqueId);
    };
    /**
     * This method gets the coverageHandler stored in applicationData field by the uniqueId.
     * @param uniqueId
     * @returns the coverageHandler
     */
    CoverageHandler.prototype.fetchCoverageHandlerFromUniqueId = function (uniqueId) {
        var elementData = this.applicationData.getScreenTopicData(Constants_1.Constants.ELEMENT_DATA_TOPIC, uniqueId);
        if (elementData) {
            return elementData.coverageHandler;
        }
        else {
            return null;
        }
    };
    /**
     * This method deletes all the data stored in the applicationData field.
     */
    CoverageHandler.prototype.deleteAllElementDataTopic = function () {
        this.applicationData.deleteScreenTopic(Constants_1.Constants.ELEMENT_DATA_TOPIC);
    };
    /**
     * This method gets a control type and returns the suitable coverageHandler.
     * @param controlType
     * @returns a GenericResult struct with the coverageHandler inside the data
     */
    CoverageHandler.prototype.getCoverageHandlerByNode = function (node) {
        // Need to have the right handler and from it the id. We then might need to change to another coverage handler.
        // is the default control coverage indicated in the repository on this node?
        var coverageHandler = this.factory.createCoverageHandlerByNode(this.platformDriver, null, this.applicationData, this, node, this.factory, this.applicationCoverageHandler);
        return this.returnSuccess({ coverageHandler: coverageHandler });
    };
    /**
     * This method gets the repository for an element that is the next on the path.
     * @param elementPath
     * @returns a GenericResult struct with the repositoryHandler inside the data
     */
    CoverageHandler.prototype.getNextPathRepository = function (elementPath) {
        // Advance to next and find the element in the current repository element
        var result = this.getNextPathElement(elementPath);
        if (!result.success)
            return result;
        var nodeElement = result.data.nodeElement;
        // Create a repository handler for the screen
        var fullPathId = elementPath.currentFullPathId();
        log.trace("Getting next repository for: " + fullPathId);
        var nextRepositoryHandler = this.createRepositoryForNode(nodeElement, fullPathId);
        if (!nextRepositoryHandler)
            return this.returnFailure("Failed creating next repository.");
        return this.returnSuccess({ repositoryHandler: nextRepositoryHandler });
    };
    /**
     * This method gets the repository for an element that is the next on the path, and creates a coverageHandler
     * @param elementPath
     * @returns a GenericResult struct with the coverageHandler inside the data
     */
    CoverageHandler.prototype.getCoverageHandlerByNextPath = function (elementPath) {
        // Move to next element in path
        // Get it and its repository
        var result = this.getNextPathRepository(elementPath);
        if (!result.success)
            return new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId + " in repository", Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        var elementRepositoryHandler = result.data.repositoryHandler;
        var resultData = {
            coverageHandler: this.factory.createCoverageHandlerByType(this.platformDriver, elementRepositoryHandler, this.applicationData, this, this.factory, elementRepositoryHandler.currentNode.type, this.applicationCoverageHandler),
        };
        // Get the element coverage handler
        return this.returnSuccess(resultData);
    };
    /**
     * This method gets the element that is next on the pathId.
     * @param elementPath
     * @returns a GenericResult struct with the element inside the data
     */
    CoverageHandler.prototype.getNextPathElement = function (elementPath) {
        // Advance to next element
        var nodeId = elementPath.next();
        if (nodeId === null)
            return this.returnFailure("No screen id in element path");
        // Find the element in the current repository element
        log.trace("Searching for " + nodeId + " in current repository");
        var nodeElement = this.repositoryHandler.findElementByIdInCurrent(nodeId);
        if (!nodeElement)
            return this.returnFailure("Path Element " + nodeId + " not found.");
        return this.returnSuccess({ nodeElement: nodeElement });
    };
    /**
     * This method finds an element by its Id in the repository.
     * @param lElementId
     * @returns the element found, or null.
     */
    CoverageHandler.prototype.findElementByIdInCurrent = function (lElementId) {
        if (this.repositoryHandler) {
            return this.repositoryHandler.findElementByIdInCurrent(lElementId);
        }
        else {
            return null;
        }
    };
    /**
     * This method creates a repositoryHandler for the given element and pathId.
     * @param nodeElement
     * @param pathId
     * @returns the created repositoryHandler.
     */
    CoverageHandler.prototype.createRepositoryForNode = function (nodeElement, pathId) {
        // Create another repository handler, this time with different 'current'
        var elementRepositoryHandler = new RepositoryHandler_1.default(this.repositoryHandler.repository, nodeElement, this.repositoryHandler);
        // Setting the element fullPath Id
        elementRepositoryHandler.pathId = pathId;
        return elementRepositoryHandler;
    };
    /**
     * This method gets a coverageHandler by its type.
     * @param me
     * @param repositoryHandler
     * @returns the coverageHandler.
     */
    CoverageHandler.prototype.coverageHandlerByType = function (me, repositoryHandler) {
        return this.getCoverageHandlerByTypeInRepository(repositoryHandler, me, repositoryHandler.currentNode.type);
    };
    /**
     * This method gets a coverageHandler by its type in the repository.
     * @param repositoryHandler
     * @param me
     * @param controlType
     * @returns the coverageHandler.
     */
    CoverageHandler.prototype.getCoverageHandlerByTypeInRepository = function (repositoryHandler, me, controlType) {
        var coverageHandler;
        coverageHandler = this.factory.createCoverageHandlerByType(this.platformDriver, repositoryHandler, this.applicationData, this, this.factory, controlType, this.applicationCoverageHandler);
        return coverageHandler;
    };
    /**
     * This method creates the element coverageHandler according to the elementPath
     * @param elementPath - the repository path of the element
     * @returns a GenericResult with the coverageHandler created inside the data
     */
    CoverageHandler.prototype.getCoverageHandlerByNextPathInRepository = function (elementPath) {
        // Move to next element in path
        // Get it and its repository
        var result = this.getNextPathRepository(elementPath);
        if (!result.success)
            return new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId + " in repository", Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        var elementRepositoryHandler = result.data.repositoryHandler;
        // Get the element coverage handler
        result = this.getElementCoverageHandler(elementRepositoryHandler, this, this.coverageHandlerByType.bind(this));
        return result;
    };
    /**
     * This method is digging down all the way to the requested element on the elementPath for listening.
     * @param elementPath
     * @param listeningElement
     * @returns a GenericResult struct
     */
    CoverageHandler.prototype.ListenNextNodeOnScreen = function (elementPath, listeningElement) {
        // Move to next element in path
        // Get it and it's repository
        var result = this.getNextPathRepository(elementPath);
        if (!result.success)
            return result;
        var elementRepositoryHandler = result.data.repositoryHandler;
        // Get the element coverage handler
        result = this.getElementCoverageHandler(elementRepositoryHandler, this, this.coverageHandlerByType.bind(this));
        if (!result.success)
            return result;
        var elementCoverageHandler = result.data.coverageHandler;
        // Deepening down using the element coverage handler
        return elementCoverageHandler.listenLastNodeOnScreen(elementPath, listeningElement);
    };
    /**
     * This method is Walking on element path and perform start listening on last element
     * @param elementPath path of element to listening to
     * @param attributes array of attribute to listen to
     * @returns a GenericResult struct
     */
    CoverageHandler.prototype.listenLastNodeOnScreen = function (elementPath, listeningElement) {
        // The ElementPath object contains our current position in the path.
        // If we reach the last one (the one needs actions on) go and start listening. Otherwise, go deeper.
        // We are the element needed to listen on.
        // Lets get the element.
        var result = this.getNodeOnScreen();
        var currentNode;
        if (result.success) {
            currentNode = result.data.accessResult;
        }
        //save current node on its coverage handler
        this.setNode(currentNode);
        if (elementPath.isLast()) {
            if (!this.executeStartListening(listeningElement)) {
                return this.returnFailure("Can't start listening for elementPath: " + elementPath);
            }
            return this.returnSuccess("");
        }
        else {
            // Go deeper on the path: Continue to next node
            return this.ListenNextNodeOnScreen(elementPath, listeningElement);
        }
    };
    /**
     * This method takes each attribute that was received to listen to, and registers to the changes on screen.
     * @param listeningElement the ListeningElement of this specific element
     * @returns default value is false
     */
    CoverageHandler.prototype.executeStartListening = function (listeningElement) {
        var _this = this;
        var _a, _b;
        this.listeningElement = listeningElement;
        this.listeningTriggersMap = new Map();
        //First, we initialize the map in order to have a unified list of the registration functions for triggers and attributes so that if we have the same attribute
        // in both attributes list and triggers list we will only call it once
        (_a = listeningElement.triggers) === null || _a === void 0 ? void 0 : _a.forEach(function (triggersData) {
            var triggerSubscriber = Array(triggersData.function);
            _this.listeningTriggersMap.set(triggersData.name, triggerSubscriber);
        });
        (_b = listeningElement.attributes) === null || _b === void 0 ? void 0 : _b.forEach(function (attributeData) {
            if (attributeData.changeEventSubscriber) {
                log.trace("AttributeData is: name " + attributeData.changeEventSubscriber.name + " and func is: " + attributeData.changeEventSubscriber.function);
                var registerFunction = _this.listeningTriggersMap.get(attributeData.changeEventSubscriber.name);
                if (!registerFunction) {
                    log.trace("attribute " + attributeData.changeEventSubscriber.name + " was not in the listeningTriggersMap, adding it");
                    var attributeSubscriber = Array(attributeData.changeEventSubscriber.function);
                    _this.listeningTriggersMap.set(attributeData.changeEventSubscriber.name, attributeSubscriber);
                }
                else {
                    //the name of the attribute already exists, need to check if the registrationFunction is the same
                    log.trace("attribute " + attributeData.changeEventSubscriber.name + " is in the listeningTriggersMap, checking if the function exists");
                    var foundFunction_1 = false;
                    registerFunction.forEach(function (func) {
                        if (func === attributeData.changeEventSubscriber.function)
                            foundFunction_1 = true;
                    });
                    if (!foundFunction_1) {
                        log.trace("function " + attributeData.changeEventSubscriber.function + " was not in the listeningTriggersMap, adding it");
                        _this.listeningTriggersMap[attributeData.changeEventSubscriber.name].push(attributeData.changeEventSubscriber.function);
                    }
                }
            }
        });
        return true;
    };
    /**
     * This method gets the actual node on the screen.
     * @returns a GenericResult with the node inside the data
     */
    CoverageHandler.prototype.getNodeOnScreen = function () {
        // If we can find ourself without relative to the previous result, great. If not,
        // ask our parent to get itself and we will be relative to it.
        if (this.canAccessDirectly()) {
            return this.getNode(null);
        }
        else {
            // We are relative to the parent
            if (this.parentCoverageHandler) {
                // Get the parent and get it relative to it.
                var result = this.parentCoverageHandler.getNodeOnScreen();
                if (!result.success) {
                    return result; // We failed to access parents path
                }
                var $parentNode = result.data.accessResult;
                return this.getNode($parentNode);
            }
            else {
                // No parent - we are relative to the body.
                return this.getNode(null);
            }
        }
    };
    /**
     * This method checks if we access directly to the node or access it with relativity to its parent.
     * @returns true if we can, false otherwise
     */
    CoverageHandler.prototype.canAccessDirectly = function () {
        // Return true if we can access the node without needing to reach the parent
        log.error("canAccessDirectly must be inherited");
        return false;
    };
    /**
     * This method checks if we can access the element directly by its fields, or we need to go up the parent.
     * @param repositoryHandler - the repositoryHandler to search in
     * @returns true if we can, false otherwise
     */
    CoverageHandler.prototype.canAccessDirectlyFromRepository = function (repositoryHandler) {
        // Return true if we can access the node without needing to reach the parent
        log.error("canAccessDirectlyFromRepository must be inherited");
        return false;
    };
    /**
     *  This method returns the actual node on screen
     * @param previousResult
     * @returns a GenericResult struct with data that holds the element that was found
     */
    CoverageHandler.prototype.getNode = function (previousResult) {
        return this.returnFailure("getNode needs to be inherited");
    };
    /**
     * This method sets the node for the control.
     * @param node - the node to set
     */
    CoverageHandler.prototype.setNode = function (node) {
        //Need to be inherited
    };
    /**
     * This method prepares the recorded step to be send to the platform: it merges the repository and reports the new tree,
     * it creates the snapshot of the element and reports the recorded step.
     * @param lAction - the action that was recorded
     */
    CoverageHandler.prototype.executeRecordedStep = function (lAction) {
        var _this = this;
        try {
            // This element need to be saved
            // We need to make sure we have the path and the repository to support it
            // and merge what we found now with the repository
            this.validateAndMergeRepository();
            // Report JBot about the changes in the repository
            this.reportTreeChanged();
        }
        catch (error) {
            this.platformDriver.throwException(error, "ReportTreeChangedException");
        }
        var elementCoordinates;
        try {
            log.debug("getElementCoordinates");
            elementCoordinates = this.getElementCoordinates();
            log.debug("got element coordinates");
            log.debug("createElementSnapshot");
            this.createElementSnapshot(function (snapshot) {
                log.debug("element snapshot created");
                try {
                    // Report JBot about the recording step
                    _this.reportRecordedStep(lAction, snapshot, elementCoordinates);
                }
                catch (error) {
                    _this.platformDriver.throwException(error, "ReportRecordedStepException");
                }
            });
        }
        catch (error) {
            log.error("cannot create element snapshot");
            try {
                // Report JBot about the recording step
                this.reportRecordedStep(lAction);
            }
            catch (error) {
                this.platformDriver.throwException(error, "ReportRecordedStepException");
            }
        }
    };
    /**
     * This method gets the elements' on screen coordinates.
     * @returns the screen coordinates of the element
     */
    CoverageHandler.prototype.getElementCoordinates = function () {
        log.error("Method getElementCoordinates must be inherited");
        return null;
    };
    /**
     * This method creates a snapshot for the element, after it was recorded or captured.
     * @param callback - the callback to be called when a snapshot is created.
     */
    CoverageHandler.prototype.createElementSnapshot = function (callback) {
        log.error("Method createElementSnapshot must be inherited");
        return null;
    };
    /**
     * This method prepares the captured element to be send to the platform: it merges the repository and reports the new tree,
     * it creates the snapshot of the element and reports the recorded step.
     * @param event
     * @returns
     */
    CoverageHandler.prototype.executeStartCapturingClicked = function (event) {
        var _this = this;
        log.debug("executeStartCapturingClicked");
        try {
            // This element need to be captured.
            // We need to make sure we have the path and the repository to support it
            // and merge what we found now with the repository
            this.validateAndMergeRepository();
            // Report JBot about the changes in the repository
            this.reportTreeChanged();
            var elementCoordinates_1;
            try {
                log.debug("getElementCoordinates");
                elementCoordinates_1 = this.getElementCoordinates();
                log.debug("got element coordinates");
                log.debug("createElementSnapshot");
                this.createElementSnapshot(function (snapshot) {
                    log.debug("element snapshot created");
                    try {
                        // Report JBot about the captured element
                        _this.reportCapturedElement(snapshot, elementCoordinates_1);
                    }
                    catch (error) {
                        log.error("Failed to report captured element");
                        _this.platformDriver.throwException(error, "ReportElementCapturedException");
                    }
                });
            }
            catch (error) {
                log.error("cannot create element snapshot");
                try {
                    // Report JBot about the captured element
                    this.reportCapturedElement();
                }
                catch (error) {
                    log.error("Failed to report captured element");
                    this.platformDriver.throwException(error, "ReportElementCapturedException");
                }
            }
        }
        catch (error) {
            this.platformDriver.throwException(error, "ReportTreeChangedException");
        }
        return false; // Stop other events
    };
    /**
     * This method creates a repository if it's not exist yet, and then merges the new one created with all the existing repository.
     */
    CoverageHandler.prototype.validateAndMergeRepository = function () {
        log.debug("validateAndMergeRepository");
        // We need to make sure we have the path and the repository to support it
        this.createRepositoryIfNotExists();
        // Merge what we found now with the repository
        var repositoryNode = this.createElementRepositoryNode();
        this.mergeRepositoryNode(repositoryNode);
    };
    /**
     * This method creates a new repository if is it doesn't exist.
     * @returns the new RepositoryHandler, or the existing one.
     */
    CoverageHandler.prototype.createRepositoryIfNotExists = function () {
        log.debug("createRepositoryIfNotExists");
        // Returns the current repository handler
        if (this.repositoryHandler) {
            log.debug("createRepositoryIfNotExists has a repositoryHandler");
            return this.repositoryHandler;
        }
        log.debug("createRepositoryIfNotExists doesn't have a repositoryHandler");
        // If we don't have yet, lets create it
        this.repositoryHandler = this.createRepositoryHandler();
        log.trace("createRepositoryIfNotExists: repository built is: " + JSON.stringify(this.repositoryHandler._repository.tree));
        return this.repositoryHandler;
    };
    /**
     * This method creates a repositoryHandler.
     * @returns the RepositoryHandler created.
     */
    CoverageHandler.prototype.createRepositoryHandler = function () {
        // As we eventually add our repository to the parent, let's validate that the parent has repository
        this.parentCoverageHandler.createRepositoryIfNotExists();
        // Now the parent has repositoryHandler.
        // We create our element and ask parent to add it and give us back the repository handler.
        var repositoryNode = this.createElementRepositoryNode();
        if (!repositoryNode) {
            log.debug("createRepositoryHandler: Empty repository node created");
            return null;
        }
        log.debug("createRepositoryHandler: repository node is: " + JSON.stringify(repositoryNode));
        // Update the repository tree itself. The tree object is common to all repositoryHandlers.
        repositoryNode = this.parentCoverageHandler.addChildRepositoryNodeToParent(repositoryNode);
        // Create a repository handler where we are the current node.
        return this.parentCoverageHandler.createChildRepositoryHandler(repositoryNode);
    };
    /**
     * This method Update the repository tree by adding the childRepositoryNode to the currentNodes' Children
     * @param childRepositoryNode
     * @returns the parent repository node if exists, or the repository node itself otherwise.
     */
    CoverageHandler.prototype.addChildRepositoryNodeToParent = function (childRepositoryNode) {
        log.debug("addChildRepositoryNodeToParent");
        // Update the repository tree by adding the childRepositoryNode to the currentNode Children
        var prevChildRepositoryNode = this.findSimilarElementInCurrent(childRepositoryNode);
        if (prevChildRepositoryNode) {
            log.debug("addChildRepositoryNodeToParent prevChildRepositoryNode exists");
            // A tricky part. Node already exists - Merge the nodes.
            this.mergeRepositoryNodes(prevChildRepositoryNode, childRepositoryNode);
            return prevChildRepositoryNode;
        }
        else {
            log.debug("addChildRepositoryNodeToParent prevChildRepositoryNode does NOT exist");
            // Just add to children
            this.repositoryHandler.addNodeToChildren(childRepositoryNode);
            return childRepositoryNode;
        }
    };
    /**
     * This method finds the element in the repository.
     * @param repositoryNode
     * @returns the repository node
     */
    CoverageHandler.prototype.findSimilarElementInCurrent = function (repositoryNode) {
        // By default we find by ID . However if it's auto generated id, look at the config
        var id = repositoryNode.id;
        log.debug("findSimilarElementInCurrent id: " + id);
        if (id && id.startsWith(Constants_1.Constants.AUTO_GENERATE_ID_PREFIX)) {
            log.debug("findSimilarElementInCurrent starts with " + Constants_1.Constants.AUTO_GENERATE_ID_PREFIX);
            return this.repositoryHandler.findElementByConfigInCurrent(repositoryNode.config);
        }
        else {
            log.debug("findSimilarElementInCurrent does NOT start with " + Constants_1.Constants.AUTO_GENERATE_ID_PREFIX);
            return this.repositoryHandler.findElementByIdInCurrent(id);
        }
    };
    /**
     * This method creates a repositoryHandler for the repositoryNode
     * @param childRepositoryNode
     * @returns the RepositoryHandler created
     */
    CoverageHandler.prototype.createChildRepositoryHandler = function (childRepositoryNode) {
        log.debug("createChildRepositoryHandler");
        // Create the new repository handler
        var childRepositoryHandler = new RepositoryHandler_1.default(this.repositoryHandler.repository, childRepositoryNode, this.repositoryHandler);
        return childRepositoryHandler;
    };
    /**
     * This method merges some elements in the repository but not all as arrays like children should be treated as add/update
     * @param repositoryNode - the node to merge
     */
    CoverageHandler.prototype.mergeRepositoryNode = function (repositoryNode) {
        // Merge some elements but not all as arrays like children should be treated as add/update
        // but not replace.
        if (!this.repositoryHandler.currentNode) {
            this.repositoryHandler.currentNode = repositoryNode;
            return;
        }
        this.mergeRepositoryNodes(this.repositoryHandler.currentNode, repositoryNode);
    };
    /**
     * This method loops on all nodes elements:
     * - Keep all the ones starting with "_" (manual)
     * - Update recursively all non-children elements
     * - Add/Override as is the children (if exists) as each one need to do it's own merge.
     * @param prevRepositoryNode - the previous repository node that needs to be merged
     * @param newRepositoryNode - the new repositoryNode after the merge
     */
    CoverageHandler.prototype.mergeRepositoryNodes = function (prevRepositoryNode, newRepositoryNode) {
        // Loop on all nodes elements:
        //    - Keep all the ones starting with "_" (manual)
        //    - Update recursively all non-children elements
        //    - Add/Override as is the children (if exists) as each one need to do it's own merge.
        this.removeUnusedRepositoryNodes(prevRepositoryNode, newRepositoryNode, true);
        this.addUpdateNewRepositoryNodes(prevRepositoryNode, newRepositoryNode, true);
    };
    /**
     * This method removes the unused repositoryNodes
     * @param prevRepositoryNode
     * @param newRepositoryNode
     * @param startOfNode - indicates if this is the starting node
     */
    CoverageHandler.prototype.removeUnusedRepositoryNodes = function (prevRepositoryNode, newRepositoryNode, startOfNode) {
        // Loop on existing items
        for (var key in prevRepositoryNode) {
            if (key.startsWith("_")) {
                // Indicates manual insert
                continue;
            }
            if (newRepositoryNode[key]) {
                // Exists in new.
                // Do the same for the object in case it's not 'children'.
                if (startOfNode && key === "children") {
                    continue;
                }
                var prevValue = prevRepositoryNode[key];
                if (prevValue instanceof Object) {
                    this.removeUnusedRepositoryNodes(prevValue, newRepositoryNode[key], false);
                }
                continue;
            }
            // Not in new, delete it
            log.debug("Deleting key " + key);
            delete prevRepositoryNode[key];
        }
    };
    /**
     * This method adds or updates to the prevRepositoryNodes
     * @param prevRepositoryNode - the repositoryNode to update
     * @param newRepositoryNode
     * @param startOfNode - indicates if this is the starting node
     */
    CoverageHandler.prototype.addUpdateNewRepositoryNodes = function (prevRepositoryNode, newRepositoryNode, startOfNode) {
        // Loop on new items
        for (var key in newRepositoryNode) {
            var newValue = newRepositoryNode[key];
            if (!prevRepositoryNode[key]) {
                // Doesn't Exists in new.
                prevRepositoryNode[key] = newValue; // Add it.
                continue;
            }
            // Exists in new. Needs merge.
            // Do not merge children
            if (startOfNode && key === "children") {
                continue;
            }
            // Do not override id  if they were auto generated as it will change the references to it
            if (startOfNode && key === "id") {
                continue;
            }
            // Do not override name if the name was auto generated from ID
            if (startOfNode && key === "name" && newValue.startsWith(Constants_1.Constants.AUTO_GENERATE_ID_PREFIX)) {
                continue;
            }
            if (newValue instanceof Object) {
                this.addUpdateNewRepositoryNodes(prevRepositoryNode[key], newValue, false);
            }
            else {
                prevRepositoryNode[key] = newValue;
            }
        }
    };
    /**
     * This method reports the recorded step back to the platform.
     * @param lAction - the action that was recorded
     * @param snapshot - the snapshot of the element recorded
     * @param coordinates - the coordinates of the element
     */
    CoverageHandler.prototype.reportRecordedStep = function (lAction, snapshot, coordinates) {
        log.debug("reportRecorderStep");
        this.platformDriver.reportRecordedStep(lAction, this.repositoryHandler.pathId, snapshot, coordinates);
    };
    /**
     * This method reports the repository tree changed back to the platform.
     * @param repositoryHandler - the changed repository
     */
    CoverageHandler.prototype.reportTreeChanged = function () {
        this.platformDriver.reportTreeChanged(this.repositoryHandler);
    };
    /**
     * This method reports the captured element to the platform
     * @param snapshot - the snapshot of the element captured
     * @param coordinates - the coordinates of the element
     * @returns true
     */
    CoverageHandler.prototype.reportCapturedElement = function (snapshot, coordinates) {
        return this.platformDriver.reportCapturedElement(this.repositoryHandler.pathId, snapshot, coordinates);
    };
    /**
     * This method reports the captured table to the platform
     * @param snapshot - the snapshot of the table captured
     * @param coordinates - the coordinates of the table
     */
    CoverageHandler.prototype.reportCapturedTable = function (fieldsPathIds, snapshot, coordinates) {
        this.platformDriver.reportCapturedTable(this.repositoryHandler.pathId, fieldsPathIds, snapshot, coordinates);
    };
    /**
     *  This method reports the changed element (while listening) to the platform.
     * @param pathId - the path to the element
     * @param attribute - the attribute that was changed
     * @param newValue - the new value of the attribute
     * @returns true
     */
    CoverageHandler.prototype.reportChangedElement = function (newValue, subscriberName) {
        var _a, _b;
        log.trace("In reportChangedElement");
        var foundAttribute = (_a = this.listeningElement.attributes) === null || _a === void 0 ? void 0 : _a.find(function (attributeData) { return attributeData != null && subscriberName.toLowerCase() === attributeData.changeEventSubscriber.name.toLowerCase(); });
        if (foundAttribute) {
            if (!this.platformDriver.reportChangedElement(this.repositoryHandler.pathId, foundAttribute.name, newValue)) {
                //TODO: Error handling
            }
        }
        if ((_b = this.listeningElement.triggers) === null || _b === void 0 ? void 0 : _b.some(function (triggerData) { return triggerData != null && subscriberName.toLowerCase() === triggerData.name.toLowerCase(); })) {
            if (!this.platformDriver.reportTriggerFired(this.repositoryHandler.pathId, subscriberName)) {
                //TODO: Error handling
            }
        }
        return true;
    };
    CoverageHandler.prototype.reportInitialValue = function (value, subscriberName) {
        var _a;
        log.trace("In reportInitialValue");
        var foundAttribute = (_a = this.listeningElement.attributes) === null || _a === void 0 ? void 0 : _a.find(function (attributeData) { return attributeData != null && subscriberName.toLowerCase() === attributeData.changeEventSubscriber.name.toLowerCase(); });
        if (foundAttribute) {
            if (!this.platformDriver.reportChangedElement(this.repositoryHandler.pathId, foundAttribute.name, value)) {
                //TODO: Error handling
            }
        }
    };
    /**
     * This method reports the trigger fired to the platform.
     * @param pathId - the path to the element
     * @param trigger - the trigger name that was fired
     * @returns true
     */
    CoverageHandler.prototype.reportTriggerFired = function (pathId, trigger) {
        log.debug("reportTriggerFired");
        return this.platformDriver.reportTriggerFired(pathId, trigger);
    };
    /**
     * This method indicates whether we need to add this node the repository or not.
     * @returns Default value is true.
     */
    CoverageHandler.prototype.isNodeToBeAddedToRepository = function () {
        return true;
    };
    /**
     * This method creates an empty element repository node.
     * @returns the repository node that was created
     */
    CoverageHandler.prototype.createBasicElementRepositoryNode = function () {
        var elementNode = {
            children: [],
            config: {},
        };
        return elementNode;
    };
    CoverageHandler.prototype.createElementRepositoryNode = function () { };
    return CoverageHandler;
}());
exports["default"] = CoverageHandler;
//# sourceMappingURL=CoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createApplicationCoverageHandler = exports.createApplicationData = exports.createRepositoryHandler = exports.createPlatformDriver = exports.setLogger = exports.getApplicationCoverageHandler = exports.getPlatformDriver = exports.getRepositoryHandler = exports.getCoverageHandlerFactory = exports.setCoverageHandlerFactory = void 0;
var ApplicationData_1 = __webpack_require__(/*! ../Model/ApplicationData */ "./node_modules/@jacada-jbot/base/include/Model/ApplicationData.js");
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var __jbotCoverageHandlerFactory;
var __jbotRepositoryHandlerObj;
var __jbotPlatformDriverObj;
var __jbotApplicationDataObj;
var __jbotApplicationCoverageHandlerObj;
var log = Log4jConfig_1.logFactory.getLogger("CoverageHandlerCreator");
/**
 * Collection of functions which are kept as their name in order to provide the Coverage Handler API to be called from JBot JS Engine.
 * We keep all the objects we create in temporary variables starting with __ .
 */
/**
 * This method sets the coverageHandler factory.
 * @param factory - the coverageHandlerFactory to set
 */
function setCoverageHandlerFactory(factory) {
    __jbotCoverageHandlerFactory = factory;
}
exports.setCoverageHandlerFactory = setCoverageHandlerFactory;
/**
 * This method gets the coverageHandlerFactory.
 * @returns CoverageHandlerFactory
 */
function getCoverageHandlerFactory() {
    return __jbotCoverageHandlerFactory;
}
exports.getCoverageHandlerFactory = getCoverageHandlerFactory;
/**
 * This method gets the repositoryHandler.
 * @returns RepositoryHandler
 */
function getRepositoryHandler() {
    return __jbotRepositoryHandlerObj;
}
exports.getRepositoryHandler = getRepositoryHandler;
/**
 * This method gets the platformDriver.
 * @returns PlatformDriver
 */
function getPlatformDriver() {
    return __jbotPlatformDriverObj;
}
exports.getPlatformDriver = getPlatformDriver;
/**
 * This method gets the applicationCoverageHandler
 */
function getApplicationCoverageHandler() {
    return __jbotApplicationCoverageHandlerObj;
}
exports.getApplicationCoverageHandler = getApplicationCoverageHandler;
/**
 * This method set logger for coverage handler.
 * @param logger
 * @param applicationName
 * @returns
 */
function setLogger(logger, applicationName) {
    var __logger = logger;
    Log4jConfig_1.CustomLogger.ourLogger = __logger; // Setting the logger to use the JBot logger
    Log4jConfig_1.CustomLogger.setApplicationName(applicationName);
    log.trace('In setLogger');
    try {
        Log4jConfig_1.CustomLogger.setLogLevel(logger.logLevel);
    }
    catch (error) {
        __logger.trace('typescript-logging write to console.log when we change log level but console does not exists in windows');
    }
    log.trace("Set log level to:" + logger.logLevel);
    return true;
}
exports.setLogger = setLogger;
/**
 * This method creates a platformDriver.
 * @param platformDriverObj
 * @returns true if it succeeded
 */
function createPlatformDriver(platformDriverObj) {
    __jbotPlatformDriverObj = __jbotCoverageHandlerFactory.createPlatformDriverOfObject(platformDriverObj);
    return __jbotPlatformDriverObj !== null;
}
exports.createPlatformDriver = createPlatformDriver;
/**
 * This method creates the repositoryHandler
 * @param repositoryTreeJSON - a JSON representing the repository tree
 * @returns true if it succeeded
 */
function createRepositoryHandler(repositoryTreeJSON) {
    var repositoryTree = JSON.parse(repositoryTreeJSON);
    if (!__jbotCoverageHandlerFactory)
        log.error("createRepositoryHandler Coverage Handler factory is null");
    __jbotRepositoryHandlerObj = __jbotCoverageHandlerFactory.createRepositoryHandler(repositoryTree);
    return __jbotRepositoryHandlerObj !== null;
}
exports.createRepositoryHandler = createRepositoryHandler;
/**
 * This method creates an application data
 * @param applicationData
 * @returns true if it succeeded
 */
function createApplicationData(applicationData) {
    var appDataObj = JSON.parse(applicationData);
    __jbotApplicationDataObj = new ApplicationData_1.default({}, appDataObj);
    return __jbotApplicationDataObj !== null;
}
exports.createApplicationData = createApplicationData;
/**
 * This method creates the applicationCoverageHandler
 * @returns true if it succeeded
 */
function createApplicationCoverageHandler() {
    __jbotApplicationCoverageHandlerObj = __jbotCoverageHandlerFactory.createApplicationCoverageHandler(__jbotPlatformDriverObj, __jbotRepositoryHandlerObj, __jbotApplicationDataObj, null, __jbotCoverageHandlerFactory);
    return __jbotApplicationCoverageHandlerObj !== null;
}
exports.createApplicationCoverageHandler = createApplicationCoverageHandler;
//# sourceMappingURL=CoverageHandlerCreator.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerFactory.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerFactory.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var PlatformDriver_1 = __webpack_require__(/*! ../PlatformDrivers/PlatformDriver */ "./node_modules/@jacada-jbot/base/include/PlatformDrivers/PlatformDriver.js");
var RepositoryHandler_1 = __webpack_require__(/*! ../Model/RepositoryHandler */ "./node_modules/@jacada-jbot/base/include/Model/RepositoryHandler.js");
var Repository_1 = __webpack_require__(/*! ../Model/Repository */ "./node_modules/@jacada-jbot/base/include/Model/Repository.js");
var ApplicationCoverageHandler_1 = __webpack_require__(/*! ./ApplicationCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ApplicationCoverageHandler.js");
var ApplicationData_1 = __webpack_require__(/*! ../Model/ApplicationData */ "./node_modules/@jacada-jbot/base/include/Model/ApplicationData.js");
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var log = Log4jConfig_1.logFactory.getLogger("CoverageHandlerFactory");
var CoverageHandlerFactory = /** @class */ (function () {
    /**
     *
     */
    function CoverageHandlerFactory() {
        this.baseCoverageHandlers = new Map();
        this.applicationCoverageHandlers = new Map();
        this.populateBaseCoverageHandlerMap();
    }
    CoverageHandlerFactory.prototype.addApplicationCoverageHandlers = function (coverageHandlers) {
        var _this = this;
        coverageHandlers.forEach(function (applicationCoverageHandler) { return _this.applicationCoverageHandlers.set(applicationCoverageHandler.type, applicationCoverageHandler.class); });
    };
    /**
     * This method creates the platformDriver.
     * @param platformDriverObj
     * @returns PlatformDriver
     */
    CoverageHandlerFactory.prototype.createPlatformDriverOfObject = function (platformDriverObj) {
        return new PlatformDriver_1.default();
    };
    /**
     * This method creates the repository.
     * @param tree - the repository tree
     * @returns Repository
     */
    CoverageHandlerFactory.prototype.createRepository = function (tree) {
        return new Repository_1.Repository(tree);
    };
    /**
     * This method creates the repositoryHandler
     * @param tree - the repository tree
     * @returns RepositoryHandler
     */
    CoverageHandlerFactory.prototype.createRepositoryHandler = function (tree) {
        var repository = new Repository_1.Repository(tree);
        return new RepositoryHandler_1.default(repository, tree, null);
    };
    /**
     * This method creates applicationCoverageHandler.
     * @param platformDriver -
     * @param repositoryHandler
     * @param applicationData
     * @param parentCoverageHandler
     * @param factory
     * @returns ApplicationCoverageHandler
     */
    CoverageHandlerFactory.prototype.createApplicationCoverageHandler = function (platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory) {
        return new ApplicationCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory);
    };
    /**
     * This method creates coverageHandler by the type of the node.
     * @param platformDriver
     * @param repositoryHandler
     * @param applicationData
     * @param parentCoverageHandler
     * @param controlType
     * @param applicationCoverageHandler
     * @returns CoverageHandler
     */
    CoverageHandlerFactory.prototype.createCoverageHandlerByType = function (platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, controlType, applicationCoverageHandler) {
        log.trace("createCoverageHandlerByType.controlType =" + controlType);
        var controlCoverageHandler = this.createControlCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
        var customControlCoverageHandlerType = undefined;
        if (this.applicationCoverageHandlers.has(controlType)) {
            log.trace("control type " + controlType + " is part of application coverage handlers");
            customControlCoverageHandlerType = this.applicationCoverageHandlers.get(controlType);
        }
        else if (this.baseCoverageHandlers.has(controlType)) {
            log.trace("control type " + controlType + " is part of base coverage handlers");
            customControlCoverageHandlerType = this.baseCoverageHandlers.get(controlType);
        }
        var result = controlCoverageHandler.getNodeOnScreen();
        var node = result.success ? result.data.accessResult : null;
        var customCoverageHandler = this.createNewCustomControlInstance(customControlCoverageHandlerType, node, controlCoverageHandler);
        controlCoverageHandler.customCoverageHandler = customCoverageHandler;
        return controlCoverageHandler;
    };
    CoverageHandlerFactory.prototype.createCoverageHandlerByNode = function (platformDriver, repositoryHandler, applicationData, parentCoverageHandler, node, factory, applicationCoverageHandler) {
        var _this = this;
        log.trace("In createCoverageHandlerByNode for node: " + node);
        log.trace("applicationCoverageHandlers length is: " + this.applicationCoverageHandlers.size);
        log.trace("baseCH length is: " + this.baseCoverageHandlers.size);
        var controlCoverageHandler = this.createControlCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
        var foundCustomCoverageHandler = null;
        this.applicationCoverageHandlers.forEach(function (customCoverageHandler) {
            log.trace("looking for match in customCoverageHandlers");
            if (customCoverageHandler.isMatch(node)) {
                foundCustomCoverageHandler = _this.createNewCustomControlInstance(customCoverageHandler, node, controlCoverageHandler);
                return;
            }
            log.trace("couldn't find match, continue to next CH");
        });
        if (!foundCustomCoverageHandler) {
            var nodeType = this.nodeToNodeType(node);
            log.trace("nodeToNodeType returned " + nodeType);
            var coverageHandlerBase = this.baseCoverageHandlers.get(nodeType);
            if (coverageHandlerBase) {
                log.trace("Found CHBase");
                foundCustomCoverageHandler = this.createNewCustomControlInstance(coverageHandlerBase, node, controlCoverageHandler);
            }
            else {
                log.trace("Couldn't find any matching CH, creating default..");
                foundCustomCoverageHandler = this.getDefaultCoverageHandler(node, controlCoverageHandler.executeRecordedStep.bind(controlCoverageHandler), controlCoverageHandler.reportChangedElement.bind(controlCoverageHandler));
            }
        }
        controlCoverageHandler.customCoverageHandler = foundCustomCoverageHandler;
        return controlCoverageHandler;
    };
    CoverageHandlerFactory.prototype.createNewCustomControlInstance = function (type, node, controlCoverageHandler) {
        var customCoverageHandlerObject = Object.create(type.prototype);
        var customCoverageHandlerInstance = new customCoverageHandlerObject.constructor(node, controlCoverageHandler.executeRecordedStep.bind(controlCoverageHandler), controlCoverageHandler.reportChangedElement.bind(controlCoverageHandler));
        return customCoverageHandlerInstance;
    };
    /**
     * This method creates applicationData.
     * @param applicationData
     * @returns ApplicationData
     */
    CoverageHandlerFactory.prototype.createApplicationData = function (applicationData) {
        return new ApplicationData_1.default({}, applicationData);
    };
    /**
     * @param derivedCtor
     * @param baseCtors
     */
    CoverageHandlerFactory.prototype.applyMixins = function (derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
                if (name !== "constructor") {
                    derivedCtor.prototype[name] = baseCtor.prototype[name];
                }
            });
        });
    };
    return CoverageHandlerFactory;
}());
exports["default"] = CoverageHandlerFactory;
//# sourceMappingURL=CoverageHandlerFactory.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CustomControlCoverageHandler.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/CoverageHandlers/CustomControlCoverageHandler.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomControlCoverageHandler = void 0;
var BaseCustomControlCoverageHandler_1 = __webpack_require__(/*! ./BaseCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/BaseCustomControlCoverageHandler.js");
var CustomControlCoverageHandler = /** @class */ (function (_super) {
    __extends(CustomControlCoverageHandler, _super);
    function CustomControlCoverageHandler(node, recordingStepReporter, listeningReporter) {
        return _super.call(this, node, recordingStepReporter, listeningReporter) || this;
    }
    /**
     * This method indicates if the element is recordable.
     * @returns default value is true.
     */
    CustomControlCoverageHandler.prototype.isRecordable = function () {
        return true;
    };
    /**
     * This method indicates whether we need to record on the controls' children.
     * @returns default value is false.
     */
    CustomControlCoverageHandler.prototype.areChildrenRecordable = function () {
        return false;
    };
    /**
     * This method indicates whether we need to capture on the controls' children.
     * @returns default value is false.
     */
    CustomControlCoverageHandler.prototype.areChildrenCapturable = function () {
        return false;
    };
    /**
     * This method indicates if the element is listenable.
     * @returns default value is true.
     */
    CustomControlCoverageHandler.prototype.isListenable = function () {
        return true;
    };
    return CustomControlCoverageHandler;
}(BaseCustomControlCoverageHandler_1.BaseCustomControlCoverageHandler));
exports.CustomControlCoverageHandler = CustomControlCoverageHandler;
//# sourceMappingURL=CustomControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ScreenCoverageHandler.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/CoverageHandlers/ScreenCoverageHandler.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(/*! ../Model/RepositoryHandler */ "./node_modules/@jacada-jbot/base/include/Model/RepositoryHandler.js");
var GenericResult_1 = __webpack_require__(/*! ../Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
var ControlCoverageHandler_1 = __webpack_require__(/*! ./ControlCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler.js");
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var Constants_1 = __webpack_require__(/*! ../Model/Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
var log = Log4jConfig_1.logFactory.getLogger("ScreenCoverageHandler");
/**
 * The Coverage Handler in the screen level.
 */
var ScreenCoverageHandler = /** @class */ (function (_super) {
    __extends(ScreenCoverageHandler, _super);
    function ScreenCoverageHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScreenCoverageHandler.prototype.type = function () {
        return "Screen";
    };
    /**
     * This method starts the recording process on screen level.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.startRecording = function () {
        // Starts a recording process in the platformDriver using the repositorySection
        return this.returnFailure("To be inherited by coverage");
    };
    /**
     * This method stops the recording process on screen level.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.stopRecording = function () {
        // Stops a recording process in the platformDriver using the repositorySection and returns the recordingResult
        return this.returnFailure("TBD");
    };
    /**
     * This method starts the capturing process on screen level.
     * @returns a GenericResult
     */
    ScreenCoverageHandler.prototype.startCapturing = function () {
        // Starts a capturing process in the platformDriver using the repositorySection
        // Executing the actual change to listen mode
        return this.returnFailure("To be inherited by coverage");
    };
    /**
     * This method stops the capturing process on screen.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.stopCapturing = function () {
        this.saveCoverageHandlerForUniqueId(this.uniqueId);
        // Stops a capturing process
        return this.returnFailure("TBD");
    };
    /**
     * This method starts the listening process on screen.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.startListening = function () {
        // Starts a listening process in the platformDriver using the repositorySection
        return this.returnFailure("TBD");
    };
    /**
     * This method stops the listening process on screen.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.stopListening = function () {
        // Stops a listening process
        return this.returnFailure("TBD");
    };
    /**
     * This method validates if the screen exist
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.validateScreen = function () {
        // By default, checking that the unique id is the same
        if (this.uniqueId === this.repositoryHandler.id) {
            return this.returnSuccess("Same screen");
        }
        else {
            log.debug("Different screen: '" + this.uniqueId + "' <> " + this.repositoryHandler.id);
            return new GenericResult_1.GenericResult(false, "Different screen " + this.uniqueId, null);
        }
    };
    /**
     * This method creates a repository node for the screen.
     * @returns the element node created.
     */
    ScreenCoverageHandler.prototype.createElementRepositoryNode = function () {
        var elementNode = _super.prototype.createBasicElementRepositoryNode.call(this);
        elementNode.type = this.type();
        return elementNode;
    };
    /**
     * This method gets the screen title.
     * @returns the screen title.
     */
    ScreenCoverageHandler.prototype.screenTitle = function () {
        log.debug("This method needs to be inherited");
        return "";
    };
    /**
     * This method adds our child repository node to our repository.
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns the unified repositoryHandler
     */
    ScreenCoverageHandler.prototype.addChildRepositoryNodeToOurselvesRecursively = function (childRepositoryNode, childCoverageHandler) {
        log.debug("addChildRepositoryNodeToOurselvesRecursively");
        // Adding a node to coverage handler which is base (like table and body)
        // Make sure we have repository
        this.createRepositoryIfNotExists();
        // Adding this repository to ourselves
        childRepositoryNode = this.addChildRepositoryNodeToParent(childRepositoryNode);
        // In case the ID & Name haven't been set yet, we auto generate them
        if (childRepositoryNode.id === Constants_1.Constants.AUTO_GENERATE_ID_PREFIX) {
            childRepositoryNode.id = this.generateId(childCoverageHandler, "");
        }
        if (childRepositoryNode.name === Constants_1.Constants.AUTO_GENERATE_ID_PREFIX) {
            childRepositoryNode.name = childRepositoryNode.id;
        }
        // Create a repository handler where we are the current node.
        return this.createChildRepositoryHandler(childRepositoryNode);
    };
    /**
     * Fire page opened event  if path id  is part of listening elements
     */
    ScreenCoverageHandler.prototype.pageOpened = function () {
        if (!this.repositoryHandler) {
            return;
        }
        var listeningElement = this.applicationCoverageHandler.getListeningElement(this.repositoryHandler.pathId);
        if (listeningElement == null || listeningElement.triggers == null)
            return;
        if (listeningElement.triggers.find(function (trigger) { return trigger.name === "opened"; })) {
            this.platformDriver.reportTriggerFired(listeningElement.path, "opened");
        }
    };
    ScreenCoverageHandler.prototype.execLastNodeOnScreen = function (elementPath, lAction, validateOnly) {
        // If we reach the last one (the one needs actions on) go and execute. Otherwise, go deeper.
        // We are the element needed to execute on.
        // Lets get the element.
        var result = this.getNodeOnScreen();
        if (!result.success)
            return new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        // Need to execute on the element itself. We are also the coverage handler that knows the control
        var currentNode = result.data.accessResult;
        //save current node on its coverage handler
        this.setNode(currentNode);
        // Go deeper on the path: Continue to next node
        return this.execNextNodeOnScreen(elementPath, lAction, validateOnly);
    };
    ScreenCoverageHandler.prototype.execLastNodeOnScreenAsync = function (elementPath, lAction, validateOnly) {
        return __awaiter(this, void 0, void 0, function () {
            var result, currentNode;
            return __generator(this, function (_a) {
                result = this.getNodeOnScreen();
                if (!result.success)
                    return [2 /*return*/, new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION)];
                currentNode = result.data.accessResult;
                //save current node on its coverage handler
                this.setNode(currentNode);
                // Go deeper on the path: Continue to next node
                return [2 /*return*/, this.execNextNodeOnScreenAsync(elementPath, lAction, validateOnly)];
            });
        });
    };
    return ScreenCoverageHandler;
}(ControlCoverageHandler_1.default));
exports["default"] = ScreenCoverageHandler;
//# sourceMappingURL=ScreenCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/ApplicationData.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/ApplicationData.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var log = Log4jConfig_1.logFactory.getLogger("ApplicationData");
/**
 * This class stores data on application level.
 */
var ApplicationData = /** @class */ (function () {
    function ApplicationData(screenData, application) {
        this.screen = screenData;
        this.application = application;
        this._saveScreenFunction = function () { };
    }
    Object.defineProperty(ApplicationData.prototype, "application", {
        get: function () { return this._application; },
        /**
         * This field stores the dynamicAttributes we entered on the manifest.json
         */
        set: function (data) { this._application = data; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApplicationData.prototype, "screen", {
        get: function () { return this._screen; },
        /**
         * This field holds the elementData class by topic and key
         */
        set: function (data) { this._screen = data; },
        enumerable: false,
        configurable: true
    });
    ApplicationData.prototype.clearScreenData = function () {
        this.screen = {};
        this._saveScreenFunction(this.screen);
    };
    ApplicationData.prototype.getScreenData = function (key) {
        return this.screen[key];
    };
    ApplicationData.prototype.setScreenData = function (key, value) {
        this.screen[key] = value;
        this._saveScreenFunction(this.screen);
    };
    /**
     * This method gets the elementData stored by the topic and key
     * @param topic
     * @param key
     * @returns the elementData
     */
    ApplicationData.prototype.getScreenTopicData = function (topic, key) {
        log.trace("getScreenTopicData topic:" + topic + " key " + key);
        if (!this.screen[topic])
            return null;
        return this.screen[topic][key];
    };
    /**
     * This method sets the elementData by the topic and key
     * @param topic
     * @param key
     * @param value - the object to set
     */
    ApplicationData.prototype.setScreenTopicData = function (topic, key, value) {
        log.trace("setScreenTopicData topic:" + topic + " key " + key);
        if (!this.screen[topic])
            this.screen[topic] = {};
        this.screen[topic][key] = value;
        this._saveScreenFunction(this.screen);
    };
    /**
     * This method deletes all the data stored on the given topic.
     * @param topic
     */
    ApplicationData.prototype.deleteScreenTopic = function (topic) {
        if (this.screen[topic])
            delete this.screen[topic];
    };
    /**
     * This method deleted the data stored on the given topic and key.
     * @param topic
     * @param key
     */
    ApplicationData.prototype.deleteScreenTopicData = function (topic, key) {
        if (this.screen[topic] && this.screen[topic][key])
            delete this.screen[topic][key];
    };
    return ApplicationData;
}());
exports["default"] = ApplicationData;
//# sourceMappingURL=ApplicationData.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/Constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/Constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Constants = void 0;
/**
 * This class holds the constants values to use throughout all the application.
 */
exports.Constants = {
    ELEMENT_PATH_IDS: "/",
    ELEMENT_DATA_TOPIC: "ElementData",
    AUTO_GENERATE_ID_PREFIX: "AUTO_",
    ELEMENT_NOT_FOUND_EXCEPTION: "ElementNotFoundException",
    ELEMENT_DISABLED_EXCEPTION: "ElementDisabledException",
    TYPE_MISMATCH_EXCEPTION: "TypeMismatchException",
    GENERIC_EXCEPTION: "GenericExecutionException",
};
//# sourceMappingURL=Constants.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/ElementData.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/ElementData.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * This class stores a coverageHandler that was created during a process (recording, listening..)
 */
var ElementData = /** @class */ (function () {
    function ElementData() {
    }
    Object.defineProperty(ElementData.prototype, "coverageHandler", {
        get: function () { return this._coverageHandler; },
        set: function (ch) { this._coverageHandler = ch; },
        enumerable: false,
        configurable: true
    });
    return ElementData;
}());
exports["default"] = ElementData;
//# sourceMappingURL=ElementData.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/ElementPath.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/ElementPath.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Constants_1 = __webpack_require__(/*! ./Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
/**
 * This class is responsible for actions on elementPath of an element.
 */
var ElementPath = /** @class */ (function () {
    function ElementPath(elementPathId) {
        this._currentIndex = 0;
        this._elementPathId = elementPathId;
    }
    Object.defineProperty(ElementPath.prototype, "currentIndex", {
        /**
         * This field holds the current index on the path
         */
        get: function () { return this._currentIndex; },
        set: function (index) { this._currentIndex = index; },
        enumerable: false,
        configurable: true
    });
    /**
     * This method gets the next element on the path.
     * @returns the next element
     */
    ElementPath.prototype.next = function () {
        if (this.isLast())
            return null;
        var nextSep = this._elementPathId.indexOf(Constants_1.Constants.ELEMENT_PATH_IDS, this._currentIndex);
        if (nextSep < 0) {
            var nextElement = this._elementPathId.substring(this._currentIndex);
            this._currentIndex = this._elementPathId.length;
            return nextElement;
        }
        else {
            var nextElement = this._elementPathId.substring(this._currentIndex, nextSep);
            this._currentIndex = nextSep + 1;
            return nextElement;
        }
    };
    /**
     * This method gets the rest of the path from the currentIndex.
     * @returns
     */
    ElementPath.prototype.restPathId = function () {
        return this._elementPathId.substring(this._currentIndex);
    };
    /**
     * This method gets the full path of the element, starting from the currentIndex.
     * @returns
     */
    ElementPath.prototype.currentFullPathId = function () {
        if (this._currentIndex <= 0)
            return "";
        if (this.isLast())
            return this._elementPathId;
        return this._elementPathId.substring(0, this._currentIndex - 1);
    };
    /**
     * This method checks if the element is last on the path.
     * @returns true if it is, false otherwise.
     */
    ElementPath.prototype.isLast = function () {
        return this._currentIndex >= this._elementPathId.length;
    };
    /**
     * This method resets the path of the element, to point to the beginning.
     */
    ElementPath.prototype.reset = function () { this._currentIndex = 0; };
    return ElementPath;
}());
exports["default"] = ElementPath;
//# sourceMappingURL=ElementPath.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/EventDetails.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/EventDetails.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var EventDetails = /** @class */ (function () {
    function EventDetails(name, value) {
        this.name = name;
        this.newValue = value;
    }
    EventDetails.prototype.toString = function () {
        return "name:" + this.name + ", newValue:" + this.newValue;
    };
    return EventDetails;
}());
exports["default"] = EventDetails;
//# sourceMappingURL=EventDetails.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/GenericResult.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GenericResult = void 0;
/**
 * This class is a result class, so we are able to pass any data from a method, while deciding if it was
 * successful or not: if the success value is true - the action was successful, and the data is populated, if needed.
 * Else, the success value is false, and the error message is populated with the appropriate error.
 */
var GenericResult = /** @class */ (function () {
    function GenericResult(success, errorMessage, data) {
        this.success = success;
        this.errorMessage = errorMessage;
        this.data = data;
    }
    return GenericResult;
}());
exports.GenericResult = GenericResult;
//# sourceMappingURL=GenericResult.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/ListeningElement.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/ListeningElement.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var log = Log4jConfig_1.logFactory.getLogger("ListeningElement");
/**
 * This class holds the elements we need to listen to:
 * path - is the path to the element we want to listen to.
 * attributes - is a list of the attributes we need to listen.
 * triggers - is a list of triggers we want to register to.
 */
var ListeningElement = /** @class */ (function () {
    // it means it's the first time
    function ListeningElement(path, attributes, triggers) {
        this.path = path;
        this.attributes = attributes;
        this.triggers = triggers;
        this.lastStatus = new Map();
    }
    return ListeningElement;
}());
exports["default"] = ListeningElement;
//# sourceMappingURL=ListeningElement.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * This class holds the logical action, i.e:
 * the action name and a value
 */
var LogicalAction = /** @class */ (function () {
    function LogicalAction(actionName, value) {
        this.actionName = actionName;
        this.value = value;
    }
    LogicalAction.fromJSON = function (lAction) {
        return new LogicalAction(lAction.actionName, lAction.value);
    };
    LogicalAction.prototype.toJSON = function () {
        var lAction = {
            actionName: this.actionName,
            value: this.value
        };
        return lAction;
    };
    return LogicalAction;
}());
exports["default"] = LogicalAction;
//# sourceMappingURL=LogicalAction.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/Operations.js":
/*!********************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/Operations.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Operations = void 0;
var Operations;
(function (Operations) {
    Operations["EQUALS"] = "EQUALS";
    Operations["NOT_EQUALS"] = "NOT_EQUALS";
    Operations["CONTAINS"] = "CONTAIN";
    Operations["NOT_CONTAIN"] = "NOT_CONTAIN";
    Operations["START_WITH"] = "START_WITH";
    Operations["NOT_START_WITH"] = "NOT_START_WITH";
    Operations["END_WITH"] = "END_WITH";
    Operations["NOT_END_WITH"] = "NOT_END_WITH";
    Operations["IS_EMPTY"] = "IS_EMPTY";
    Operations["IS_NOT_EMPTY"] = "IS_NOT_EMPTY";
})(Operations = exports.Operations || (exports.Operations = {}));
//# sourceMappingURL=Operations.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/Repository.js":
/*!********************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/Repository.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Repository = void 0;
/*
     * The Repository has fixed parts and dynamic parts. Here are he fixed parts of each node.
     * id - Unique Id in this level of the tree. The PathId is calculated as the combination of all the id's from the tree root to the node.
     * name - displayed name (to be visible in the designer)
     * children - array of other nodes.
     * type - the type of node. It's behavior will be defined according to the type in a separate document.
     * config - data to be saved by the coverage handler to be able to execute the actions.
     * image
     *
     *
     * Optional:
     * coverageHandler
     * defaultCoverageHandlerName[elementType] - element per screen/control type, a name of a coverage handler. Will always be on the application but can also be on lower levels.
     * waitForScreenInMilli - Amount of milli seconds to wait until the element appears on screen
     * waitForScreenIntervalInMilli - When waiting on the above, check every this interval.
     *
     * */
var Repository = /** @class */ (function (_super) {
    __extends(Repository, _super);
    function Repository(tree) {
        var _this = _super.call(this) || this;
        _this.tree = tree;
        return _this;
    }
    return Repository;
}(Object));
exports.Repository = Repository;
//# sourceMappingURL=Repository.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/RepositoryHandler.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/RepositoryHandler.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var GenericResult_1 = __webpack_require__(/*! ./GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
var Constants_1 = __webpack_require__(/*! ./Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var log = Log4jConfig_1.logFactory.getLogger("RepositoryHandler");
/**
 * This class represents the repository handler
 */
var RepositoryHandler = /** @class */ (function () {
    /*
     * The RepositoryHandler contains the repository and point to the current node in the repository.
    */
    function RepositoryHandler(repository, currentNode, parentHandler) {
        this._pathId = null;
        this._parentHandler = null;
        this._repository = repository;
        if (currentNode) {
            this._currentNode = currentNode;
        }
        else {
            this._currentNode = repository.tree; // Default is the top of the tree
        }
        this._parentHandler = parentHandler;
        if (parentHandler) {
            this.createPath(parentHandler.pathId, this.id);
        }
        else {
            this.createPath(null, this.id);
        }
    }
    Object.defineProperty(RepositoryHandler.prototype, "repository", {
        // Note: Elements in the tree which start with _ have precedents on same names without underscore. They are usually added manually and the record/capture doesn't override them
        /**
         * Points to the repository
         */
        get: function () { return this._repository; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RepositoryHandler.prototype, "repositoryTree", {
        get: function () { return this._repository.tree; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RepositoryHandler.prototype, "currentNode", {
        get: function () { return this._currentNode; },
        /**
         * Points to the current node in the repository
         */
        set: function (node) { this._currentNode = node; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(RepositoryHandler.prototype, "pathId", {
        get: function () { return this._pathId; },
        /**
         * Points to the path id of the element
         */
        set: function (id) { this._pathId = id; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(RepositoryHandler.prototype, "parentHandler", {
        get: function () { return this._parentHandler; },
        set: function (parentHandler) { this._parentHandler = parentHandler; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(RepositoryHandler.prototype, "name", {
        get: function () { return this.currentNode._name ? this.currentNode._name : this.currentNode.name; },
        set: function (name) { this.currentNode.name = name; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RepositoryHandler.prototype, "id", {
        // In case there is no id, we use the name.
        get: function () { return this.currentNode._id ? this.currentNode._id : (this.currentNode.id ? this.currentNode.id : this.name); },
        set: function (id) { this.currentNode.id = id; },
        enumerable: false,
        configurable: true
    });
    /**
     * This method gets the id of the node.
     * @param node
     * @returns
     */
    RepositoryHandler.prototype.getNodeId = function (node) {
        return node._id ? node._id : (node.id ? node.id : (node._name ? node._name : node.name));
    };
    Object.defineProperty(RepositoryHandler.prototype, "coverageHandlerName", {
        get: function () { return this.currentNode._coverageHandler ? this.currentNode._coverageHandler : this.currentNode.coverageHandler; },
        set: function (coverageHandler) { this.currentNode.coverageHandler = coverageHandler; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RepositoryHandler.prototype, "type", {
        get: function () { return this.currentNode._type ? this.currentNode._type : this.currentNode.type; },
        /**
         * The type of the node
         */
        set: function (type) { this.currentNode.type = type; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RepositoryHandler.prototype, "children", {
        get: function () { return this.currentNode._children ? this.currentNode._children : this.currentNode.children; },
        /**
         * Points to the children of the node
         */
        set: function (children) { this.currentNode.children = children; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RepositoryHandler.prototype, "config", {
        get: function () { return this.currentNode._config ? this.currentNode._config : this.currentNode.config; },
        /**
         * The config section
         */
        set: function (config) { this.currentNode.config = config; },
        enumerable: false,
        configurable: true
    });
    /**
     * This method finds an element in the repository by its id.
     * @param lElelementId
     * @returns the element found
     */
    RepositoryHandler.prototype.findElementByIdInCurrent = function (lElelementId) {
        // Find the element in the repository
        var subNodeElements = this.getSubNodesOfCurrent();
        for (var _i = 0, subNodeElements_1 = subNodeElements; _i < subNodeElements_1.length; _i++) {
            var subNodeElement = subNodeElements_1[_i];
            var nodeId = this.getNodeId(subNodeElement);
            if (nodeId && nodeId === lElelementId)
                return subNodeElement;
        }
        ;
        return null;
    };
    /**
     * This method finds an element in the repository by the config section.
     * @param lConfig
     * @returns the element found
     */
    RepositoryHandler.prototype.findElementByConfigInCurrent = function (lConfig) {
        // Find the element in the repository by the config
        var sConfig = JSON.stringify(lConfig); // We compare json strings
        var subNodeElements = this.getSubNodesOfCurrent();
        for (var _i = 0, subNodeElements_2 = subNodeElements; _i < subNodeElements_2.length; _i++) {
            var subNodeElement = subNodeElements_2[_i];
            if (subNodeElement.config && JSON.stringify(subNodeElement.config) === sConfig)
                return subNodeElement;
        }
        ;
        return null;
    };
    /**
     * Points to the application on the repository
     * @returns
     */
    RepositoryHandler.prototype.applicationHandler = function () {
        if (this.parentHandler) {
            return this.parentHandler.applicationHandler();
        }
        else {
            return this;
        }
    };
    /**
     * This method get all the sub nodes of the current element.
     * @returns
     */
    RepositoryHandler.prototype.getSubNodesOfCurrent = function () {
        if (this.children)
            return this.children;
        // GDTEMP: Need to support other hierarchies. Is it by defining different repository handler?? Is it by the current coverage handler?
        return [];
    };
    /**
     * This method adds the given node the children in the repository.
     * @param subNode
     */
    RepositoryHandler.prototype.addNodeToChildren = function (subNode) {
        var subNodeElements = this.getSubNodesOfCurrent();
        subNodeElements.push(subNode);
    };
    /**
     * This method removes the given node from the children in the repository
     * @param {*} subNode - the node to remove
     * @memberof RepositoryHandler
     */
    RepositoryHandler.prototype.removeNodeFromChildren = function (subNode) {
        var subNodeElements = this.getSubNodesOfCurrent();
        var index = 0;
        for (var _i = 0, subNodeElements_3 = subNodeElements; _i < subNodeElements_3.length; _i++) {
            var child = subNodeElements_3[_i];
            var subNodeId = this.getNodeId(subNode);
            var childNodeId = this.getNodeId(child);
            if (subNodeId && childNodeId && subNodeId === childNodeId) {
                //delete this.currentNode["children"][index];// subNodeElements[child];
                this.currentNode["children"].splice(index, 1);
                break;
            }
            else {
                var subNodeConfig = JSON.stringify(subNode.config);
                if (child.config && JSON.stringify(child.config) === subNodeConfig) {
                    //delete this.currentNode["children"][index];
                    this.currentNode["children"].splice(index, 1);
                    break;
                }
            }
            index++;
        }
    };
    /**
     * TODO RONA: why is it here? should we remove it?
     * @param errorMessage
     * @returns
     */
    RepositoryHandler.prototype.returnFailure = function (errorMessage) {
        log.error(errorMessage);
        return new GenericResult_1.GenericResult(false, errorMessage, null);
    };
    /**
     * TODO RONA: why is it here? should we remove it?
     * @param data
     * @returns
     */
    RepositoryHandler.prototype.returnSuccess = function (data) {
        return new GenericResult_1.GenericResult(true, null, data);
    };
    /**
     * This method creates a path to the element
     * @param basePath
     * @param elementName
     * @returns a string representing the path to the element
     */
    RepositoryHandler.prototype.createPath = function (basePath, elementName) {
        log.debug("CreatePath Base path:" + basePath + " element name:" + elementName);
        if (basePath) {
            if (basePath.length > 0)
                basePath = basePath + Constants_1.Constants.ELEMENT_PATH_IDS;
            this.pathId = basePath + elementName;
        }
        else {
            this.pathId = elementName;
        }
        log.debug("Path:" + this.pathId);
        return this.pathId;
    };
    /**
     * This method merges two paths together.
     * @param path1
     * @param path2
     * @returns the merged path
     */
    RepositoryHandler.prototype.mergePaths = function (path1, path2) {
        log.debug("mergePaths path1:" + path1 + " path2:" + path2);
        if (path1 && path1.length > 0) {
            if (path2 && path2.length > 0) {
                return path1 + Constants_1.Constants.ELEMENT_PATH_IDS + path2;
            }
            else {
                return path1;
            }
        }
        else {
            return path2;
        }
    };
    /**
     * This method gets the path of the element concatenated with its name.
     * @param elementName
     * @returns the concatenated string
     */
    RepositoryHandler.prototype.getPathWithElement = function (elementName) {
        log.debug("getPathWithElement path id " + this.pathId + " element name " + elementName);
        var pathId = this.pathId;
        if (!pathId)
            return elementName;
        if (pathId.length > 0)
            pathId = pathId + Constants_1.Constants.ELEMENT_PATH_IDS;
        return pathId + elementName;
    };
    return RepositoryHandler;
}());
exports["default"] = RepositoryHandler;
//# sourceMappingURL=RepositoryHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Model/TableDataResponse.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Model/TableDataResponse.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * This holds the retrieved data from a table
 * @export
 * @class TableDataResponse
 * @member rowId - the rowId from the table
 * @member data - a key value object: a unique key of the field, and a value of the retrieved attributes with the values
 */
var TableDataResponse = /** @class */ (function () {
    function TableDataResponse(rowId, data) {
        this.rowId = rowId;
        this.data = data;
    }
    return TableDataResponse;
}());
exports["default"] = TableDataResponse;
//# sourceMappingURL=TableDataResponse.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/PlatformDrivers/PlatformDriver.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/PlatformDrivers/PlatformDriver.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Log4jConfig_1 = __webpack_require__(/*! ../Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
var log = Log4jConfig_1.logFactory.getLogger("PlatformDriver");
var PlatformDriver = /** @class */ (function () {
    function PlatformDriver() {
    }
    /**
     * This method reports the repository tree changed back to the platform.
     * @param repositoryHandler - the changed repository
     */
    PlatformDriver.prototype.reportTreeChanged = function (repositoryHandler) {
        // Should be inherited by platform
    };
    /**
     * This method reports the recorded step back to the platform.
     * @param lAction - a struct that holds the action name and value that was recorded
     * @param pathId
     * @param snapshot
     * @param coordinates
     */
    PlatformDriver.prototype.reportRecordedStep = function (lAction, pathId, snapshot, coordinates) {
        // Should be inherited by platform
    };
    /**
     * This method reports the captured element to the platform.
     * @param pathId
     * @param snapshot
     * @param coordinates
     * @returns true
     */
    PlatformDriver.prototype.reportCapturedElement = function (pathId, snapshot, coordinates) {
        // Should be inherited by platform    
        return true;
    };
    PlatformDriver.prototype.reportCapturedTable = function (pathId, fieldsPathIds, snapshot, coordinates) {
    };
    /**
     * This method reports the changed element (while listening) to the platform.
     * @param pathId
     * @param attribute
     * @param newValue
     * @returns true
     */
    PlatformDriver.prototype.reportChangedElement = function (pathId, attribute, newValue) {
        // Should be inherited by platform
        return true;
    };
    /**
     * This method reports the trigger fired to the platform.
     * @param pathId
     * @param trigger
     * @returns true
     */
    PlatformDriver.prototype.reportTriggerFired = function (pathId, trigger) {
        // Should be inherited by platform
        return true;
    };
    /**
     * This method creates the relevant exception and "throws" it to the platform.
     * @param error
     * @param exceptionType
     */
    PlatformDriver.prototype.throwException = function (error, exceptionType) {
        // Should be inherited by platform
    };
    return PlatformDriver;
}());
exports["default"] = PlatformDriver;
//# sourceMappingURL=PlatformDriver.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomLogger = exports.Logging = exports.logFactory = void 0;
var typescript_logging_1 = __webpack_require__(/*! typescript-logging */ "./node_modules/typescript-logging/dist/commonjs/typescript-logging.js");
var options = new typescript_logging_1.LoggerFactoryOptions()
    .addLogGroupRule(new typescript_logging_1.LogGroupRule(new RegExp(".+"), typescript_logging_1.LogLevel.Trace, new typescript_logging_1.LogFormat(), typescript_logging_1.LoggerType.Custom, function (name, settings) { return new CustomLogger(name, settings); }));
// Create a named loggerfactory and pass in the options and export the factory.
// Named is since version 0.2.+ (it's recommended for future usage)
exports.logFactory = typescript_logging_1.LFService.createNamedLoggerFactory("LoggerFactory", options);
exports.Logging = {
    help: typescript_logging_1.help,
    getLogControl: typescript_logging_1.getLogControl,
    getCategoryControl: typescript_logging_1.getCategoryControl,
};
var CustomLogger = /** @class */ (function (_super) {
    __extends(CustomLogger, _super);
    function CustomLogger(name, settings) {
        return _super.call(this, name, settings) || this;
    }
    CustomLogger.prototype.doLog = function (msg) {
        var formattedMessage = this.createDefaultLogMessage(msg);
        if (CustomLogger.ourLogger) {
            var loglevel = typescript_logging_1.LogLevel[msg.level];
            CustomLogger.ourLogger[loglevel]("[" + CustomLogger.applicationName + "] " + msg.loggerName + ": " + msg.message);
        }
        else {
            console.log(formattedMessage);
        }
    };
    CustomLogger.setLogLevel = function (logLevel) {
        var logLevelAsString = this.getLogLevelAsString(logLevel);
        typescript_logging_1.getLogControl().getLoggerFactoryControl(0).change({ group: "all", logLevel: logLevelAsString, logFormat: "Default", showLoggerName: true, showTimestamp: false });
    };
    CustomLogger.setApplicationName = function (applicationName) {
        CustomLogger.applicationName = applicationName;
    };
    CustomLogger.getLogLevelAsString = function (logLevel) {
        switch (logLevel) {
            case 0:
                return "Trace";
            case 1:
                return "Debug";
            case 2:
                return "Info";
            case 3:
                return "Warn";
            case 4:
                return "Error";
            case 5:
                return "Fatal";
            default:
                return undefined;
        }
    };
    return CustomLogger;
}(typescript_logging_1.AbstractLogger));
exports.CustomLogger = CustomLogger;
//# sourceMappingURL=Log4jConfig.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/ButtonWebControlCoverageHandler.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/ButtonWebControlCoverageHandler.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const LogicalAction_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/LogicalAction */ "./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js");
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
const EventDetails_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/EventDetails */ "./node_modules/@jacada-jbot/base/include/Model/EventDetails.js");
/**
 * Coverage handler for a button
 */
class ButtonWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Button";
    }
    startRecording() {
        this.recordOverlayClickedEvent((event) => {
            let lAction = new LogicalAction_1.default(this.click.name, "");
            return lAction;
        }, (event) => {
            this.click();
        });
        return true;
    }
    subscribeToClicked() {
        this.listenToEvent("click", () => {
            return new EventDetails_1.default("clicked");
        });
    }
    /**
     * This method fires a click event on the jquery object
     * @returns a GenericResult struct
     */
    click() {
        this.node[0].click();
        return new GenericResult_1.GenericResult(true, null, null);
    }
    updateElementRepositoryNode(elementNode) {
        elementNode.name = this.getName() || elementNode.name;
        elementNode.id = this.node.attr("id") || this.getId() || elementNode.id;
    }
    getName() {
        const val = this.node.val();
        if (val) {
            const text = val.toString();
            return text;
        }
        //get text from inner <button> element
        const walker = document.createTreeWalker(this.node[0], NodeFilter.SHOW_TEXT);
        const nodesText = [];
        while (walker.nextNode()) {
            nodesText.push(walker.currentNode.textContent.trim());
        }
        // Join all texts with a space between them
        return nodesText.join(" ");
    }
    getId() {
        // Try to make the ID meaningfully by having the right prefix when id is auto generated
        // Try to see if we have text.
        const id = this.getName();
        if (id.length > 0) {
            return id;
        }
        return "";
    }
}
exports["default"] = ButtonWebControlCoverageHandler;
//# sourceMappingURL=ButtonWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/CheckBoxWebControlCoverageHandler.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/CheckBoxWebControlCoverageHandler.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const EventDetails_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/EventDetails */ "./node_modules/@jacada-jbot/base/include/Model/EventDetails.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const LogicalAction_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/LogicalAction */ "./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("CheckBoxWebControlCoverageHandler");
/**
 * Coverage handler for a checkbox
 */
class CheckBoxWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "CheckBox";
    }
    startRecording() {
        this.recordEvent("change", (event) => {
            let lAction = new LogicalAction_1.default(this.setChecked.name, event.target.checked);
            return lAction;
        });
        return true;
    }
    subscribeToCheckedChanged() {
        this.listenToEvent("change", (event) => {
            return new EventDetails_1.default("checkedChanged", event.target.checked);
        });
    }
    /**
     * This method sets the checkbox with the given value by dispatching change event on the node
     * @param isChecked - if true the check-box will be checked otherwise unchecked
     * @returns a GenericResult struct
     */
    setChecked(isChecked) {
        this.node.prop("checked", isChecked);
        this.node[0].dispatchEvent(new Event("change"));
        return new GenericResult_1.GenericResult(true, null, null);
    }
    /**
     * This method gets the property checked of the node.
     * @returns a GenericResult struct
     */
    getChecked() {
        let isChecked = this.node.prop("checked");
        return new GenericResult_1.GenericResult(true, null, isChecked);
    }
}
exports["default"] = CheckBoxWebControlCoverageHandler;
//# sourceMappingURL=CheckBoxWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/DefaultWebCoverageHandler.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/DefaultWebCoverageHandler.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
class DefaultWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Default";
    }
    startRecording() {
        throw new Error("Method not implemented.");
    }
    get isNodeToBeAddedToRepository() {
        return false;
    }
    isRecordable() {
        return false;
    }
    isCapturable() {
        return false;
    }
    isListenable() {
        return false;
    }
    areChildrenRecordable() {
        return true;
    }
    areChildrenCapturable() {
        return true;
    }
}
exports["default"] = DefaultWebControlCoverageHandler;
//# sourceMappingURL=DefaultWebCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/DivWebControlCoverageHandler.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/DivWebControlCoverageHandler.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
/**
 * Coverage handler for a div element
 */
class DivWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Div";
        //  /**
        //  * This method creates a selector from this coverage handler to childDomNode
        //  * @param childDomNode
        //  * @param useExistingSelector
        //  * @returns a selector
        //  */
        // public createSelectorToChild(childDomNode : HTMLElement, useExistingSelector : boolean) : string {
        //     // Get our JQuery path from this element to the given child node
        //     let partialSelector : string = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        //     // As we will find ourselves, this partial selector is enough
        //     return partialSelector;
        // }
    }
    startRecording() {
        throw new Error("Method not implemented.");
    }
    get isNodeToBeAddedToRepository() {
        return false;
    }
    areChildrenCapturable() {
        return true;
    }
    areChildrenRecordable() {
        return true;
    }
    isRecordable() {
        return false;
    }
    isCapturable() {
        return false;
    }
}
exports["default"] = DivWebControlCoverageHandler;
//# sourceMappingURL=DivWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/FormWebControlCoverageHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/FormWebControlCoverageHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
/**
 * Coverage handler for a form
 */
class FormWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Form";
        // /**
        //  * Create a selector from this coverage handler to childDomNode
        //  * @param childDomNode
        //  * @param useExistingSelector
        //  * @returns a selector
        //  */
        // public createSelectorToChild(childDomNode : HTMLElement, useExistingSelector : boolean) : string {
        //     // Get our JQuery path from this element to the given child node
        //     let partialSelector : string = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        //     // As we will find ourselves, this partial selector is enough
        //     return partialSelector;
        // }
    }
    startRecording() {
        throw new Error("Method not implemented.");
    }
    isRecordable() {
        return false;
    }
    isCapturable() {
        return false;
    }
    isListenable() {
        return false;
    }
    areChildrenCapturable() {
        return true;
    }
    areChildrenRecordable() {
        return true;
    }
}
exports["default"] = FormWebControlCoverageHandler;
//# sourceMappingURL=FormWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/FrameWebControlCoverageHandler.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/FrameWebControlCoverageHandler.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebControlCoverageHandler_1 = __webpack_require__(/*! ./WebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebControlCoverageHandler.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const LogicalAction_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/LogicalAction */ "./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js");
const $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const ChromePlatformDriver_1 = __webpack_require__(/*! ../../PlatformDrivers/ChromePlatformDriver */ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/ChromePlatformDriver.js");
const Constants_1 = __webpack_require__(/*! ../../Model/Constants */ "./node_modules/@jacada-jbot/web/include/Model/Constants.js");
const RepositoryHandler_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/RepositoryHandler */ "./node_modules/@jacada-jbot/base/include/Model/RepositoryHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("FrameWebControlCoverageHandler");
/**
 * Coverage handler for a iframe
 */
class FrameWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    /**
     *
     */
    constructor(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) {
        super(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            log.info(`Frame received: ${request.message}`);
            log.debug(`Request is: ${JSON.stringify(request)}`);
            if (request.message === "startListening") {
                this.registerForFrameListenedBelow();
                this.registerForFrameTriggeredBelow();
            }
        });
    }
    async execLastNodeOnScreenAsync(elementPath, lAction, validateOnly) {
        // If we reach the last one (the one needs actions on) go and execute. Otherwise, go deeper.
        // We are the element needed to execute on.
        // Lets get the element.
        let result = this.getNodeOnScreen();
        if (!result.success)
            return new GenericResult_1.GenericResult(false, `Could not find element ${elementPath._elementPathId}`, Constants_1.BaseConstants.ELEMENT_NOT_FOUND_EXCEPTION);
        // Need to execute on the element itself. We are also the coverage handler that knows the control
        let currentNode = result.data.accessResult;
        //save current node on its coverage handler
        this.setNode(currentNode);
        // Go deeper on the path: Continue to next node
        return this.execNextNodeOnScreenAsync(elementPath, lAction, validateOnly);
    }
    setNode(node) {
        log.trace(`Inside setNode`);
        this.domNode = node;
        this.$currentNode = $(node);
        this.guid = this.$currentNode.attr(Constants_1.Constants.ATTR_FRAME_GUID);
        this.$currentNode.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY, this.$currentNode.getUniqueId());
    }
    /**
     * This method performs an action on element, In iFrame, we need to dig deep into the child's frame itself and let it run.
     * We will need to wait for this result.
     * Before that, we need to get ourselves, like we are the last.
     * @param elementPath path of DOM element in the repository
     * @param executionLogicalAction action to perform on DOM element
     * @param validateOnly if true do not perform action just validate that element is exists otherwise perform  executionLogicalAction
     * @returns a GenericResult struct
     */
    async execNextNodeOnScreenAsync(elementPath, executionLogicalAction, validateOnly) {
        if (!this.guid) {
            return this.returnFailure(FrameWebControlCoverageHandler.FRAME_NOT_SYNC_MESSAGE);
        }
        // Need to get the part of pathId from here down.
        let restOfPathId = elementPath.restPathId();
        return new Promise((resolve, reject) => {
            this.registerEvent(ChromePlatformDriver_1.default.FRAME_EXEC_NODE_ON_SCREEN_COMPLETED_MESSAGE, (event) => {
                const uniqueId = this.$currentNode.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
                this.$currentNode.offNative(ChromePlatformDriver_1.default.FRAME_EXEC_NODE_ON_SCREEN_COMPLETED_MESSAGE, uniqueId);
                var data = event.detail;
                log.debug(`Completed execution. Data is:${JSON.stringify(data)}`);
                // A frame below us finished execution, We now need to return the result
                let frameGuidCompleted = data.frameGuid;
                // Handle only if it's for current instance
                if (frameGuidCompleted === this.guid) {
                    resolve(data.result);
                }
                else {
                    log.trace(`Received an execution result from frame (${frameGuidCompleted}) which is not the same as current instance of frame (${this.guid})`);
                    let gResult = new GenericResult_1.GenericResult(false, "Frame completed by the incorrect frame control coverage", null);
                    reject(gResult);
                }
            });
            // Send message
            // Tell Platform Driver to execute action on the frame
            this.platformDriver.execNextNodeOnScreenOnFrame(this.guid, restOfPathId, executionLogicalAction, validateOnly);
        });
    }
    /**
     * Call ```PlatformDriver``` to perform start listening element on frame
     * @param elementPath path to element we are going to listen
     * @param attributes attribute of element we are going to listen
     * @returns a GenericResult struct
     */
    listenLastNodeOnScreen(elementPath, listeningElement) {
        const result = this.getNodeOnScreen();
        let currentNode;
        //TODO:Error handling for listening
        if (result.success) {
            currentNode = result.data.accessResult;
        }
        //save current node on its coverage handler
        this.setNode(currentNode);
        // Need to get the part of pathId from here down.
        let restOfPathId = elementPath.restPathId();
        if (!this.guid) {
            return this.returnFailure(FrameWebControlCoverageHandler.FRAME_NOT_SYNC_MESSAGE);
        }
        // Ask platform driver to start listening on the frame
        let listeningInfo = { path: restOfPathId, attributes: listeningElement.attributes, triggers: listeningElement.triggers };
        this.platformDriver.startListeningOnFrame(this.guid, listeningInfo);
        return this.returnSuccess(false);
    }
    /**
     * This method registers an event for triggers that will be fired from iFrame's contents
     */
    registerForFrameTriggeredBelow() {
        this.registerEvent(ChromePlatformDriver_1.default.FRAME_TRIGGER_FIRED_MESSAGE, (event) => {
            const data = event.detail;
            log.trace(`Continue to build trigger path. Data is:${JSON.stringify(data)}`);
            // We need to concatenate the paths of what we have now with the one of the iFrame
            const pathId = data.pathId;
            const fullPathId = this.repositoryHandler.mergePaths(this.repositoryHandler.pathId, pathId);
            this.reportTriggerFired(fullPathId, data.trigger);
        });
    }
    /**
     * This method registers an event for listening element that will be fired from iFrame's contents
     */
    registerForFrameListenedBelow() {
        this.registerEvent(ChromePlatformDriver_1.default.FRAME_LISTENED_ELEMENT_MESSAGE, (event) => {
            const data = event.detail;
            log.trace(`Continue to build listening path. Data is:${JSON.stringify(data)}`);
            // We need to concatenate the paths of what we have now with the one of the iFrame
            const pathId = data.pathId;
            const fullPathId = this.repositoryHandler.mergePaths(this.repositoryHandler.pathId, pathId);
            this.platformDriver.reportChangedElement(fullPathId, data.attribute, data.newValue);
        });
    }
    performStartRecording() {
        if (!this.guid) {
            return this.returnFailure(FrameWebControlCoverageHandler.FRAME_NOT_SYNC_MESSAGE);
        }
        // Registering for message on recording on element in the frame below
        this.registerEvent(ChromePlatformDriver_1.default.FRAME_RECORDED_ELEMENT_MESSAGE, this.frameRecordedBelow.bind(this));
        this.registerEvent(ChromePlatformDriver_1.default.FRAME_TREE_CHANGED_MESSAGE, this.treeChangedBelow.bind(this));
        // Ask platform driver to start recording on the frame
        this.platformDriver.startRecordingOnFrame(this.guid);
        return this.returnSuccess();
    }
    /**
     * This method executes capture on the iFrame's contents elements.
     * @returns false if this iFrame not known to JBot otherwise true
     */
    performStartCapturing() {
        if (!this.guid) {
            return this.returnFailure(FrameWebControlCoverageHandler.FRAME_NOT_SYNC_MESSAGE);
        }
        this.registerControlForHighlight(this, this.$currentNode, (event) => {
            this.executeStartCapturingClicked(event);
        });
        // Registering for message on capture on element in the frame below
        this.registerEvent(ChromePlatformDriver_1.default.FRAME_CAPTURED_ELEMENT_MESSAGE, this.frameCapturedBelow.bind(this));
        this.registerEvent(ChromePlatformDriver_1.default.FRAME_CAPTURED_TABLE_MESSAGE, this.frameCapturedTableBelow.bind(this));
        this.registerEvent(ChromePlatformDriver_1.default.FRAME_TREE_CHANGED_MESSAGE, this.treeChangedBelow.bind(this));
        // Ask platform driver to start capture on the frame
        this.platformDriver.startCaptureOnFrame(this.guid);
        return this.returnSuccess();
    }
    createElementRepositoryNode() {
        let repositoryNode = {
            children: [],
            config: {},
            type: FrameWebControlCoverageHandler.type,
        };
        repositoryNode.config.fields = [];
        if (this.$currentNode.attr("id")) {
            // By default the name is the id
            repositoryNode.id = this.cleanId(this.$currentNode.attr("id"));
            repositoryNode.name = this.getName(repositoryNode);
        }
        else {
            repositoryNode.id = Constants_1.BaseConstants.AUTO_GENERATE_ID_PREFIX; // Will be updated once attached to base
            repositoryNode.name = this.getName(repositoryNode);
        }
        const field = { selector: this.createRepositoryNodeSelector(this.domNode) };
        repositoryNode.config.fields.push(field);
        return repositoryNode;
    }
    getName(repositoryNode) {
        if (repositoryNode.id) {
            return repositoryNode.id;
        }
        else {
            return FrameWebControlCoverageHandler.type;
        }
    }
    getAutoGeneratedIdPrefix() {
        return FrameWebControlCoverageHandler.type;
    }
    /**
     * Register event by event name on element DOM node
     * @param $elem element DOM node
     * @param eventName such as click , change etc.
     * @param func event handler
     * @returns
     */
    registerEvent(eventName, func) {
        const uniqueId = this.$currentNode.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        // Registered already on this element. Let's check if it's for the same event
        if (this.$currentNode.hasNative(eventName, uniqueId)) {
            return;
        }
        this.$currentNode.onNative(eventName, uniqueId, func);
        this.$currentNode.attr(Constants_1.Constants.JBOT_REGISTERED_ATTR, "");
        log.trace(`Register event ${eventName} with id ${uniqueId}`);
    }
    /**
     * This method adds a unique id attribute to this iFrame, which let JBot know that this iFrame was already scanned.
     * @returns unique id
     */
    static synchIdToContent(node) {
        if (node.hasAttribute(Constants_1.Constants.ATTR_FRAME_GUID)) {
            return;
        }
        const guid = this.generateGuid();
        node.setAttribute(Constants_1.Constants.ATTR_FRAME_GUID, guid);
        log.debug(`Created guid:${guid}`);
    }
    static generateGuid() {
        // cSpell:disable
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
            //cSpell:enable
            var r = (Math.random() * 16) | 0, v = c == "x" ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    }
    /**
     * Event handler for element that been recorded in iFrame's content
     * @param event data of the recorded element
     * @returns
     */
    frameRecordedBelow(event) {
        var data = event.detail;
        log.trace(`Continue to build recording path. Data is:${JSON.stringify(data)}`);
        // A frame below us finished capturing, We now need to continue from the iFrame object with this id
        let frameGuidRecorded = data.frameGuid;
        // Handle only if it's for current instance
        if (frameGuidRecorded === this.guid) {
            this.validateAndMergeRepository();
            // We need to concatenate the paths of what we have now with the one of the iFrame
            let pathId = data.pathId;
            let lAction = LogicalAction_1.default.fromJSON(data.logicalAction);
            let fullPathId = this.repositoryHandler.mergePaths(this.repositoryHandler.pathId, pathId);
            //element width and height remain the same, just update values of left and top
            let elementCoordinates = this.CalculateElementCoordinates(data);
            this.platformDriver.reportRecordedStep(lAction, fullPathId, data.snapshot, elementCoordinates);
            return false; // Stop other events
        }
        else {
            log.trace(`Received a recorded element from frame (${frameGuidRecorded}) which is not the same as current instance of frame (${this.guid})`);
        }
    }
    /**
     * This method calculates the coordinates of the element inside the iFrame.
     * @param data
     * @returns an array holding the coordinates.
     */
    CalculateElementCoordinates(data) {
        let elementCoordinates = data.coordinates;
        let iframeCoordinates = this.getElementCoordinates();
        //update left
        elementCoordinates[0] = data.coordinates[0] + iframeCoordinates[0];
        //update top
        elementCoordinates[1] = data.coordinates[1] + iframeCoordinates[1];
        return elementCoordinates;
    }
    /**
     * Event handler for element that has been captured in iFrame's content
     * @param event data of which element has been captured
     * @returns
     */
    frameCapturedBelow(event) {
        const data = event.detail;
        log.debug(`Continue to build capture path. Data is:${JSON.stringify(data)}`);
        this.validateAndMergeRepository();
        // Inform platform driver about it.
        this.reportTreeChanged();
        // We need to concatenate the paths of what we have now with the one of the iFrame
        const pathId = data.pathId;
        const fullPathId = this.repositoryHandler.mergePaths(this.repositoryHandler.pathId, pathId);
        //element width and height remain the same, just update values of left and top
        const elementCoordinates = this.CalculateElementCoordinates(data);
        this.platformDriver.reportCapturedElement(fullPathId, data.snapshot, elementCoordinates);
    }
    /**
     * Event handler for table that been captured in iFrame's content
     */
    frameCapturedTableBelow(event) {
        const data = event.detail;
        log.debug(`Continue to build capture path. Data is:${JSON.stringify(data)}`);
        this.validateAndMergeRepository();
        // Inform platform driver about it.
        this.reportTreeChanged();
        // We need to concatenate the paths of what we have now with the one of the iFrame
        const pathId = data.pathId;
        const fullPathId = this.repositoryHandler.mergePaths(this.repositoryHandler.pathId, pathId);
        const fullFieldsPathIds = [];
        for (let index = 0; index < data.fieldsPathIds.length; index++) {
            const element = data.fieldsPathIds[index];
            fullFieldsPathIds.push(this.repositoryHandler.mergePaths(this.repositoryHandler.pathId, element));
        }
        //element width and height remain the same, just update values of left and top
        const elementCoordinates = this.CalculateElementCoordinates(data);
        this.platformDriver.reportCapturedTable(fullPathId, fullFieldsPathIds, data.snapshot, elementCoordinates);
    }
    treeChangedBelow(event) {
        var data = event.detail;
        log.trace(`iFrame continue to build capture path. Data is:${JSON.stringify(data)}`);
        this.validateAndMergeRepository();
        //We are override the application coverage handler on each change
        if (this.repositoryHandler.children.length > 0) {
            this.repositoryHandler.children[0] = data.applicationHandlerNode;
        }
        else {
            this.repositoryHandler.children.push(data.applicationHandlerNode);
        }
        // Inform platform driver about it.
        this.reportTreeChanged();
    }
    /**
     * Find all repository handlers of frame's type
     * @param repositoryHandler current repository handler
     * @param parentRepositoryHandler parent repository handler
     * @param matchedFrameRepositoryHandlers array of frame  repository handlers that matches
     */
    static findFrameRepositoryHandlers(repositoryHandler, parentRepositoryHandler, matchedFrameRepositoryHandlers) {
        if (repositoryHandler.type == FrameWebControlCoverageHandler.type) {
            const frameRepositoryHandler = new RepositoryHandler_1.default(repositoryHandler.repository, repositoryHandler.currentNode, parentRepositoryHandler);
            matchedFrameRepositoryHandlers.push(frameRepositoryHandler);
        }
        else {
            for (let child of repositoryHandler.children) {
                const childRepositoryHandler = new RepositoryHandler_1.default(repositoryHandler.repository, child, repositoryHandler);
                FrameWebControlCoverageHandler.findFrameRepositoryHandlers(childRepositoryHandler, repositoryHandler, matchedFrameRepositoryHandlers);
            }
        }
    }
    /**
     * Searches sub application in the repository
     * if exists sends a message to background with sub repository
     * otherwise the background will create it for us
     * @param applicationCoverageHandler
     */
    static searchSubApplicationsInRepository(applicationCoverageHandler) {
        const webFrameRepositoryHandlers = [];
        const matchedFrames = [];
        const screenCoverageHandler = applicationCoverageHandler.getDefaultScreenCoverageHandlerForCurrent();
        const screenId = screenCoverageHandler.uniqueId;
        const screenElement = applicationCoverageHandler.repositoryHandler.findElementByIdInCurrent(screenId);
        if (screenElement) {
            const screenRepositoryHandler = new RepositoryHandler_1.default(applicationCoverageHandler.repositoryHandler.repository, screenElement, applicationCoverageHandler.repositoryHandler);
            screenCoverageHandler.repositoryHandler = screenRepositoryHandler;
            FrameWebControlCoverageHandler.findFrameRepositoryHandlers(screenCoverageHandler.repositoryHandler, null, webFrameRepositoryHandlers);
            // checking if there is no children in case we are using empty repository
            for (let frameRepositoryHandler of webFrameRepositoryHandlers) {
                const frameOnScreen = this.findFrameOnScreenBySelector(frameRepositoryHandler, screenCoverageHandler.repositoryHandler.type);
                if (frameOnScreen.length == 0)
                    continue;
                matchedFrames.push(frameOnScreen[0]);
                //reminder:we added frame repository as a first children on tree changed in frame
                //see FrameWebControlCoverageHandler
                // Notify the frame about it so we can sync
                const subRepository = frameRepositoryHandler.children[0];
                this.registerFrame(frameOnScreen[0], subRepository);
            }
        }
        const unmatchedFrames = $("iframe,frame").filter((_index, frame) => {
            return !matchedFrames.includes(frame);
        });
        unmatchedFrames.each((_index, iFrame) => {
            //frame doesn't exist in repository send post message without repository
            //that will create an empty repository if its application matched
            this.registerFrame(iFrame);
        });
    }
    /**
     * Send message to inner frame in order to register
     * @param frame The frame to send message to
     * @param subRepository in case sub-application exists pass it other wise we pass null
     */
    static registerFrame(frame, subRepository) {
        const guid = frame.getAttribute(Constants_1.Constants.ATTR_FRAME_GUID);
        log.debug(`Frame: Notify frame on guid:${guid}`);
        frame.contentWindow.postMessage({
            message: "registerFrame",
            frameGuid: guid,
            repository: subRepository,
        }, "*");
    }
    /**
     * This method build a selector from frame repository handlers and goes up until screen repository handler
     * Once we have a selector we are evaluate it and returns what it was found
     * @param frameRepositoryHandler a frame repository handlers
     * @param screenType the type of screen in the repository
     * @returns the result of the evaluation of the selector
     */
    static findFrameOnScreenBySelector(frameRepositoryHandler, screenType) {
        let currentNode = frameRepositoryHandler;
        let frameSelector = currentNode.config.fields[0].selector;
        while (currentNode.type != screenType) {
            currentNode = currentNode.parentHandler;
            const selectorWithChildren = currentNode.config.fields[0].selector.concat(".children");
            frameSelector = selectorWithChildren.concat(frameSelector);
        }
        const frameOnScreen = eval(frameSelector);
        return frameOnScreen;
    }
}
exports["default"] = FrameWebControlCoverageHandler;
FrameWebControlCoverageHandler.FRAME_NOT_SYNC_MESSAGE = "This frame is not synced yet";
FrameWebControlCoverageHandler.type = "Frame";
//# sourceMappingURL=FrameWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/ImageButtonWebControlCoverageHandler.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/ImageButtonWebControlCoverageHandler.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const ButtonWebControlCoverageHandler_1 = __webpack_require__(/*! ./ButtonWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/ButtonWebControlCoverageHandler.js");
class ImageButtonWebControlCoverageHandler extends ButtonWebControlCoverageHandler_1.default {
    constructor() {
        super(...arguments);
        this.type = "ImageButton";
    }
    updateElementRepositoryNode(elementNode) {
        elementNode.buttonType = "imagebutton";
        if (this.node[0].hasAttribute("src")) {
            elementNode.url = this.node[0].getAttribute('src');
        }
        return elementNode;
    }
}
exports["default"] = ImageButtonWebControlCoverageHandler;
//# sourceMappingURL=ImageButtonWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/LabelWebControlCoverageHandler.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/LabelWebControlCoverageHandler.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
/**
 * Coverage handler for a label
 * Label is an interesting control - It is always part of another control and connected to it either through 'for' or as its parent
 */
class LabelWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Label";
        // /**
        //  * This method creates a selector from this coverage handler to childDomNode
        //  * @param childDomNode
        //  * @param useExistingSelector
        //  * @returns a selector
        //  */
        // public createSelectorToChild(childDomNode : HTMLElement, useExistingSelector : boolean) : string {
        //     // Get our JQuery path from this element to the given child node
        //     let partialSelector : string = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        //     // As we will find ourselves, this partial selector is enough
        //     return partialSelector;
        // }
    }
    startRecording() {
        throw new Error("Method not implemented.");
    }
    areChildrenCapturable() {
        return true;
    }
    areChildrenRecordable() {
        return true;
    }
    isCapturable() {
        return false;
    }
    isRecordable() {
        return false;
    }
    isListenable() {
        return false;
    }
    updateElementRepositoryNode(elementNode) {
        const contentsText = this.getContentsText();
        //If we have content text use it otherwise leave it with value that came from web control
        if (contentsText.length > 0) {
            elementNode.name = `${this.type}_${contentsText}`;
        }
        elementNode.id = this.getId();
    }
    /**
     * This method gets our text as name for the control we label for.
     */
    getNameForPointed() {
        // Getting our text as name for the control we label for.
        // Try to see if we have text. If not, go to parent
        const contentsText = this.getContentsText();
        if (contentsText.length > 0)
            return contentsText;
        return "";
    }
    getContentsText() {
        return this.node
            .contents()
            .filter(function () {
            return this.nodeType === Node.TEXT_NODE;
        })
            .text();
    }
    getId() {
        const id = this.getContentsText();
        if (id.length > 0) {
            return id;
        }
        return this.type;
    }
}
exports["default"] = LabelWebControlCoverageHandler;
//# sourceMappingURL=LabelWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/LinkWebControlCoverageHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/LinkWebControlCoverageHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const EventDetails_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/EventDetails */ "./node_modules/@jacada-jbot/base/include/Model/EventDetails.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const LogicalAction_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/LogicalAction */ "./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("LinkWebControlCoverageHandler");
/**
 * Coverage handler for a link element
 */
class LinkWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Link";
    }
    startRecording() {
        this.recordOverlayClickedEvent((event) => {
            log.debug(`URL: ${window.location.href}`);
            const lAction = new LogicalAction_1.default(this.click.name, "");
            return lAction;
        }, (event) => {
            this.click();
        });
        return true;
    }
    subscribeToClickedEvent() {
        this.listenToEvent("click", (event) => {
            return new EventDetails_1.default("clicked");
        });
    }
    /**
     * This method fires a click event on the jquery object
     * @returns a GenericResult struct
     */
    click() {
        this.node[0].click();
        return new GenericResult_1.GenericResult(true, null, null);
    }
    updateElementRepositoryNode(elementNode) {
        elementNode.name = this.getName();
    }
    getName() {
        const walker = document.createTreeWalker(this.node[0], NodeFilter.SHOW_TEXT);
        const nodesText = [];
        while (walker.nextNode()) {
            nodesText.push(walker.currentNode.textContent.trim());
        }
        // Join all texts with a space between them
        return nodesText.join(" ");
    }
}
exports["default"] = LinkWebControlCoverageHandler;
//# sourceMappingURL=LinkWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/RadioButtonWebControlCoverageHandler.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/RadioButtonWebControlCoverageHandler.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const EventDetails_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/EventDetails */ "./node_modules/@jacada-jbot/base/include/Model/EventDetails.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const LogicalAction_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/LogicalAction */ "./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("RadioButtonWebControlCoverageHandler");
/**
 * Coverage handler for a radio button
 */
class RadioButtonWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "RadioButton";
    }
    startRecording() {
        this.recordEvent("change", (event) => {
            let lAction = new LogicalAction_1.default(this.setChecked.name, event.target.checked);
            return lAction;
        });
        return true;
    }
    subscribeToCheckedChanged() {
        this.listenToEvent("change", (event) => {
            return new EventDetails_1.default("checkedChanged", event.target.checked);
        });
    }
    /**
     *  This method sets the radioButton  by dispatching change event on the node
     * @param isChecked if true the check-box will be checked otherwise unchecked
     * @returns a GenericResult struct
     */
    setChecked(isChecked) {
        log.debug(`Set radio button value to ${isChecked}`);
        this.node.prop("checked", isChecked);
        this.node[0].dispatchEvent(new Event("change"));
        return new GenericResult_1.GenericResult(true, null, null);
    }
    /**
     * This method gets the property checked of the node.
     * @returns a GenericResult struct
     */
    getChecked() {
        let isChecked = this.node.prop("checked");
        log.debug(`Get radio button value to ${isChecked}`);
        return new GenericResult_1.GenericResult(true, null, isChecked);
    }
    updateElementRepositoryNode(elementNode) {
        const domNode = this.node[0];
        if (domNode.hasAttribute("name")) {
            elementNode.groupName = domNode.getAttribute("name");
        }
        if (domNode.hasAttribute("value")) {
            let rbValue = domNode.getAttribute("value");
            elementNode.selectedValue = rbValue;
            elementNode.name = domNode.hasAttribute("name") ? `${domNode.getAttribute("name")}_${rbValue}` : rbValue;
        }
    }
}
exports["default"] = RadioButtonWebControlCoverageHandler;
//# sourceMappingURL=RadioButtonWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/SelectWebControlCoverageHandler.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/SelectWebControlCoverageHandler.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

Object.defineProperty(exports, "__esModule", ({ value: true }));
const EventDetails_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/EventDetails */ "./node_modules/@jacada-jbot/base/include/Model/EventDetails.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const LogicalAction_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/LogicalAction */ "./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("SelectWebControlCoverageHandler");
/**
 * Coverage handler for a select
 */
class SelectWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Select";
    }
    startRecording() {
        this.recordEvent("change", (event) => {
            // Notify action in recording
            const selectedOptions = event.target.selectedOptions;
            const lAction = new LogicalAction_1.default(this.setSelectedItem.name, selectedOptions && selectedOptions.length > 0 ? selectedOptions[0].text : null);
            return lAction;
        });
        return true;
    }
    subscribeToSelectionChanged() {
        this.listenToEvent("change", (event) => {
            const selectedOptions = event.target.selectedOptions;
            return new EventDetails_1.default("selectionChanged", selectedOptions && selectedOptions.length > 0 ? selectedOptions[0].text : null);
        });
    }
    /**
     * This method sets the selected item with the given value by first using filter function to find the item, then sets the property selected
     * and in the end, dispatching change event on the node.
     * @param item - the item to select
     * @returns a GenericResult struct
     */
    setSelectedItem(item) {
        this.node
            .find("option")
            .filter(function () {
            //may want to use $.trim in here
            return $(this).text() == item;
        })
            .prop("selected", true);
        this.node[0].dispatchEvent(new Event("change"));
        return new GenericResult_1.GenericResult(true, null, item);
    }
    /**
     * This method gets the property selectedIndex of the node.
     * @returns a GenericResult struct
     */
    getSelectedIndex() {
        let index = this.node.prop("selectedIndex");
        return new GenericResult_1.GenericResult(true, null, index);
    }
    getItems() {
        const items = this.node.prop("options");
        var values = $.map(items, function (option) {
            return option.text;
        });
        return new GenericResult_1.GenericResult(true, null, values);
    }
    /**
     * This method sets the property selectedIndex with the given index.
     * @param index - the index number to set
     * @returns a GenericResult struct
     */
    setSelectedIndex(index) {
        this.node.prop("selectedIndex", index);
        return new GenericResult_1.GenericResult(true, null, null);
    }
    /**
     * This method gets the value of the node.
     * @returns a GenericResult struct
     */
    getSelectedItem() {
        let item = this.node.find("option:selected").text();
        return new GenericResult_1.GenericResult(true, null, item);
    }
}
exports["default"] = SelectWebControlCoverageHandler;
//# sourceMappingURL=SelectWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableBodyCellWebControlCoverageHandler.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableBodyCellWebControlCoverageHandler.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const TableCellWebControlCoverageHandler_1 = __webpack_require__(/*! ./TableCellWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableCellWebControlCoverageHandler.js");
const Constants_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const Operations_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/Operations */ "./node_modules/@jacada-jbot/base/include/Model/Operations.js");
const log = Log4jConfig_1.logFactory.getLogger("TableBodyCellWebControlCoverageHandler");
class TableBodyCellWebControlCoverageHandler extends TableCellWebControlCoverageHandler_1.default {
    constructor() {
        super(...arguments);
        this.type = "TableBodyCell";
    }
    /**
     * This method executes the requested get actions on fields inside the table cell
     * @param elementPath - the path to the element
     * @param attrs - attributes to get value
     * @returns The requested attributes values inside GenericResult data
     */
    executeGetOnCell(elementPath, attrs) {
        log.trace(`Inside executeGetOnCell`);
        let responseData = {};
        let result = this.createControlCoverageHandler(elementPath);
        // If the element does not exist in the cell - no need to return other attributes values
        if (!result.success) {
            return this.returnSuccess({ exists: false });
        }
        const controlCoverageHandler = result.data;
        Object.keys(attrs).forEach((action) => {
            let actionKey = attrs[action];
            log.debug(`Getting value for attribute name: ${actionKey}`);
            //running the action
            if (controlCoverageHandler.customCoverageHandler[action]) {
                result = controlCoverageHandler.customCoverageHandler[action].apply(controlCoverageHandler.customCoverageHandler);
                if (!result.success)
                    return new GenericResult_1.GenericResult(false, `There was an error during execution ${action} on element ${elementPath._elementPathId}`, Constants_1.Constants.GENERIC_EXCEPTION);
                let attrValue = result.data;
                responseData[actionKey] = attrValue;
            }
            else {
                log.error(`Control coverage handler ${controlCoverageHandler.repositoryHandler.name} does not implement action ${action}`);
                return new GenericResult_1.GenericResult(false, `Invalid action ${action} on element ${elementPath._elementPathId}`, Constants_1.Constants.TYPE_MISMATCH_EXCEPTION);
            }
        });
        return this.returnSuccess(responseData);
    }
    /**
     * This method executes the requested set action on fields inside the table cell
     * @param {ElementPath} elementPath - the path to the element
     * @param {FieldsSetData} field - the data for setting the new value
     * @return {*}  {GenericResult}
     * @memberof TableBodyCellWebControlCoverageHandler
     */
    executeSetOnCell(elementPath, field) {
        log.trace("Inside executeSetOnCell");
        let result = this.createControlCoverageHandler(elementPath);
        if (!result.success)
            return result;
        const controlCoverageHandler = result.data;
        if (controlCoverageHandler.customCoverageHandler[field.setter]) {
            result = controlCoverageHandler.customCoverageHandler[field.setter].apply(controlCoverageHandler.customCoverageHandler, [field.value]);
            if (!result.success)
                return new GenericResult_1.GenericResult(false, `There was an error during execution ${field.setter} on element ${elementPath._elementPathId}`, Constants_1.Constants.GENERIC_EXCEPTION);
        }
        return this.returnSuccess();
    }
    /**
     * This method creates the control coverage handler inside the cell
     * @private
     * @param {ElementPath} elementPath - the path to the control
     * @return {*}  {GenericResult} the created control coverage handler inside GenericResult data
     */
    createControlCoverageHandler(elementPath) {
        let result = this.getCoverageHandlerByNextPath(elementPath);
        while (!elementPath.isLast()) {
            result = result.data.coverageHandler.getCoverageHandlerByNextPath(elementPath);
            if (!result.success)
                return result;
        }
        if (!result.success)
            return result;
        const controlCoverageHandler = result.data.coverageHandler;
        if (!controlCoverageHandler.customCoverageHandler.node.length) {
            return new GenericResult_1.GenericResult(false, `Could not find element ${elementPath._elementPathId}`, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        }
        return this.returnSuccess(controlCoverageHandler);
    }
    /**
     * This method compares the given field value with the value in the criteria according to the operation required
     * @param {ElementPath} elementPath
     * @param {CriteriaData} criteria
     * @return {*}  {boolean} true if the value answers the criteria, false otherwise
     * @memberof TableBodyCellWebControlCoverageHandler
     */
    checkFieldData(elementPath, criteria) {
        log.trace("Inside checkFieldData");
        let attributes = [];
        attributes[criteria.getter] = criteria.getter;
        const result = this.executeGetOnCell(elementPath, attributes);
        if (!result.success)
            return false;
        switch (criteria.operation) {
            case Operations_1.Operations.EQUALS:
                if (result.data[criteria.getter] === criteria.value) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.NOT_EQUALS:
                if (result.data[criteria.getter] !== criteria.value) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.CONTAINS:
                if (result.data[criteria.getter].includes(criteria.value)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.NOT_CONTAIN:
                if (!result.data[criteria.getter].includes(criteria.value)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.START_WITH:
                if (result.data[criteria.getter].startsWith(criteria.value, 0)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.NOT_START_WITH:
                if (!result.data[criteria.getter].startsWith(criteria.value, 0)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.END_WITH:
                if (result.data[criteria.getter].endsWith(criteria.value)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.NOT_END_WITH:
                if (!result.data[criteria.getter].endsWith(criteria.value)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.IS_EMPTY:
                if (result.data[criteria.getter] === "") {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.IS_NOT_EMPTY:
                if (result.data[criteria.getter] !== "") {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
        }
        log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} doesn't match the field`);
        return false;
    }
    /**
     * This function needs to be override because it is always added to repository
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns
     */
    addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode, childCoverageHandler) {
        return this.addChildRepositoryNodeToOurselves(childRepositoryNode, childCoverageHandler);
    }
}
exports["default"] = TableBodyCellWebControlCoverageHandler;
//# sourceMappingURL=TableBodyCellWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableCellWebControlCoverageHandler.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableCellWebControlCoverageHandler.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebControlCoverageHandler_1 = __webpack_require__(/*! ./WebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebControlCoverageHandler.js");
const TableRowWebControlCoverageHandler_1 = __webpack_require__(/*! ./TableRowWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableRowWebControlCoverageHandler.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const Constants_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
const log = Log4jConfig_1.logFactory.getLogger("TableCellWebControlCoverageHandler");
class TableCellWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    constructor() {
        super(...arguments);
        this.type = "WebTableCellControl";
    }
    /**
     * This method creates a selector from this coverage handler to childDomNode
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        let partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // As we will find ourselves, this partial selector is enough
        return partialSelector;
    }
    createElementRepositoryNode() {
        let elementNode = this.createBasicElementRepositoryNode();
        elementNode.type = this.type;
        const selectorField = elementNode.config.fields[0];
        selectorField.selector = this.createSelectorFromParentToChild(this.domNode.parentElement, this.domNode); // We need table cells' selector to be itself only, without concatenating its' parents
        this.standardizeRepositoryNodeFields(elementNode);
        elementNode.config.nodeName = this.domNode.nodeName;
        let span = 1;
        let scope;
        if (this.domNode.hasAttribute("scope")) {
            scope = this.domNode.getAttribute("scope");
        }
        if (this.domNode.hasAttribute("span")) {
            span = parseInt(this.domNode.getAttribute("span"));
        }
        else if (this.domNode.hasAttribute("colspan")) {
            span = parseInt(this.domNode.getAttribute("colspan"));
            scope = "col";
        }
        else if (this.domNode.hasAttribute("rowspan")) {
            span = parseInt(this.domNode.getAttribute("rowspan"));
            scope = "row";
        }
        elementNode.config.span = span;
        if (scope)
            elementNode.scope = scope;
        // Try getting name from the column header (if exists) <tableid>/columnname/elementId
        if (this.parentCoverageHandler instanceof TableRowWebControlCoverageHandler_1.default) {
            let tableRowCoverageHandler = this.parentCoverageHandler;
            let columnNumber = tableRowCoverageHandler.findColumnNumber(this.domNode);
            if (columnNumber >= 0) {
                elementNode.config.columnNumber = columnNumber;
                let columnName = tableRowCoverageHandler.getColumnName(columnNumber);
                if (columnName && columnName.length > 0) {
                    elementNode.name = columnName;
                    // If we have name, lets update the id as with name it will be much better to read for the user
                    let id = this.cleanId(columnName);
                    elementNode.id = this.findFreeId(id);
                }
            }
        }
        return elementNode;
    }
    getName(repositoryNode) {
        if (this.$currentNode[0].hasAttribute && this.$currentNode[0].hasAttribute("name")) {
            return this.$currentNode.attr("name");
        }
        let name = this.ownText(this.$currentNode);
        if (name.length > 0)
            return name;
        // If we have label attached, take it.
        name = this.getNameFromLabel();
        if (name.length > 0)
            return name;
        // Try to retrieve the name of an element by looking for text of the parent. This is the default. Might be different in other elements
        name = this.getNameFromParent();
        if (name.length > 0)
            return name;
        // Before giving up, try to take the id if it's already given (notice that we check explicity for Constants.AUTO_GENERATE_ID_PREFIX and not startsWith)
        if (repositoryNode.id && repositoryNode.id.length > 0 && repositoryNode.id !== Constants_1.Constants.AUTO_GENERATE_ID_PREFIX)
            return repositoryNode.id;
        return this.nodeNoName();
    }
    getParentNode() {
        return this.$currentNode.parent();
    }
    getAutoGeneratedIdPrefix() {
        return this.type;
    }
}
exports["default"] = TableCellWebControlCoverageHandler;
//# sourceMappingURL=TableCellWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableHeaderWebControlCoverageHandler.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableHeaderWebControlCoverageHandler.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebControlCoverageHandler_1 = __webpack_require__(/*! ./WebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebControlCoverageHandler.js");
class TableHeaderWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    canAccessDirectly() {
        // Depends on the parent (table)...
        return this.parentCoverageHandler.canAccessDirectly();
    }
    /**
     * This method creates a selector from this coverage handler to childDomNode
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        let partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // As we will find ourselves, this partial selector is enough
        return partialSelector;
    }
    getColumnName(columnNumber) {
        // Loop until we reach the element which covers this column
        let lastElement = null;
        let ourColumnNumber = 0;
        this.walkOnChildren(this.domNode, function (node) {
            let span = 1;
            if (ourColumnNumber > columnNumber) {
                return false; // Stop looping
            }
            else {
                if (node.hasAttribute("span")) {
                    span = parseInt(node.getAttribute("span"));
                }
                else if (node.hasAttribute("colspan")) {
                    span = parseInt(node.getAttribute("colspan"));
                }
                ourColumnNumber += span;
                // Saving this column as the last one that matched
                lastElement = node;
                // Continue indication
                return true;
            }
        });
        // This can happen if there are no columns?
        if (lastElement === null)
            return null;
        // lastElement now contains the element with the text. Let's get it's content
        return this.getColumnElementText(lastElement);
    }
    // public getColumnIndex(columnName : string) : number {
    //     // Loop until we reach the element which covers this column
    //     let result : number = -1;
    //     let ourColumnNumber : number = 0;
    //     let self = this;
    //     this.walkOnChildren(this.domNode, function (node : HTMLElement) {
    //         if (self.getColumnElementText(node) === columnName){
    //             result = ourColumnNumber;
    //             return false;       // Stop the loop
    //         }
    //         let span : number = 1 ;
    //         if (node.nodeType !== 3 && node.hasAttribute('span')){
    //             span = parseInt(node.getAttribute('span'));
    //         } else if (node.nodeType !== 3 && node.hasAttribute('colspan')){
    //             span = parseInt(node.getAttribute('colspan'));
    //         }
    //         ourColumnNumber += span;
    //         return true; // continue the loop
    //     }, true)​;
    //     return result;
    // }
    getColumnElementText(nodeElement) {
        return this.customCoverageHandler.getColumnName(nodeElement);
    }
}
exports["default"] = TableHeaderWebControlCoverageHandler;
//# sourceMappingURL=TableHeaderWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableRowWebControlCoverageHandler.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableRowWebControlCoverageHandler.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebControlCoverageHandler_1 = __webpack_require__(/*! ./WebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebControlCoverageHandler.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const TableBodyCellWebControlCoverageHandler_1 = __webpack_require__(/*! ./TableBodyCellWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableBodyCellWebControlCoverageHandler.js");
const ElementPath_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/ElementPath */ "./node_modules/@jacada-jbot/base/include/Model/ElementPath.js");
const Constants_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const WebCustomTableControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomTableControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomTableControlCoverageHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("TableRowWebControlCoverageHandler");
class TableRowWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    /**
     * This method executes the requested get actions on fields inside a table row
     * @param fields the data containing the pathId and attributes
     * @returns a GenericResult struct with the required data inside the Data (of the GenericResult)
     */
    executeGetOnRow(fields) {
        log.trace(`Inside executeGetOnRow`);
        let dataResponse = {};
        for (let i = 0; i < fields.length; i++) {
            const field = fields[i];
            log.debug(`Getting data for element with path: ${field.path}`);
            const elementPath = new ElementPath_1.default(field.path);
            let result = this.createCellCoverageHandler(elementPath);
            // cell does not exist
            if (!result.success) {
                dataResponse[field.key] = { exists: false };
            }
            else {
                const cellCoverageHandler = result.data;
                result = cellCoverageHandler.executeGetOnCell(elementPath, field.attributes);
                if (!result.success)
                    return result;
                dataResponse[field.key] = result.data;
            }
        }
        return this.returnSuccess(dataResponse);
    }
    /**
     * This method executes the requested set actions on fields inside a table row
     * @param {FieldsSetData[]} fields - holds the data to set on each cell
     * @return {*}  {GenericResult}
     * @memberof TableRowWebControlCoverageHandler
     */
    executeSetOnRow(fields) {
        log.trace(`Inside executeSetOnRow`);
        for (let i = 0; i < fields.length; i++) {
            const field = fields[i];
            log.debug(`Setting data for element with path: ${field.path}`);
            const elementPath = new ElementPath_1.default(field.path);
            let result = this.createCellCoverageHandler(elementPath);
            if (!result.success)
                return result;
            let cellCoverageHandler = result.data;
            result = cellCoverageHandler.executeSetOnCell(elementPath, field);
            if (!result.success)
                return result;
        }
        return this.returnSuccess();
    }
    /**
     * This method creates the cell coverage handler inside the row
     * @private
     * @param {ElementPath} elementPath - the path to the cell
     * @return {*}  {GenericResult} the created cell coverage handler inside GenericResult data
     */
    createCellCoverageHandler(elementPath) {
        const result = this.getNextPathRepository(elementPath);
        if (!result.success)
            return new GenericResult_1.GenericResult(false, `Could not find element ${elementPath._elementPathId} in repository`, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        const elementRepositoryHandler = result.data.repositoryHandler;
        const cellCoverageHandler = (this.factory.createCoverageHandlerByType(this.platformDriver, elementRepositoryHandler, this.applicationData, this, this.factory, elementRepositoryHandler.type, this.applicationCoverageHandler));
        const cellNode = cellCoverageHandler.getNode(this.$currentNode);
        if (!cellNode.success)
            return new GenericResult_1.GenericResult(false, `Could not find element ${elementPath._elementPathId}`, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        cellCoverageHandler.setNode(cellNode.data.accessResult);
        return this.returnSuccess(cellCoverageHandler);
    }
    /**
     * This method gets a criteria and checks if this row meets the criteria
     * @param {CriteriaData} criteria
     * @return {*}  {GenericResult} a GenericResult struct with value true in the data if the row meets the criteria, false otherwise
     * @memberof TableRowWebControlCoverageHandler
     */
    checkRowCriteria(criteria) {
        log.trace("Inside checkRowCriteria");
        const elementPath = new ElementPath_1.default(criteria.path);
        const result = this.getNextPathRepository(elementPath);
        if (!result.success)
            return result;
        const elementRepositoryHandler = result.data.repositoryHandler;
        const cellCoverageHandler = (this.factory.createCoverageHandlerByType(this.platformDriver, elementRepositoryHandler, this.applicationData, this, this.factory, elementRepositoryHandler.type, this.applicationCoverageHandler));
        const cellNode = cellCoverageHandler.getNode(this.$currentNode);
        if (!cellNode.success)
            return new GenericResult_1.GenericResult(false, `Could not find element ${elementPath._elementPathId}`, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        cellCoverageHandler.setNode(cellNode.data.accessResult);
        if (!cellCoverageHandler.checkFieldData(elementPath, criteria))
            return this.returnSuccess(false);
        else
            return this.returnSuccess(true);
    }
    /**
     * Walking on each table data and find fields and add their path into fieldsPathIds
     * @param fieldsPathIds
     * @returns
     */
    collectFieldsPathIds(fieldsPathIds) {
        // Currently we support only one body row on single selection
        const tableCoverageHandler = this.parentCoverageHandler;
        if (tableCoverageHandler.customCoverageHandler.tableType === WebCustomTableControlCoverageHandler_1.default.TABLE_TYPE_SINGLE_SELECTION) {
            this.walkOnChildren(this.domNode, (tableDataNode) => {
                const cellNode = tableCoverageHandler.customCoverageHandler.getCell(tableDataNode);
                const tableDataCoverageHandler = new TableBodyCellWebControlCoverageHandler_1.default(this.platformDriver, null, this.applicationData, this, this.factory, this.applicationCoverageHandler);
                tableDataCoverageHandler.setNode(cellNode);
                tableDataCoverageHandler.collectFieldsPathIds(fieldsPathIds);
                this.setFieldName(tableDataNode, tableDataCoverageHandler);
                return true;
            });
        }
        else {
            //TODO: Handle grid
            // for (let i = 0; i < $trs.length; i++) {
            //     this.performStartCapturingOnBody(i, $trs[i]);
            // }
        }
        return false;
    }
    setFieldName(tableDataNode, tableDataCoverageHandler) {
        if (!tableDataCoverageHandler.repositoryHandler)
            return;
        const columnNumber = this.findColumnNumber(tableDataNode);
        const columnName = this.getColumnName(columnNumber);
        const numberOfFields = tableDataCoverageHandler.repositoryHandler.children.length;
        const fieldName = this.customCoverageHandler.getFieldName(columnName, columnNumber);
        if (numberOfFields === 1) {
            tableDataCoverageHandler.repositoryHandler.children[0].name = fieldName;
        }
        else {
            for (let index = 0; index < numberOfFields; index++) {
                const child = tableDataCoverageHandler.repositoryHandler.children[index];
                if (child.name === this.nodeNoName()) {
                    child.name = `${fieldName}_${child.id}`;
                }
                else {
                    child.name = `${fieldName}_${child.name}`;
                }
            }
        }
    }
    // protected getNodeOnScreen() : GenericResult {
    //     // If we can find ourself without relative to the previous result, great. If not,
    //     // ask our parent to get itself.
    //     // As a body, we are part of the table which is always our parent
    //     // Get the body row
    //     let tableCoverageHandler: TableWebControlCoverageHandler = (<TableWebControlCoverageHandler>this.parentCoverageHandler);
    //     let result: GenericResult = tableCoverageHandler.getSelectedBodyRowOnScreen();
    //     if (!result.success) {
    //         return result;      // We failed to access parents path
    //     }
    //     return result;
    // }
    /**
     * This method creates a selector from this coverage handler to childDomNode
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        let partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // As we will find ourselves, this partial selector is enough
        return partialSelector;
    }
    findColumnNumber(elementDomNode) {
        // Find the index of the element in the list
        let columnNumber = 0;
        this.walkOnChildren(this.domNode, function (node) {
            let span = 1;
            if (node === elementDomNode) {
                return false; // Stop looping
            }
            else {
                if (node.hasAttribute("span")) {
                    span = parseInt(node.getAttribute("span"));
                }
                else if (node.hasAttribute("colspan")) {
                    span = parseInt(node.getAttribute("colspan"));
                }
                columnNumber += span;
                // Continue indication
                return true;
            }
        });
        return columnNumber;
    }
    getColumnName(columnNumber) {
        // We need to go up for the table to execute it.
        let tableCoverageHandler = this.parentCoverageHandler;
        return tableCoverageHandler.getColumnName(columnNumber);
    }
    /**
     * This method decide if to add this control coverage into repository
     * @returns false by default
     */
    isNodeToBeAddedToRepository() {
        return false;
    }
    /**
     * This function needs to be override because this CH is not added to repository, so we only have to continue to parent
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns
     */
    addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode, childCoverageHandler) {
        return this.parentCoverageHandler.addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode, childCoverageHandler);
    }
    canAccessDirectly() {
        return true;
    }
    getNode() {
        log.trace(`Inside getNode`);
        return this.returnSuccess({ accessResult: this.$currentNode });
    }
}
exports["default"] = TableRowWebControlCoverageHandler;
//# sourceMappingURL=TableRowWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableWebControlCoverageHandler.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableWebControlCoverageHandler.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebControlCoverageHandler_1 = __webpack_require__(/*! ./WebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebControlCoverageHandler.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
const TableHeaderWebControlCoverageHandler_1 = __webpack_require__(/*! ./TableHeaderWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableHeaderWebControlCoverageHandler.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const TableRowWebControlCoverageHandler_1 = __webpack_require__(/*! ./TableRowWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableRowWebControlCoverageHandler.js");
const TableDataResponse_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/TableDataResponse */ "./node_modules/@jacada-jbot/base/include/Model/TableDataResponse.js");
const WebCustomTableControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomTableControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomTableControlCoverageHandler.js");
const Constants_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
const log = Log4jConfig_1.logFactory.getLogger("TableWebControlCoverageHandler");
/*
 * This is a basic table. There are 2 types of tables in Web: One which displays same kind of data row after row and there are tables which are just used as grid.
 * For a grid, we are like a container.
 * For rows Table:
 *  It has columns where all the rows have the same columns structure. Columns might have titles.
 *  Accessing a row is through a 'selected row' which can be acquired using multiple methods
 *
 */
class TableWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    constructor() {
        super(...arguments);
        this.currentRow = 0;
        this.type = "Table";
        // private getColumnIndex(columnName: string): number {
        //     // Ask the children which is the TableHeader for that (if exists)
        //     if (!this.headerCoverageHandler) return null;
        //     return this.headerCoverageHandler.getColumnIndex(columnName);
        // }
    }
    /**
     * This method gets a list of rows and fields, and returns the corresponding data from the table.
     * @param tableData - the data to get from the table, of type TableDataGetter
     * @returns a GenericResult struct with the required data inside the Data (of the GenericResult)
     */
    getTableDataByRange(tableData) {
        log.trace("Inside getTableDataByRange");
        this.makeRelativePaths(tableData); //TODO: temporary, need to send relative on capture
        this.numberOfTRInBodyRow = this.getNumberOfRows();
        // In case the range is bigger than the number of rows, we want to loop only on the number of existing rows
        const endLoop = tableData.rows.range.to > this.numberOfTRInBodyRow ? this.numberOfTRInBodyRow : tableData.rows.range.to;
        const result = this.walkOnRows(tableData.rows.range.from - 1, endLoop, (row) => {
            return row.executeGetOnRow(tableData.fields);
        });
        return result;
    }
    /**
     * This method gets a list of rows and fields, and returns the corresponding data from the table.
     * @param tableData - the data to get from the table, of type TableDataGetter
     * @returns a GenericResult struct with the required data inside the Data (of the GenericResult)
     */
    getTableDataByField(tableData) {
        log.trace("Inside getTableDataByField");
        tableData.rows.criteria.path = this.makeSingleRelativePath(tableData.rows.criteria.path);
        this.makeRelativePaths(tableData); //TODO: temporary, need to send relative on capture
        this.numberOfTRInBodyRow = this.getNumberOfRows();
        const result = this.walkOnRows(0, this.numberOfTRInBodyRow, (row) => {
            const result = row.checkRowCriteria(tableData.rows.criteria);
            if (result.success && result.data) {
                return row.executeGetOnRow(tableData.fields);
            }
            return result;
        });
        return result;
    }
    /**
     * This method gets a list of rows and fields, and sets the corresponding data on the table.
     * @param {TableDataSetter[]} tableData - the data to set on the table, of type TableDataSetter
     * @return {*}  {GenericResult}
     * @memberof TableWebControlCoverageHandler
     */
    setTableData(tableData) {
        log.trace("Inside setTableData");
        let result;
        for (let i = 0; i < tableData.length; i++) {
            this.makeRelativePaths(tableData[i]); //TODO: temporary, need to send relative on capture
            const rowId = +tableData[i].rowId;
            result = this.walkOnRows(rowId, rowId + 1, (row) => {
                return row.executeSetOnRow(tableData[i].fields);
            });
            if (!result.success)
                return result;
        }
        return result;
    }
    walkOnRows(start, end, func) {
        let dataResponse = [];
        for (let i = start; i < end; i++) {
            this.currentRow = i;
            log.debug(`Getting data for row number: ${this.currentRow}`);
            let result = this.getSelectedBodyRowOnScreen();
            if (!result.success)
                return result;
            const rowNode = result.data.accessResult;
            this.createTableRowCoverageHandler(rowNode);
            result = func(this.rowCoverageHandler);
            if (!result.success)
                return result;
            if (result.data) {
                dataResponse.push(new TableDataResponse_1.default(this.currentRow, result.data));
            }
        }
        return this.returnSuccess(dataResponse);
    }
    /**
     * @temp
     * This method gets tableData which holds absolute paths inside, and turns it into relative paths to the table.
     * @param tableData - the data to change
     */
    makeRelativePaths(tableData) {
        let self = this;
        tableData.fields.forEach((element) => {
            element.path = self.makeSingleRelativePath(element.path);
        });
    }
    makeSingleRelativePath(path) {
        let index = path.indexOf(`${this.repositoryHandler.pathId}/`);
        let length = this.repositoryHandler.pathId.length + index + 1;
        path = path.substring(length);
        return path;
    }
    /**
     * This method gets the number of all rows in the table.
     * @private
     * @return {*}  {number} the number of rows
     * @memberof TableWebControlCoverageHandler
     */
    getNumberOfRows() {
        const rows = this.customCoverageHandler.getTableRows();
        if (!rows)
            return 0;
        return rows.length;
    }
    /**
     * This method gets the node of the current selected row
     * @returns the node of the row
     */
    getSelectedBodyRowOnScreen() {
        log.trace(`In getSelectedBodyRowOnScreen`);
        // Get the selected row
        // Before that, we need to get ourselves.
        if (!this.$currentNode) {
            const result = this.getNodeOnScreen();
            if (!result.success)
                return result; // Cannot get the current node on the screen
        }
        // Getting ourselves as object.
        this.domNode = this.$currentNode[0];
        // We now need to get the rows below the body
        const $trs = this.customCoverageHandler.getTableRows();
        if ($trs.length === 0) {
            return this.returnFailure("No rows in the table");
        }
        if (this.currentRow >= $trs.length) {
            return this.returnFailure("Selected row is out of bound");
        }
        // Return the row
        return this.returnSuccess({ accessResult: $trs.eq(this.currentRow) });
    }
    // private getCurrentLineIndex(): GenericResult {
    //     return this.returnSuccess(this.getSelectedLineIndex(this.repositoryHandler.pathId));
    // }
    // private getSelectedLineIndex(pathId: string): number {
    //     // Should be in memory
    //     let selectedIndex: number = this.applicationData.getScreenTopicData(pathId, this.SELECTED_LINE_INDEX_KEY);
    //     if (!selectedIndex) {
    //         selectedIndex = 0;
    //     }
    //     return selectedIndex;
    // }
    // private setCurrentLineIndex(lineIndex: number): GenericResult {
    //     let nRows = this.getTableNumberOfRows(this.$currentNode);
    //     if (lineIndex < 0 || lineIndex >= nRows) {
    //         return this.returnFailure("Index out of bound");
    //     }
    //     this.setSelectedLineIndex(this.repositoryHandler.pathId, lineIndex);
    //     return this.returnSuccess(false);
    // }
    // private setCurrentLineIndexAsFirst(): GenericResult {
    //     let nRows = this.getTableNumberOfRows(this.$currentNode);
    //     if (nRows == 0) {
    //         return this.returnFailure("Index out of bound");
    //     }
    //     this.setSelectedLineIndex(this.repositoryHandler.pathId, 0);
    //     return this.returnSuccess(false);
    // }
    // private setCurrentLineIndexAsLast(): GenericResult {
    //     let nRows = this.getTableNumberOfRows(this.$currentNode);
    //     if (nRows == 0) {
    //         return this.returnFailure("Index out of bound");
    //     }
    //     this.setSelectedLineIndex(this.repositoryHandler.pathId, nRows - 1);
    //     return this.returnSuccess(false);
    // }
    // private setSelectedLineIndex(pathId: string, lineIndex: number) {
    //     // Set in memory
    //     this.applicationData.setScreenTopicData(pathId, this.SELECTED_LINE_INDEX_KEY, lineIndex);
    // }
    // private getNumberOfRows(): GenericResult {
    //     return this.returnSuccess(this.getTableNumberOfRows(this.$currentNode));
    // }
    // private getTableNumberOfRows($currentNode: JQuery): number {
    //     // We not need to get the rows below the body
    //     let $trs: JQuery = this.getTableRows($currentNode);
    //     return $trs.length;
    // }
    // public executeStartRecordingOnNode(): boolean {
    //     // No user event on table ?
    //     return true;
    // }
    // public performStartRecording(): GenericResult {
    //     if (!this.rowsCoverageHandler) {
    //         this.rowsCoverageHandler = [];
    //     }
    //     this.currentRow = 0;
    //     return super.performStartRecording();
    // }
    // public performStartRecordingOnNode(node: HTMLElement): boolean {
    //     let self = this;
    //     // We can have a few options node: caption, colgroup, thead, tbody, tr, tfoot. Lets handle manually each one of them
    //     let nodeType: string = this.getCoverageHandlerFactory().nodeToNodeType(node).toLowerCase();
    //     if (nodeType === 'thead') {
    //         // Currently we support only one header line
    //         let $trs = $(node).children("tr");
    //         if ($trs.length > 0) {
    //             this.performStartRecordingOnHeaders($trs[0]);
    //         }
    //     } else if (nodeType === 'tbody') {
    //         // Currently we support only one body line for regular table
    //         let $trs = $(node).children("tr");
    //         for (let i = 0; i < $trs.length; i++) {
    //             this.performStartRecordingOnBody(i, $trs[i]);
    //         }
    //     } else if (nodeType === 'tr') {
    //         // In case we already have header and body, just ignore it
    //         if (this.getTableType() === TableWebControlCoverageHandler.TABLE_TYPE_SINGLE_SELECTION && this.numberOfHeaderLines > 0 && this.numberOfTRInBodyLine > 0) return true;
    //         // If there are no tds (only th), and we have no header, it can be a header line
    //         if ($(node).children("th").length > 0 && $(node).children("td").length === 0) {
    //             // Header line. If we already have headers, ignore it. Otherwise go for it.
    //             if (this.getTableType() === TableWebControlCoverageHandler.TABLE_TYPE_SINGLE_SELECTION && this.numberOfHeaderLines > 0) return true;
    //             this.performStartRecordingOnHeaders(node);
    //         } else {
    //             // Body line. We only process the first
    //             if (this.getTableType() === TableWebControlCoverageHandler.TABLE_TYPE_SINGLE_SELECTION && this.numberOfTRInBodyLine > 0) return true;
    //             this.performStartRecordingOnBody(this.currentRow, node);
    //             this.currentRow++;
    //         }
    //     } else if (nodeType === 'tfoot') {
    //     }
    //     // Return code is important to continue the walking on childs
    //     return true;
    // }
    // private performStartRecordingOnHeaders(node: HTMLElement): boolean {
    //     this.numberOfHeaderLines = 1;
    //     // We will have 2 children: TableHeader and TableBody. We need to create the handlers for them if they don't exist
    //     if (!this.headerCoverageHandler) {
    //         let result: GenericResult = this.getCoverageHandlerForControl("TableHeader");
    //         if (!result.success) return false;
    //         this.headerCoverageHandler = result.data.coverageHandler;
    //     }
    //     this.headerCoverageHandler.domNode = node;
    //     // Let the coverage prepare for the recording
    //     this.headerCoverageHandler.performStartRecording();
    //     return true;
    // }
    // private performStartRecordingOnBody(index: number, node: HTMLElement): boolean {
    //     if (!this.numberOfHeaderLines) this.numberOfHeaderLines = 1;
    //     if (index >= this.rowsCoverageHandler.length) {
    //         // Add to the array
    //         let result: GenericResult = this.getCoverageHandlerForControl("WebTableRowControl");
    //         if (!result.success) return false;
    //         this.rowsCoverageHandler.push(result.data.coverageHandler);
    //     } else if (!this.rowsCoverageHandler[index]) {
    //         // Create in the array
    //         let result: GenericResult = this.getCoverageHandlerForControl("WebTableRowControl");
    //         if (!result.success) return false;
    //         this.rowsCoverageHandler[index] = result.data.coverageHandler;
    //     }
    //     this.rowsCoverageHandler[index].domNode = node;
    //     // Let the coverage prepare for the recording
    //     this.rowsCoverageHandler[index].performStartRecording();
    //     return true;
    // }
    performStartRecording() {
        if (this.customCoverageHandler.tableType === WebCustomTableControlCoverageHandler_1.default.TABLE_TYPE_GRID) {
            this.walkOnChildren(this.customCoverageHandler.node[0], (node) => {
                // in walkOnChildren we check that the function returns true otherwise, we don't continue to the next sibling
                return this.performStartRecordingOnNode(node);
            });
        }
        return this.returnSuccess();
    }
    performStartCapturing() {
        if (this.customCoverageHandler.tableType === WebCustomTableControlCoverageHandler_1.default.TABLE_TYPE_GRID) {
            this.walkOnChildren(this.customCoverageHandler.node[0], (node) => {
                return this.performStartCapturingOnNode(node);
            });
        }
        if (!this.customCoverageHandler.isCapturable()) {
            return this.returnSuccess();
        }
        this.fieldsPathIds = [];
        this.createTableHeaderAndRowCoverageHandlers();
        this.registerControlForHighlight(this, this.$currentNode, () => {
            //First, we save the previous repository in case the capture will fail, and we will be able to revert the repository
            // so it won't be corrupted.
            // Then we delete the repository in order to add it from scratch in case there was a change in the table.
            let previousRepository;
            if (!this.repositoryHandler) {
                if (this.applicationCoverageHandler.repositoryHandler) {
                    this.createRepositoryIfNotExists();
                }
            }
            previousRepository = this.repositoryHandler.currentNode;
            if (previousRepository) {
                this.repositoryHandler.parentHandler.removeNodeFromChildren(previousRepository);
            }
            this.repositoryHandler = null;
            try {
                this.rowCoverageHandler.collectFieldsPathIds(this.fieldsPathIds);
                this.validateAndMergeRepository();
                this.reportTreeChanged();
                try {
                    log.debug(`getElementCoordinates`);
                    const elementCoordinates = this.getElementCoordinates();
                    log.debug(`got element coordinates`);
                    log.debug(`createElementSnapshot`);
                    this.createElementSnapshot((snapshot) => {
                        log.debug(`element snapshot created`);
                        try {
                            this.reportCapturedTable(this.fieldsPathIds, snapshot, elementCoordinates);
                        }
                        catch (error) {
                            log.error(`Failed to report captured element`);
                            this.platformDriver.throwException(error, "ReportElementCapturedException");
                        }
                    });
                }
                catch (error) {
                    log.error("cannot create element snapshot");
                    try {
                        // Report JBot about the captured element
                        this.reportCapturedTable(this.fieldsPathIds);
                    }
                    catch (error) {
                        log.error(`Failed to report captured element`);
                        this.platformDriver.throwException(error, "ReportElementCapturedException");
                    }
                }
            }
            catch (error) {
                this.addOrUpdateRepositoryNodes(previousRepository);
                this.platformDriver.throwException(error, "ReportTreeChangedException");
            }
        });
        return this.returnSuccess();
    }
    /**
     * This method executes the action received
     * @param lAction - the action to execute
     * @returns a GenericResult struct
     */
    executingAction(lAction, elementPath) {
        const parsedValue = JSON.parse(lAction.values);
        if (this[lAction.actionName]) {
            return this[lAction.actionName].apply(this, parsedValue);
        }
        else if (this.customCoverageHandler[lAction.actionName]) {
            return this.customCoverageHandler[lAction.actionName].apply(this.customCoverageHandler, parsedValue);
        }
        log.error(`Control coverage handler ${this.repositoryHandler.name} does not implement action ${lAction.actionName}`);
        return new GenericResult_1.GenericResult(false, `Invalid action ${lAction.actionName} on element ${elementPath._elementPathId}`, Constants_1.Constants.TYPE_MISMATCH_EXCEPTION);
    }
    /**
     * This method will add the the given repository node to it's parent in the repository, or updates the existing one.
     * @private
     * @param {*} previousRepositoryNode
     * @memberof TableWebControlCoverageHandler
     */
    addOrUpdateRepositoryNodes(previousRepositoryNode) {
        if (!this.repositoryHandler) {
            this.AddToClosestParentInRepository(previousRepositoryNode);
        }
        else {
            this.repositoryHandler.parentHandler.removeNodeFromChildren(previousRepositoryNode);
            this.AddToClosestParentInRepository(previousRepositoryNode);
        }
    }
    /**
     * This method creates coverageHandler for the rows and header
     */
    createTableHeaderAndRowCoverageHandlers() {
        log.trace(`Inside createTableHeaderAndRowCoverageHandlers`);
        const $rows = this.customCoverageHandler.getTableRows();
        this.createTableRowCoverageHandler($rows[0]);
        const headerRow = this.customCoverageHandler.getTableHeader();
        this.createTableHeaderCoverageHandler(headerRow);
    }
    /**
     * This method gets a headerRow node a creates a coverage handler
     * @param headerRow
     */
    createTableHeaderCoverageHandler(headerRow) {
        log.trace(`Inside createTableHeader`);
        if (!this.headerCoverageHandler) {
            const headerCoverageHandler = new TableHeaderWebControlCoverageHandler_1.default(this.platformDriver, this.repositoryHandler, this.applicationData, this, this.factory, this.applicationCoverageHandler);
            this.headerCoverageHandler = headerCoverageHandler;
        }
        this.headerCoverageHandler.customCoverageHandler = this.customCoverageHandler;
        this.headerCoverageHandler.domNode = headerRow;
        this.headerCoverageHandler.$currentNode = $(headerRow);
    }
    /**
     * This method gets a node of the row, and creates a coverageHandler.
     * @param bodyRow - the node of the row
     */
    createTableRowCoverageHandler(bodyRow) {
        log.trace(`Inside createTableRowCoverageHandler`);
        const rowCoverageHandler = new TableRowWebControlCoverageHandler_1.default(this.platformDriver, this.repositoryHandler, this.applicationData, this, this.factory, this.applicationCoverageHandler);
        this.rowCoverageHandler = rowCoverageHandler;
        this.rowCoverageHandler.customCoverageHandler = this.customCoverageHandler;
        this.rowCoverageHandler.domNode = bodyRow;
        this.rowCoverageHandler.$currentNode = $(bodyRow);
        this.rowCoverageHandler.repositoryHandler = this.repositoryHandler;
    }
    walkOnChildren(parentNode, func) {
        this.numberOfColumns = 0;
        this.numberOfHeaderRows = 0;
        this.numberOfTRInBodyRow = 0;
        super.walkOnChildren(parentNode, func);
    }
    performCapturingOnChildren() {
        // Most of the logic is executed when running on the nodes
        return false;
    }
    /**
     * This method creates a selector from the nodes' parent to the node itself
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        const partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // As we will find ourselves, this partial selector is enough
        return partialSelector;
    }
    createElementRepositoryNode() {
        let repositoryNode = super.createElementRepositoryNode();
        repositoryNode.config.nodeName = this.domNode.nodeName;
        repositoryNode.tableType = this.customCoverageHandler.tableType;
        this.customCoverageHandler.updateElementRepositoryNode(repositoryNode);
        return repositoryNode;
    }
    getName(repositoryNode) {
        let $caption = this.customCoverageHandler.node.children("caption");
        if ($caption.length > 0) {
            let name = $caption.text();
            if (name.length > 0)
                return name;
        }
        return super.getName(repositoryNode);
    }
    getAutoGeneratedIdPrefix() {
        return this.customCoverageHandler.type;
    }
    getColumnName(columnNumber) {
        // Ask the children which is the TableHeader for that (if exists)
        if (!this.headerCoverageHandler)
            return null;
        return this.headerCoverageHandler.getColumnName(columnNumber);
    }
}
exports["default"] = TableWebControlCoverageHandler;
TableWebControlCoverageHandler.ACTION_SELECT_FIRST = "set_SelectedFirst";
TableWebControlCoverageHandler.ACTION_SELECT_LAST = "set_SelectedLast";
//# sourceMappingURL=TableWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TextAreaWebControlCoverageHandler.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TextAreaWebControlCoverageHandler.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const EventDetails_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/EventDetails */ "./node_modules/@jacada-jbot/base/include/Model/EventDetails.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const LogicalAction_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/LogicalAction */ "./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("TextAreaWebControlCoverageHandler");
/**
 * Coverage handler for a textarea
 */
class TextAreaWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "TextArea";
    }
    startRecording() {
        this.recordEvent("change", (event) => {
            let lAction = new LogicalAction_1.default(this.setText.name, event.target.value);
            return lAction;
        });
        return true;
    }
    subscribeToTextChanged() {
        this.listenToEvent("change", (event) => {
            return new EventDetails_1.default("textChanged", event.target.value);
        });
    }
    /**
     * This method gets the value of the node.
     * @returns a GenericResult struct
     */
    getText() {
        let text = this.node.val();
        return new GenericResult_1.GenericResult(true, null, text);
    }
    /**
     * This method sets the value with the given text by dispatching change event on the node.
     * @param text - the text to set
     * @returns a GenericResult struct
     */
    setText(text) {
        this.node.val(text);
        this.node[0].dispatchEvent(new Event("change"));
        return new GenericResult_1.GenericResult(true, null, text);
    }
}
exports["default"] = TextAreaWebControlCoverageHandler;
//# sourceMappingURL=TextAreaWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TextInputWebControlCoverageHandler.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TextInputWebControlCoverageHandler.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const EventDetails_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/EventDetails */ "./node_modules/@jacada-jbot/base/include/Model/EventDetails.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const LogicalAction_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/LogicalAction */ "./node_modules/@jacada-jbot/base/include/Model/LogicalAction.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("TextInputWebControlCoverageHandler");
/**
 * Coverage handler for a text input
 */
class TextInputWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "TextInput";
    }
    startRecording() {
        this.recordEvent("change", (event) => {
            // Notify action in recording
            let lAction = new LogicalAction_1.default(this.setText.name, event.target.value);
            return lAction;
        });
        return true;
    }
    subscribeToTextChanged() {
        this.listenToEvent("change", (event) => {
            return new EventDetails_1.default("textChanged", event.target.value);
        });
    }
    /**
     * This method gets the value of the node.
     * @returns a GenericResult struct
     */
    getText() {
        let text = this.node.val();
        return new GenericResult_1.GenericResult(true, null, text);
    }
    /**
     * This method sets the value with the given text by dispatching change event on the node.
     * @param text - the text to set
     * @returns a GenericResult struct
     */
    setText(text) {
        this.node.val(text);
        this.node[0].dispatchEvent(new Event("change"));
        return new GenericResult_1.GenericResult(true, null, text);
    }
    isRecordable() {
        return this.node[0].getAttribute("type") != "password";
    }
}
exports["default"] = TextInputWebControlCoverageHandler;
//# sourceMappingURL=TextInputWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TextOutputWebControlCoverageHandler.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TextOutputWebControlCoverageHandler.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const WebCustomControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("TextInputWebControlCoverageHandler");
/**
 * Coverage handler for a text output
 */
class TextOutputWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "TextOutput";
    }
    startRecording() {
        return true;
    }
    /**
     *
     * @returns text from text output
     */
    getText() {
        let text = this.node.text();
        return new GenericResult_1.GenericResult(true, null, text);
    }
    updateElementRepositoryNode(elementNode) {
        elementNode.name = this.node.text();
        elementNode.config.nodeName = this.node[0].nodeName;
        let selector = elementNode.config.fields[0]["selector"];
        elementNode.config.fields[0]["selector"] = selector.replace("('#text')", ".contents().filter(function(){return this.nodeType == Node.TEXT_NODE;})");
        return elementNode;
    }
    isRecordable() {
        return false;
    }
    isListenable() {
        return false;
    }
}
exports["default"] = TextOutputWebControlCoverageHandler;
//# sourceMappingURL=TextOutputWebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebApplicationCoverageHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebApplicationCoverageHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const ApplicationCoverageHandler_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/ApplicationCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ApplicationCoverageHandler.js");
const WebScreenCoverageHandler_1 = __webpack_require__(/*! ./WebScreenCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebScreenCoverageHandler.js");
const ElementPath_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/ElementPath */ "./node_modules/@jacada-jbot/base/include/Model/ElementPath.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const log = Log4jConfig_1.logFactory.getLogger("WebApplicationCoverageHandler");
/**
 * Coverage handler for a application
 */
class WebApplicationCoverageHandler extends ApplicationCoverageHandler_1.default {
    getDefaultScreenCoverageHandler(applicationCoverageHandler, screenRepositoryHandler) {
        return new WebScreenCoverageHandler_1.default(applicationCoverageHandler.platformDriver, screenRepositoryHandler, applicationCoverageHandler.applicationData, applicationCoverageHandler, applicationCoverageHandler.factory, this);
    }
    startListening() {
        this.startListeningOnScreen();
        super.startListening();
        return this.returnSuccess("");
    }
    /**
     * Starts listening on iFrames
     */
    startListeningOnFrame() {
        this.startListeningOnScreen();
    }
    /**
     * Start listening on specific element in iFrame
     * @param listeningInfo
     */
    startListeningOnFrameElement(listeningInfo) {
        let listeningElement = this.addListeningInfo(listeningInfo);
        this.startListeningOnElement(listeningElement);
    }
    startListeningOnScreen() {
        let result = this.getScreenCoverageHandlerForCurrent();
        if (!result.success)
            return;
        this.currentScreenCoverageHandler = result.data.coverageHandler;
        this.currentScreenCoverageHandler.startListening();
    }
    stopListening() {
        log.info('Stopping listening process');
        //Stops a listening process
        if (this.currentScreenCoverageHandler) {
            return this.currentScreenCoverageHandler.stopListening();
        }
        ;
        return this.returnSuccess("Stopped listening on application level only");
    }
    stopRecording() {
        log.info('Stopping recording process');
        // Stops a recording process
        if (this.currentScreenCoverageHandler)
            return this.currentScreenCoverageHandler.stopRecording();
        return this.returnSuccess("Stopped recording on application level only");
    }
    stopCapturing() {
        log.info('Stopping capturing process');
        // Stops a capturing process
        if (this.currentScreenCoverageHandler)
            return this.currentScreenCoverageHandler.stopCapturing();
        return this.returnSuccess("Stopped capturing on application level only");
    }
    /**
     * This method validates the element path - before execution
     * @param lElementPathId - the element path id
     * @param lAction - the action to execute
     * @returns a GenericResult
     */
    async validateElementPath(lElementPathId, lAction) {
        let elementPath = new ElementPath_1.default(lElementPathId);
        // TBD: Incase application doesn't exist, execute the lifecycle
        // The first element is 'us' (the application). 
        let applicationId = elementPath.next();
        if (applicationId === null)
            return this.returnFailure("Empty element path id");
        log.debug(`validateElementPath: applicationId is: ${applicationId}`);
        // If we are last, the application exists
        if (elementPath.isLast()) {
            return this.returnSuccess("Application exists");
        }
        else {
            // Second element is the screen. Get it and its repository
            let result = this.getNextPathRepository(elementPath);
            if (!result.success)
                return result;
            let screenRepositoryHandler = result.data.repositoryHandler;
            log.debug(`validateElementPath: screen repository handler id is ${screenRepositoryHandler.id} and path is ${screenRepositoryHandler.pathId}`);
            // get the screen coverage handler
            result = this.getElementCoverageHandler(screenRepositoryHandler, this, this.getDefaultScreenCoverageHandler.bind(this));
            if (!result.success)
                return result;
            let screenCoverageHandler = result.data.coverageHandler;
            // Check if screen and control exists
            return screenCoverageHandler.validateScreenAndControls(elementPath, lAction);
        }
    }
}
exports["default"] = WebApplicationCoverageHandler;
//# sourceMappingURL=WebApplicationCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebControlCoverageHandler.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebControlCoverageHandler.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const ControlCoverageHandler_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
const WebScreenCoverageHandler_1 = __webpack_require__(/*! ./WebScreenCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebScreenCoverageHandler.js");
const LabelWebControlCoverageHandler_1 = __webpack_require__(/*! ./LabelWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/LabelWebControlCoverageHandler.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const Constants_1 = __webpack_require__(/*! ../../Model/Constants */ "./node_modules/@jacada-jbot/web/include/Model/Constants.js");
const TypeGuards_1 = __webpack_require__(/*! ../../Utils/TypeGuards */ "./node_modules/@jacada-jbot/web/include/Utils/TypeGuards.js");
const log = Log4jConfig_1.logFactory.getLogger("WebControlCoverageHandler");
class WebControlCoverageHandler extends ControlCoverageHandler_1.default {
    constructor() {
        super(...arguments);
        /**
         * A name of value attribute (e.g. text for text input)
         *  */
        this.attributeValueName = "none";
        /**
         * JQuery element for this instance
         */
        this.$currentNode = null;
    }
    set domNode(node) {
        this._domNode = node;
    }
    get domNode() {
        return this._domNode;
    }
    executeAccessNodeWithSelector($previousResult) {
        // Previous result should be JQuery find result
        // Access the element using a selector
        let validationResult = this.validateRepositoryConfiguration();
        if (!validationResult.success)
            return validationResult;
        //after the validation we know the configuration is valid, and can use it.
        let selector = this.getSelectorFromRepository();
        if (!selector)
            return this.returnFailure("Selector was not found");
        let $elements;
        let selectionCmd = "";
        if ($previousResult) {
            if (this.repositoryHandler.config.nodeName === `#text`) {
                selectionCmd = `$previousResult${selector}`;
            }
            else {
                if (!selector.startsWith(`(`)) {
                    selector = `(${selector})`;
                }
                selectionCmd = `$previousResult.children${selector}`;
            }
            $elements = eval(selectionCmd);
        }
        else {
            selectionCmd = this.createJQuerySelectorCommand(selector);
            $elements = eval(selectionCmd);
        }
        if ($elements.length === 0) {
            return new GenericResult_1.GenericResult(false, `Selector ${selectionCmd} not found`, null);
        }
        return this.returnSuccess({ accessResult: $elements });
    }
    canAccessDirectly() {
        return this.canAccessDirectlyFromRepository(this.repositoryHandler);
    }
    canAccessDirectlyFromRepository(repositoryHandler) {
        let config = repositoryHandler.config;
        if (!config) {
            log.error("No config for JQuery control");
            return false;
        }
        let fields = config.fields;
        if (!fields) {
            log.error("No fields for JQuery config");
            return false;
        }
        if (fields.length === 0) {
            log.error("Empty fields for JQuery config");
            return false;
        }
        // By default we perform get on first field. Other controls can change it.
        let field = fields[0];
        let selector = field.selector;
        if (selector) {
            // We have a selector. It need to be marked as direct access.
            // TBD: Support manual _
            return typeof field.directAccess !== "undefined";
        }
        else {
            // id and name are direct access without parent
            if (field.id || field.name) {
                return true; // We can access directly
            }
            else {
                return false;
            }
        }
    }
    createRepositoryHandler() {
        // We create our element and ask parent to add it and give us back the repository handler.
        let repositoryNode = this.createElementRepositoryNode();
        if (!repositoryNode) {
            log.trace("createRepositoryHandler: Empty repository node created");
            return null;
        }
        log.trace(`createRepositoryHandler: repository node is: ${JSON.stringify(repositoryNode)}`);
        // Add ourselves under the parent repository
        return this.parentCoverageHandler.addChildRepositoryNodeToOurselvesRecursively(repositoryNode, this);
    }
    /**
     * Check if RepositoryHandler has a valid configuration field
     * @returns true if it has and it is not empty otherwise false
     */
    validateRepositoryConfiguration() {
        let config = this.repositoryHandler.config;
        if (!config)
            return this.returnFailure("No config for JQuery control");
        //
        // Config structure:
        // {
        //    fields: [
        //       {
        //          selector: '(".controlId")'
        //       }
        //    ]
        // }
        let fields = config.fields;
        if (!fields)
            return this.returnFailure("No fields for JQuery config");
        if (fields.length === 0)
            return this.returnFailure("Empty fields for JQuery config");
        return this.returnSuccess(config);
    }
    /**
     * This method gets the selector part from the field section in the repository
     * @returns selector if a selector exists otherwise false
     */
    getSelectorFromRepository() {
        // Getting our configuration. This is specific for JQuery.
        const config = this.repositoryHandler.config;
        const fields = config.fields;
        // By default we perform get on first field. Other controls can change it.
        const field = fields[0];
        return field.selector;
    }
    /**
     * This method sets the basic and common fields in the repository for each control
     * @returns
     */
    createBasicElementRepositoryNode() {
        let repositoryNode = super.createBasicElementRepositoryNode();
        repositoryNode.config.fields = []; // Web elements can have multiple fields.
        //In case domNode type is text ,domNode has attribute function does not exists
        if (this.domNode.hasAttribute && this.domNode.hasAttribute("id")) {
            // By default the name is the id
            repositoryNode.id = this.$currentNode.attr("id");
            repositoryNode.name = this.getName(repositoryNode);
        }
        else {
            repositoryNode.id = Constants_1.BaseConstants.AUTO_GENERATE_ID_PREFIX; // Will be updated once attached to base
            repositoryNode.name = this.getName(repositoryNode);
        }
        const field = { selector: this.createRepositoryNodeSelector(this.domNode) };
        repositoryNode.config.fields.push(field);
        return repositoryNode;
    }
    createElementRepositoryNode() {
        let repositoryNode = this.createBasicElementRepositoryNode();
        repositoryNode.type = this.customCoverageHandler.type;
        this.customCoverageHandler.updateElementRepositoryNode(repositoryNode);
        this.standardizeRepositoryNodeFields(repositoryNode);
        return repositoryNode;
    }
    /**
     * This method converts repository node fields into standard fields that acceptable for RPA
     * @param repositoryNode a repository node after it modified by coverage writer
     */
    standardizeRepositoryNodeFields(repositoryNode) {
        repositoryNode.name = this.cleanName(repositoryNode.name);
        repositoryNode.id = this.cleanId(repositoryNode.id);
    }
    /**
     * Create selector recursively, if parent of elementDomNode has an id use it
     * otherwise go to elementDomNode parent until body element
     * @remark This function might use name attribute of elementDomNode as unique id.
     * If your app contains multiple elements with same name attribute you should override this function
     * @param elementDomNode current DOM node
     * @returns
     */
    createRepositoryNodeSelector(elementDomNode) {
        // Node has no id or name.
        // Find a parent where we can anchor from.
        const parentDomNode = elementDomNode.parentElement;
        if (parentDomNode && elementDomNode.nodeName !== "BODY") {
            let partialSelector;
            // If has id, use it.
            if (elementDomNode.hasAttribute && elementDomNode.hasAttribute("id")) {
                const id = elementDomNode.getAttribute("id");
                partialSelector = `(\"#${id}\")`;
            }
            else {
                // Get our JQuery path from this element.
                partialSelector = this.createSelectorFromParentToChild(parentDomNode, elementDomNode);
            }
            let anchorSelector;
            if (this.parentCoverageHandler.customCoverageHandler && !this.parentCoverageHandler.customCoverageHandler.isNodeToBeAddedToRepository) {
                const parentCH = this.parentCoverageHandler;
                anchorSelector = parentCH.createRepositoryNodeSelector(parentCH.customCoverageHandler.node[0]);
            }
            else if (!this.parentCoverageHandler.isNodeToBeAddedToRepository) {
                // if the parent doesn't have a node in the repository, continue to build the path from the parent
                const parentCH = this.parentCoverageHandler;
                anchorSelector = parentCH.createRepositoryNodeSelector(parentCH.$currentNode[0]);
            }
            return this.concatenateSelectorParts(anchorSelector, partialSelector);
        }
    }
    /**
     * Create selector for a child
     * @param childDomNode A child we would like to create a selector
     * @param useExistingSelector If true take existing selector from repository handler otherwise go to parent
     * @returns
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        let partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // Get the path to ourselves
        let anchorSelector = this.createAnchorSelector(useExistingSelector);
        // concatenate ourself with the access to the child.
        return this.concatenateSelectorParts(anchorSelector, partialSelector);
    }
    /**
     * Create an anchor selector for control coverage that not override createSelectorToChild function
     * @param useExistingSelector if true use selector
     * @returns
     */
    createAnchorSelector(useExistingSelector) {
        // If we already have a selector, use it.
        if (useExistingSelector && this.repositoryHandler && this.repositoryHandler.config && this.repositoryHandler.config.selector) {
            return this.repositoryHandler.config.selector;
        }
        // If has id or name, it's anchor from there.
        if (this.domNode.hasAttribute("id")) {
            const id = this.domNode.getAttribute("id");
            return `(\"#${id}\")`;
        }
        else {
            // Otherwise, continue to build the path from the parent
            if (!(this.parentCoverageHandler instanceof ControlCoverageHandler_1.default)) {
                //TBD Exception
                return "Coverage handler is not control or screen!";
            }
            const parentCoverageHandler = this.parentCoverageHandler;
            return parentCoverageHandler.createSelectorToChild(this.domNode, useExistingSelector);
        }
    }
    concatenateSelectorParts(anchorSelector, partialSelector) {
        if (anchorSelector && anchorSelector.length > 0) {
            return `${anchorSelector}.children${partialSelector}`;
        }
        else {
            return partialSelector;
        }
    }
    /**
     * This method creates a selector command that finds the element node on parent element.
     * By default we do it by finding the element type and it's index. So, lets walk
     * @param parentDomNode parent of current DOM element
     * @param elementDomNode current DOM element
     * @returns the created selector
     */
    createSelectorFromParentToChild(parentDomNode, elementDomNode) {
        let nodeTagName = elementDomNode.nodeName;
        let indexInParent = 0;
        this.walkOnChildren(parentDomNode, function (node) {
            if (node === elementDomNode) {
                return false; // Stop looping
            }
            else {
                if (node.nodeName === nodeTagName) {
                    indexInParent++;
                }
                return true;
            }
        });
        // Return a JQuery selector based on the index
        return `('${nodeTagName}').eq(${indexInParent})`;
    }
    /**
     * Get a name for this control
     * @param $domNode
     * @param repositoryNode
     * @returns the name
     */
    getName(repositoryNode) {
        const node = this.customCoverageHandler.node;
        if (node[0].hasAttribute && node[0].hasAttribute("name")) {
            return node.attr("name");
        }
        let name = this.cleanName(this.ownText(node));
        if (name.length > 0)
            return name;
        // If we have label attached, take it.
        name = this.cleanName(this.getNameFromLabel());
        if (name.length > 0)
            return name;
        // Try to retrieve the name of an element by looking for text of the parent. This is the default. Might be different in other elements
        name = this.cleanName(this.getNameFromParent());
        if (name.length > 0)
            return name;
        // Before giving up, try to take the id if it's already given (notice that we check explicity for Constants.AUTO_GENERATE_ID_PREFIX and not startsWith)
        if (repositoryNode.id && repositoryNode.id.length > 0 && repositoryNode.id !== Constants_1.BaseConstants.AUTO_GENERATE_ID_PREFIX)
            return repositoryNode.id;
        return this.nodeNoName();
    }
    /**
     * Get name from a label current DOM node
     * @param $domNode current DOM node
     * @param repositoryNode
     * @returns the name
     */
    getNameFromLabel() {
        if (this.labelCoverageHandler) {
            let labelCoverageHandler = this.labelCoverageHandler;
            let name = labelCoverageHandler.getNameForPointed();
            return name;
        }
        else {
            return "";
        }
    }
    /**
     * Get name of parent DOM node
     * @param $domNode
     * @returns the name
     */
    getNameFromParent() {
        const $parent = this.getParentNode();
        if ($parent.length === 0)
            return "";
        const name = this.ownText($parent);
        if (name.length === 0)
            return "";
        return name;
    }
    getParentNode() {
        return this.customCoverageHandler.node.parent();
    }
    /**
     * This method returns a default value for the element in case we didn't find any name
     * @remark This function should be override
     * @returns
     */
    nodeNoName() {
        return "No Name";
    }
    /**
     * Add a $ sign as a prefix to selector
     * @param selector
     * @returns The selector with $ sign
     */
    createJQuerySelectorCommand(selector) {
        if (selector.startsWith("$"))
            return selector;
        selector = "$" + selector;
        return selector;
    }
    /**
     * Try to start listening on this coverage handler
     * @returns True if this coverage start listening successfully or coverage is not listenable, Otherwise false
     */
    performControlStartListening() {
        if (((0, TypeGuards_1.isControl)(this.customCoverageHandler) && this.customCoverageHandler.isListenable()) || (0, TypeGuards_1.isTable)(this.customCoverageHandler)) {
            let listeningElement = this.applicationCoverageHandler.getListeningElement(this.repositoryHandler.pathId);
            if (listeningElement) {
                if (!this.executeStartListening(listeningElement))
                    return false;
            }
        }
        return true;
    }
    /**
     * This function register controlCoverageHandler on highlight, meaning that only registered element will be highlighted
     * during capturing and once they been clicked the functionHandler will be invoked
     * @param controlCoverageHandler that will be register for highlight
     * @param $elem jquery DOM node object
     * @param functionHandler event handler
     */
    registerControlForHighlight(controlCoverageHandler, $elem, functionHandler) {
        // This control wants to handle capture. Should be handled by the screen
        if (this.parentCoverageHandler instanceof WebScreenCoverageHandler_1.default) {
            let parentCoverageHandler = this.parentCoverageHandler;
            parentCoverageHandler.registerControlForHighlight(controlCoverageHandler, $elem, functionHandler);
        }
        else {
            let parentCoverageHandler = this.parentCoverageHandler;
            parentCoverageHandler.registerControlForHighlight(controlCoverageHandler, $elem, functionHandler);
        }
    }
    /**
     * Get the text contents of element DOM node
     * @param $elem
     * @returns
     */
    ownText($elem) {
        if (!$elem)
            $elem = $(this.domNode);
        return $elem
            .contents()
            .filter(function () {
            return this.nodeType === Node.TEXT_NODE;
        })
            .text();
    }
    getElementCoordinates() {
        // Get the width and height of the element
        let width = Math.round(this.$currentNode.outerWidth());
        let height = Math.round(this.$currentNode.outerHeight());
        // Find the element position
        let offset = this.$currentNode.offset();
        // Get the containing document
        let ownerDocument = this.$currentNode.prop("ownerDocument");
        // Get the top and left of the element
        let top = Math.round(offset.top - ownerDocument.documentElement.scrollTop);
        let left = Math.round(offset.left - ownerDocument.documentElement.scrollLeft);
        return [left, top, width, height];
    }
    /**
     * Highlight element DOM node with red color before snapshot
     * @param $elem DOM node
     * @param show
     */
    highlightBeforeSnapshot($elem, show) {
        if (this.parentCoverageHandler instanceof WebScreenCoverageHandler_1.default) {
            let parentCoverageHandler = this.parentCoverageHandler;
            parentCoverageHandler.highlightForSnapshot($elem, show);
        }
        else {
            let parentCoverageHandler = this.parentCoverageHandler;
            parentCoverageHandler.highlightBeforeSnapshot($elem, show);
        }
    }
    /**
     * This method prepares the recorded step to be send to the platform: it merges the repository and reports the new tree,
     * it creates the snapshot of the element and reports the recorded step.
     * @param lAction - the action that was recorded
     */
    async executeRecordedStep(lAction) {
        try {
            // This element need to be saved
            // We need to make sure we have the path and the repository to support it
            // and merge what we found now with the repository
            this.validateAndMergeRepository();
            // Report JBot about the changes in the repository
            this.reportTreeChanged();
        }
        catch (error) {
            this.platformDriver.throwException(error, "ReportTreeChangedException");
        }
        let elementCoordinates;
        try {
            log.debug(`getElementCoordinates`);
            elementCoordinates = this.getElementCoordinates();
            log.debug(`got element coordinates`);
            log.debug(`createElementSnapshot`);
            await this.createElementSnapshot((snapshot) => {
                log.debug(`element snapshot created`);
                try {
                    // Report JBot about the recording step
                    this.reportRecordedStep(lAction, snapshot, elementCoordinates);
                }
                catch (error) {
                    this.platformDriver.throwException(error, "ReportRecordedStepException");
                }
            });
        }
        catch (error) {
            log.error("cannot create element snapshot");
            try {
                // Report JBot about the recording step
                this.reportRecordedStep(lAction);
            }
            catch (error) {
                this.platformDriver.throwException(error, "ReportRecordedStepException");
            }
        }
    }
    async createElementSnapshot(callback) {
        return new Promise((resolve, reject) => {
            log.debug(`createElementSnapshot in chrome`);
            log.debug(`highlighting red`);
            this.highlightBeforeSnapshot(this.$currentNode, true);
            log.debug(`highlighting red done`);
            this.platformDriver.createSnapshot((res) => {
                log.debug(`removing highlight`);
                this.highlightBeforeSnapshot(this.$currentNode, false);
                if (res && res.snapshot) {
                    log.debug(`snapshot created`);
                    let result = res.snapshot;
                    callback && callback(result);
                    resolve();
                }
                else {
                    reject("snapshot not created properly");
                }
            });
        });
    }
    getNode($previousResult) {
        log.trace(`Inside getNode`);
        return this.executeAccessNodeWithSelector($previousResult);
    }
    setNode(node) {
        log.trace(`Inside setNode`);
        this.domNode = node;
        this.$currentNode = $(node);
        if ((0, TypeGuards_1.isWebControl)(this.customCoverageHandler)) {
            this.customCoverageHandler.node = $(node);
        }
    }
    executeStartListening(listeningElement) {
        if (!super.executeStartListening(listeningElement))
            return false;
        if ((0, TypeGuards_1.isWebControl)(this.customCoverageHandler)) {
            this.customCoverageHandler.node.data("pathId", this.repositoryHandler.pathId);
        }
        listeningElement.attributes.forEach((attribute) => {
            // get attributes initial value
            const initialValueResult = this.customCoverageHandler[attribute.getter].apply(this.customCoverageHandler);
            if (initialValueResult.success) {
                this.reportInitialValue(initialValueResult.data, attribute.changeEventSubscriber.name);
            }
        });
        this.listeningTriggersMap.forEach((funcName) => {
            funcName.forEach((func) => {
                //start listening for attribute changes
                if ((0, TypeGuards_1.isControl)(this.customCoverageHandler)) {
                    this.customCoverageHandler[func].apply(this.customCoverageHandler);
                }
            });
        });
        return true;
    }
    performStartRecording() {
        if (this.customCoverageHandler instanceof LabelWebControlCoverageHandler_1.default) {
            this.applicationData.setScreenTopicData("Labels", Constants_1.Constants.PARENT_ID, this.customCoverageHandler);
        }
        if ((0, TypeGuards_1.isControl)(this.customCoverageHandler)) {
            const webCustom = this.customCoverageHandler;
            // Make the code per element that execute the start recording
            if (webCustom.isRecordable()) {
                this.fetchLabelIfExists();
                // Record it
                if (!webCustom.startRecording())
                    return this.returnFailure("Error in performStartRecording");
                // Make sure we have highlight around it
                this.registerControlForHighlight(this, this.$currentNode, null);
            }
            //This method records on children, if the performRecordingOnChildren returns true
            if (webCustom.areChildrenRecordable()) {
                this.walkOnChildren(this.domNode, (node) => {
                    // in walkOnChildren we check that the function returns true otherwise, we don't continue to the next sibling
                    return this.performStartRecordingOnNode(node);
                });
            }
            if (this.customCoverageHandler instanceof LabelWebControlCoverageHandler_1.default) {
                this.applicationData.deleteScreenTopicData("Labels", Constants_1.Constants.PARENT_ID);
            }
        }
        return this.returnSuccess("");
    }
    /**
     * This method starts the recording process on new element that were added to the screen by the
     * mutation observer.
     * @param nodesStack - an array of the new HTMLElement to start recording on
     * @returns a GenericResult struct
     */
    performStartRecordingOnNodesStack(nodesStack) {
        if ((0, TypeGuards_1.isControl)(this.customCoverageHandler)) {
            const webCustom = this.customCoverageHandler;
            // Make the code per element that execute the start recording
            if (webCustom.isRecordable()) {
                // Record it
                if (!webCustom.startRecording())
                    return this.returnFailure("Error in performStartRecording");
                // Make sure we have highlight around it
                this.registerControlForHighlight(this, this.$currentNode, null); // In recording, we do not register to event, just for capture highlight
            }
            if (webCustom.areChildrenRecordable()) {
                if (nodesStack.length === 0) {
                    return this.returnSuccess("");
                }
                let node = nodesStack.pop();
                this.performStartRecordingOnNodeAndStack(node, nodesStack);
            }
        }
        return this.returnSuccess("");
    }
    /**
     *  This method starts the listening process on new element that were added to the screen by the
     * mutation observer.
     * @param nodesStack - an array of the new HTMLElement to start recording on
     * @returns a GenericResult struct
     */
    performStartListeningOnNodesStack(nodesStack) {
        if (!this.performControlStartListening())
            return this.returnFailure("Error in performControlStartListening");
        // Make the code per element that execute the start recording
        if (nodesStack.length === 0) {
            return this.returnSuccess("");
        }
        let node = nodesStack.pop();
        this.performStartListeningOnNodeAndStack(node, nodesStack);
        return this.returnSuccess("");
    }
    /**
     * This method starts the process of capturing for this element and, in case the performCapturingOnChildren is true,
     * it also iterate on its children to start capturing on them also.
     * @returns
     */
    performStartCapturing() {
        if (this.customCoverageHandler instanceof LabelWebControlCoverageHandler_1.default) {
            this.applicationData.setScreenTopicData("Labels", Constants_1.Constants.PARENT_ID, this.customCoverageHandler);
        }
        if (this.customCoverageHandler.isCapturable()) {
            this.fetchLabelIfExists();
            // Make the code per element that execute the start capturing
            this.registerControlForHighlight(this, this.$currentNode, (event) => {
                this.executeStartCapturingClicked(event);
            });
        }
        if (this.customCoverageHandler.areChildrenCapturable()) {
            this.walkOnChildren(this.domNode, (node) => {
                return this.performStartCapturingOnNode(node);
            });
        }
        if (this.customCoverageHandler instanceof LabelWebControlCoverageHandler_1.default) {
            this.applicationData.deleteScreenTopicData("Labels", Constants_1.Constants.PARENT_ID);
        }
        return this.returnSuccess("");
    }
    walkOnChildren(parentNode, func, includeTextNodes = false) {
        if (!parentNode) {
            log.trace("walkOnChildren but no parentNode");
            return;
        }
        let node = parentNode.firstChild;
        if (!node) {
            log.trace(`No first child for ${parentNode.nodeName}`);
            return;
        }
        if (node)
            do {
                log.trace(`nodeType=${node.nodeType}`);
                if (node.nodeType === Node.ELEMENT_NODE || (includeTextNodes && node.nodeType === Node.TEXT_NODE && !this.checkForElementNodeSiblings(parentNode))) {
                    if (!func(node)) {
                        break;
                    }
                }
            } while ((node = node.nextSibling));
    }
    /**
     * This method checks if the TEXT_NODE element has ELEMENT_NODE siblings
     * @param parentNode
     * @returns true if it as ELEMENT_NODE siblings, false otherwise
     */
    checkForElementNodeSiblings(parentNode) {
        let node = parentNode.firstChild;
        let foundElementNode = false;
        if (node)
            do {
                if (node.nodeType === Node.ELEMENT_NODE) {
                    foundElementNode = true;
                    break;
                }
            } while ((node = node.nextSibling));
        if (foundElementNode)
            return true;
        return false;
    }
    performStartRecordingOnNode(node) {
        let controlCoverageHandler = this.getCoverageHandlerForNode(node);
        if (controlCoverageHandler) {
            // Let the coverage prepare for the recording
            controlCoverageHandler.performStartRecording();
        }
        // Return code is important to continue the walking on children
        return true;
    }
    /**
     * Search and retrieve from memory a coverage handler which was set for this node.
     * @param node - the node we looking to find coverage for. The coverage returned can be from any coverage handler class.
     */
    fetchCoverageHandlerFromNode(node) {
        const uniqueId = $(node).data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        if (!uniqueId) {
            return null;
        }
        return this.fetchCoverageHandlerFromUniqueId(uniqueId);
    }
    /**
     * This method gets a node and returns it's coverageHandler.
     * @param node - the node to get it's coverage handler
     * @returns the suitable coverageHandler.
     */
    getCoverageHandlerForNode(node) {
        let coverageHandler = this.fetchCoverageHandlerFromNode(node);
        if (coverageHandler) {
            return coverageHandler;
        }
        coverageHandler = this.getCoverageHandler(node);
        if (coverageHandler == null) {
            return null;
        }
        const uniqueId = $(node).data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        coverageHandler.saveCoverageHandlerForUniqueId(uniqueId);
        node.setAttribute(Constants_1.Constants.JBOT_COVERAGE_HANDLER_ATTR, "");
        return coverageHandler;
    }
    getCoverageHandler(node) {
        // Need to try get it from type and factory
        // Get the node type (web type)
        let result = this.getCoverageHandlerByNode(node);
        if (!result.success) {
            return null;
        }
        let coverageHandler = result.data.coverageHandler;
        // Set the DOM node for this coverage
        coverageHandler.setNode(node);
        return coverageHandler;
    }
    /**
     * This method gets a HTMLElement and HTMLElement array and starts the recording process on the
     * nodes in the array.
     * @param node -
     * @param nodesStack
     * @returns true
     */
    performStartRecordingOnNodeAndStack(node, nodesStack) {
        // Prepare node for recording. Need to find the coverage handler for this node to execute it.
        let controlCoverageHandler = this.getCoverageHandlerForNode(node);
        if (controlCoverageHandler) {
            // Let the coverage prepare for the recording
            controlCoverageHandler.performStartRecordingOnNodesStack(nodesStack);
        }
        return true;
    }
    /**
     * This method gets a HTMLElement and HTMLElement array and starts the listening process on the
     * nodes in the array.
     * @param node
     * @param nodesStack
     * @returns
     */
    performStartListeningOnNodeAndStack(node, nodesStack) {
        // Prepare node for recording. Need to find the coverage handler for this node to execute it.
        let controlCoverageHandler = this.getCoverageHandlerForNode(node);
        if (controlCoverageHandler) {
            controlCoverageHandler.repositoryHandler = controlCoverageHandler.createRepositoryHandler();
            // Let the coverage prepare for the recording
            controlCoverageHandler.performStartListeningOnNodesStack(nodesStack);
        }
        return true;
    }
    performStartCapturingOnNode(node) {
        // Prepare node to be captured. Need to find the coverage handler for this node to execute it.
        let controlCoverageHandler = this.getCoverageHandlerForNode(node);
        if (controlCoverageHandler) {
            // Let the coverage prepare for the capture
            controlCoverageHandler.performStartCapturing();
        }
        // Return code is important to continue the walking on children
        return true;
    }
    cleanId(name) {
        return name.replace(/\W/g, "");
    }
    cleanName(name) {
        return name
            .replace(/[^A-Za-z0-9_ ]/g, "")
            .replace(/[ ]+/g, " ")
            .trim();
    }
    /**
     * Each coverage handler has label coverage handler property
     * This function assign it to current coverage handler
     */
    fetchLabelIfExists() {
        if (this.labelCoverageHandler)
            return;
        let labelCoverageHandler = this.applicationData.getScreenTopicData(Constants_1.Constants.LABELS_TOPIC, Constants_1.Constants.PARENT_ID);
        if (labelCoverageHandler) {
            this.labelCoverageHandler = labelCoverageHandler;
        }
        else {
            if (this.domNode.hasAttribute("id")) {
                const id = this.domNode.getAttribute("id");
                labelCoverageHandler = this.applicationData.getScreenTopicData(Constants_1.Constants.LABELS_TOPIC, id);
                if (labelCoverageHandler) {
                    this.labelCoverageHandler = labelCoverageHandler;
                }
            }
        }
    }
    /**
     * collect all coverage handler fields and store their path into fieldsPathIds
     * @param fieldsPathIds array of fields path id
     */
    collectFieldsPathIds(fieldsPathIds) {
        if (this.customCoverageHandler) {
            const webCustom = this.customCoverageHandler;
            //If it's not a tableCell
            if (webCustom.isCapturable()) {
                const nodeHasChildren = this.nodeHasChildrenElements();
                if (!nodeHasChildren || (nodeHasChildren && !webCustom.areChildrenCapturable())) {
                    this.validateAndMergeRepository();
                    fieldsPathIds.push(this.repositoryHandler.pathId);
                }
            }
            if (webCustom.areChildrenCapturable()) {
                this.walkOnChildren(this.domNode, (node) => {
                    return this.collectFieldsPathIdsOnNode(node, fieldsPathIds);
                }, true);
            }
        }
        else {
            //It's a tableCell, we continue to children
            this.walkOnChildren(this.domNode, (node) => {
                return this.collectFieldsPathIdsOnNode(node, fieldsPathIds);
            }, true);
        }
    }
    /**
     * This method checks if the node has children that are not text nodes, in order to determine if it's a leaf.
     * @returns true, if it has children other than text nodes, false otherwise
     */
    nodeHasChildrenElements() {
        const foundChildElement = this.customCoverageHandler.node.contents().filter(function () {
            return this.nodeType == Node.ELEMENT_NODE;
        });
        return foundChildElement.length > 0;
    }
    /**
     * TODO:Add description
     * @param node DOM node
     * @param fieldsPathIds
     * @returns
     */
    collectFieldsPathIdsOnNode(node, fieldsPathIds) {
        var _a;
        let controlCoverageHandler;
        if (node.nodeType === Node.TEXT_NODE) {
            //Ignore line with white spaces & new lines symbols like \n
            if (node.textContent.trim().length === 0 || ((_a = this.customCoverageHandler) === null || _a === void 0 ? void 0 : _a.type) == "Label")
                return true;
            controlCoverageHandler = this.getCoverageHandler(node);
        }
        else {
            controlCoverageHandler = this.getCoverageHandlerForNode(node);
        }
        controlCoverageHandler.collectFieldsPathIds(fieldsPathIds);
        return true;
    }
    /**
     * This method reports that element's attribute has changed to the platform
     * @param listeningElement
     * @param attribute
     * @param value
     */
    reportAttributeChanged(listeningElement, attribute, value) {
        let elementPath = listeningElement.path;
        if (listeningElement.lastStatus.has(attribute)) {
            let lastValue = listeningElement.lastStatus.get(attribute);
            // If we already reported and it's false, no need to report
            if (lastValue != value) {
                // Changed
                this.platformDriver.reportChangedElement(elementPath, attribute, value);
                listeningElement.lastStatus.set(attribute, value);
            }
        }
        else {
            // Initial one
            this.platformDriver.reportChangedElement(elementPath, attribute, value);
            listeningElement.lastStatus.set(attribute, value); // Initially set
        }
    }
}
exports["default"] = WebControlCoverageHandler;
//# sourceMappingURL=WebControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCoverageHandlerCreator.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCoverageHandlerCreator.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createCoveredApp = void 0;
const WebCoverageHandlerFactory_1 = __webpack_require__(/*! ./WebCoverageHandlerFactory */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCoverageHandlerFactory.js");
const ApplicationContext_1 = __webpack_require__(/*! ../../Model/ApplicationContext */ "./node_modules/@jacada-jbot/web/include/Model/ApplicationContext.js");
const InboundHandlersFactory_1 = __webpack_require__(/*! ../../PlatformDrivers/InboundHandlersFactory */ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/InboundHandlersFactory.js");
const WebLogger_1 = __webpack_require__(/*! ../../Utils/WebLogger */ "./node_modules/@jacada-jbot/web/include/Utils/WebLogger.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const CoverageHandlerCreator_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator.js");
const log = Log4jConfig_1.logFactory.getLogger("WebCoverageHandlerCreator");
/**
 * Creator to application coverage handler
 */
class WebCoverageHandlerCreator {
    /**
     * Entry point function
     *
     *Includes: initialized  logger, factory, creator, application context & inbound handlers factory
     */
    static init() {
        return new Promise((resolve) => {
            chrome.storage.local.get(["logLevel"], (result) => {
                let logger = new WebLogger_1.default(result.logLevel);
                let factory = new WebCoverageHandlerFactory_1.default();
                let applicationContext = new ApplicationContext_1.default(logger);
                this.inboundHandlersFactory = new InboundHandlersFactory_1.default(applicationContext);
                (0, CoverageHandlerCreator_1.setCoverageHandlerFactory)(factory);
                resolve();
            });
        });
    }
}
exports["default"] = WebCoverageHandlerCreator;
async function createCoveredApp(coveredApplication) {
    await WebCoverageHandlerCreator.init();
    let factory = (0, CoverageHandlerCreator_1.getCoverageHandlerFactory)();
    factory.addApplicationCoverageHandlers(coveredApplication.coverageHandlers);
}
exports.createCoveredApp = createCoveredApp;
createCoveredApp({ coverageHandlers: [] });
//# sourceMappingURL=WebCoverageHandlerCreator.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCoverageHandlerFactory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCoverageHandlerFactory.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

Object.defineProperty(exports, "__esModule", ({ value: true }));
const CoverageHandlerFactory_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/CoverageHandlerFactory */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerFactory.js");
const WebApplicationCoverageHandler_1 = __webpack_require__(/*! ./WebApplicationCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebApplicationCoverageHandler.js");
const WebScreenCoverageHandler_1 = __webpack_require__(/*! ./WebScreenCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebScreenCoverageHandler.js");
const WebControlCoverageHandler_1 = __webpack_require__(/*! ./WebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebControlCoverageHandler.js");
const DivWebControlCoverageHandler_1 = __webpack_require__(/*! ./DivWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/DivWebControlCoverageHandler.js");
const TextAreaWebControlCoverageHandler_1 = __webpack_require__(/*! ./TextAreaWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TextAreaWebControlCoverageHandler.js");
const TextInputWebControlCoverageHandler_1 = __webpack_require__(/*! ./TextInputWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TextInputWebControlCoverageHandler.js");
const SelectWebControlCoverageHandler_1 = __webpack_require__(/*! ./SelectWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/SelectWebControlCoverageHandler.js");
const ButtonWebControlCoverageHandler_1 = __webpack_require__(/*! ./ButtonWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/ButtonWebControlCoverageHandler.js");
const CheckBoxWebControlCoverageHandler_1 = __webpack_require__(/*! ./CheckBoxWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/CheckBoxWebControlCoverageHandler.js");
const LabelWebControlCoverageHandler_1 = __webpack_require__(/*! ./LabelWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/LabelWebControlCoverageHandler.js");
const ImageButtonWebControlCoverageHandler_1 = __webpack_require__(/*! ./ImageButtonWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/ImageButtonWebControlCoverageHandler.js");
const LinkWebControlCoverageHandler_1 = __webpack_require__(/*! ./LinkWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/LinkWebControlCoverageHandler.js");
const RadioButtonWebControlCoverageHandler_1 = __webpack_require__(/*! ./RadioButtonWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/RadioButtonWebControlCoverageHandler.js");
const TableWebControlCoverageHandler_1 = __webpack_require__(/*! ./TableWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableWebControlCoverageHandler.js");
const TableBodyCellWebControlCoverageHandler_1 = __webpack_require__(/*! ./TableBodyCellWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TableBodyCellWebControlCoverageHandler.js");
const FrameWebControlCoverageHandler_1 = __webpack_require__(/*! ./FrameWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/FrameWebControlCoverageHandler.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const ChromePlatformDriver_1 = __webpack_require__(/*! ../../PlatformDrivers/ChromePlatformDriver */ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/ChromePlatformDriver.js");
const DefaultWebCoverageHandler_1 = __webpack_require__(/*! ./DefaultWebCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/DefaultWebCoverageHandler.js");
const TextOutputWebControlCoverageHandler_1 = __webpack_require__(/*! ./TextOutputWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/TextOutputWebControlCoverageHandler.js");
const FormWebControlCoverageHandler_1 = __webpack_require__(/*! ./FormWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/FormWebControlCoverageHandler.js");
const WebCustomTableControlCoverageHandler_1 = __webpack_require__(/*! ./WebCustomTableControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomTableControlCoverageHandler.js");
const log = Log4jConfig_1.logFactory.getLogger("WebCoverageHandlerFactory");
/**
 * Factory to instantiate:
 *
 * Coverage handlers
 *
 * Repository
 *
 * PlatformDriver
 */
class WebCoverageHandlerFactory extends CoverageHandlerFactory_1.default {
    constructor() {
        super(...arguments);
        this.nodeNameToType = {
            resetInput: "Button",
            imageInput: "ImageButton",
            button: "Button",
            a: "Link",
            ul: "List",
            ol: "List",
            img: "Image",
            div: "Div",
            textarea: "TextArea",
            label: "Label",
            input: "TextInput",
            select: "Select",
            table: "Table",
            td: "TableBodyCell",
            form: "Form",
            iframe: "Frame",
            frame: "Frame",
            "#text": "TextOutput",
        };
        this.inputNameToType = {
            text: "TextInput",
            button: "Button",
            checkbox: "CheckBox",
            color: "ColorInput",
            date: "Date",
            "datetime-local": "Date",
            email: "TextInput",
            file: "FileInput",
            hidden: "Hidden",
            image: "ImageButton",
            month: "MonthInput",
            number: "NumberInput",
            password: "TextInput",
            radio: "RadioButton",
            range: "RangeInput",
            reset: "Button",
            search: "TextInput",
            submit: "Button",
            tel: "TelInput",
            time: "TimeInput",
            url: "TextInput",
            week: "WeekInput",
        };
    }
    createControlCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) {
        return new WebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
    }
    createApplicationCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory) {
        return new WebApplicationCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory);
    }
    createScreenCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) {
        return new WebScreenCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
    }
    createCoverageHandlerByType(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, controlType, applicationCoverageHandler) {
        log.trace("createCoverageHandlerByType.controlType =" + controlType);
        if (controlType == "Frame") {
            const frameCoverageHandler = new FrameWebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
            return frameCoverageHandler;
        }
        let customControlCoverageHandlerType = undefined;
        if (this.tableCoverageHandlers.has(controlType)) {
            let tableCoverageHandler;
            if (controlType == "Table") {
                //If it's a table we want to create it's customTableControl
                tableCoverageHandler = new TableWebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
                if (this.applicationCoverageHandlers.has(controlType)) {
                    log.trace(`control type ${controlType} is part of application coverage handlers`);
                    customControlCoverageHandlerType = this.applicationCoverageHandlers.get(controlType);
                }
                else if (this.baseCoverageHandlers.has(controlType)) {
                    log.trace(`control type ${controlType} is part of base coverage handlers`);
                    customControlCoverageHandlerType = this.baseCoverageHandlers.get(controlType);
                }
                const result = tableCoverageHandler.getNodeOnScreen();
                const node = result.success ? result.data.accessResult : null;
                tableCoverageHandler.setNode(node);
                const customTableCoverageHandler = this.createNewTableCustomControlInstance(customControlCoverageHandlerType, node);
                tableCoverageHandler.customCoverageHandler = customTableCoverageHandler;
                return tableCoverageHandler;
            }
            //If we are here, we can only create TableBodyCell
            return new TableBodyCellWebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
        }
        return super.createCoverageHandlerByType(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, controlType, applicationCoverageHandler);
    }
    createCoverageHandlerByNode(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, node, factory, applicationCoverageHandler) {
        const nodeType = this.nodeToNodeType(node);
        if (nodeType == "Frame") {
            const frameCoverageHandler = new FrameWebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
            return frameCoverageHandler;
        }
        else if (nodeType == "Table") {
            let foundCustomCoverageHandler = null;
            this.applicationCoverageHandlers.forEach((customCoverageHandler) => {
                log.trace(`looking for match in customCoverageHandlers`);
                if (customCoverageHandler.isMatch(node)) {
                    foundCustomCoverageHandler = this.createNewTableCustomControlInstance(customCoverageHandler, $(node));
                    return;
                }
                log.trace(`couldn't find match, continue to next CH`);
            });
            if (!foundCustomCoverageHandler) {
                let coverageHandlerBase = this.baseCoverageHandlers.get(nodeType);
                if (coverageHandlerBase) {
                    log.trace(`Found CHBase`);
                    foundCustomCoverageHandler = this.createNewTableCustomControlInstance(coverageHandlerBase, $(node));
                }
            }
            const tableCoverageHandlerType = this.tableCoverageHandlers.get(nodeType);
            const tableCoverageHandler = new tableCoverageHandlerType(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
            tableCoverageHandler.customCoverageHandler = foundCustomCoverageHandler;
            return tableCoverageHandler;
        }
        else {
            return super.createCoverageHandlerByNode(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, node, factory, applicationCoverageHandler);
        }
    }
    createNewTableCustomControlInstance(type, node) {
        const customCoverageHandlerObject = Object.create(type.prototype);
        const customCoverageHandlerInstance = new customCoverageHandlerObject.constructor(node);
        return customCoverageHandlerInstance;
    }
    populateBaseCoverageHandlerMap() {
        //The base map
        this.baseCoverageHandlers.set("Button", ButtonWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("CheckBox", CheckBoxWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Div", DivWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("TextArea", TextAreaWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Label", LabelWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("TextInput", TextInputWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Select", SelectWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("ImageButton", ImageButtonWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("RadioButton", RadioButtonWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Link", LinkWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("TextOutput", TextOutputWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Form", FormWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Table", WebCustomTableControlCoverageHandler_1.default);
        this.tableCoverageHandlers = new Map();
        //TODO: Handle Table's coverage handlers
        this.tableCoverageHandlers.set("Table", TableWebControlCoverageHandler_1.default);
        this.tableCoverageHandlers.set("TableBodyCell", TableBodyCellWebControlCoverageHandler_1.default);
    }
    /**
     * Create a platform driver
     * @param ApplicationContext
     * @returns ChromePlatformDriver by default
     */
    createPlatformDriverOfObject(ApplicationContext) {
        return new ChromePlatformDriver_1.default(ApplicationContext);
    }
    /**
     * Convert HTML element to our repository node type
     * @param node HTML element
     * @returns
     */
    nodeToNodeType(node) {
        let lcName = node.nodeName.toLowerCase();
        if (lcName === "input") {
            let lcType = node.getAttribute("type");
            if (lcType)
                lcType = lcType.toLowerCase();
            return this.inputNameToType[lcType] || "TextInput";
        }
        else {
            return this.nodeNameToType[lcName] || node.nodeName;
        }
    }
    getDefaultCoverageHandler(node, recordingStepReporter, listeningReporter) {
        return new DefaultWebCoverageHandler_1.default(node, recordingStepReporter, listeningReporter);
    }
}
exports["default"] = WebCoverageHandlerFactory;
//# sourceMappingURL=WebCoverageHandlerFactory.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomControlCoverageHandler.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebCustomControlCoverageHandler = void 0;
const CustomControlCoverageHandler_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/CustomControlCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CustomControlCoverageHandler.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const Constants_1 = __webpack_require__(/*! ../../Model/Constants */ "./node_modules/@jacada-jbot/web/include/Model/Constants.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const log = Log4jConfig_1.logFactory.getLogger("WebCustomControlCoverageHandler");
class WebCustomControlCoverageHandler extends CustomControlCoverageHandler_1.CustomControlCoverageHandler {
    /**
     *
     */
    constructor(node, recordingStepReporter, listeningReporter) {
        super(node, recordingStepReporter, listeningReporter);
        this.recordingStepReporter = recordingStepReporter;
        this.listeningReporter = listeningReporter;
        this.node = $(node);
        this.node.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY, this.node.getUniqueId());
    }
    recordEvent(eventName, callback) {
        const uniqueId = this.node.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        this.node.onNative(eventName, uniqueId, (event) => {
            const logicalAction = callback(event);
            this.recordingStepReporter(logicalAction);
        });
        this.node.attr(Constants_1.Constants.JBOT_REGISTERED_ATTR, "");
    }
    /**
     * Registers to overlayClicked event during the recording process.
     * The event will be fired when a user performs a mouse click on top of the element, preventing default action from occurring.
     * @param callback function that will be called whenever the specified event is delivered to the target
     * @param postRecordEventCallback  function that will be called right after we update JBot with callback result, coverage writer should perform the original action ( click / set text )
     */
    recordOverlayClickedEvent(callback, postRecordEventCallback) {
        log.trace(`Register ${Constants_1.Constants.EVENT_OVERLAY_CLICKED} event for recording`);
        this.node.data(Constants_1.Constants.IS_PREVENT_CLICK_ON_ELEMENT, true);
        const uniqueId = this.node.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        this.node.onNative(Constants_1.Constants.EVENT_OVERLAY_CLICKED, uniqueId, async (event) => {
            let logicalAction = null;
            try {
                //callback can throw an exception (written by coverage writer)
                logicalAction = callback(event);
            }
            catch (error) {
                log.error(`Could not perform callback function of type ${this.type}`);
                //TODO: Error handling
                throw error;
            }
            if (!logicalAction) {
                log.debug(`logicalAction returned is null: ${this.type}`);
                return;
            }
            log.debug(`logicalAction returned is ${logicalAction.actionName}`);
            await this.recordingStepReporter(logicalAction);
            log.debug(`Sending recorded step completed for ${this.type} action ${logicalAction.actionName}`);
            try {
                //postRecordEventCallback can throw an exception (written by coverage writer)
                postRecordEventCallback(event);
            }
            catch (error) {
                //TODO: Error handling
                log.error(`Could not perform postRecordEventCallback function of type ${this.type}`);
                throw error;
            }
        });
        this.node.attr(Constants_1.Constants.JBOT_REGISTERED_ATTR, "");
    }
    listenToEvent(eventName, callback) {
        const uniqueId = this.node.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        this.node.onNative(eventName, uniqueId, (event) => {
            const eventDetails = callback(event);
            this.listeningReporter(eventDetails.newValue, eventDetails.name);
        });
        this.node.attr(Constants_1.Constants.JBOT_REGISTERED_ATTR, "");
    }
    subscribeToExistsChanged() {
        this.node.off("nodeAdded");
        this.node.on("nodeAdded", () => {
            this.listeningReporter(true, "existsChanged");
        });
        this.node.off("nodeRemoved");
        this.node.on("nodeRemoved", () => {
            this.listeningReporter(false, "existsChanged");
        });
    }
    subsribeToDisabledChanged() {
        this.node.off("attributeChanged");
        this.node.on("attributeChanged", (_e, attributeName) => {
            if (attributeName === "disabled") {
                const isDisabled = this.node.prop("disabled");
                this.listeningReporter(isDisabled, "disabledChanged");
            }
        });
    }
    /**
     * Getter of attribute isExits
     * @returns true - always
     */
    isExists() {
        const nodeExists = $(document).find(this.node).length > 0;
        return new GenericResult_1.GenericResult(true, null, nodeExists);
    }
    /**
     * Getter of attribute isDisabled
     * @returns true if the node is disabled, false otherwise
     */
    isDisabled() {
        let isDisabled = this.node.prop("disabled");
        return new GenericResult_1.GenericResult(true, null, isDisabled);
    }
}
exports.WebCustomControlCoverageHandler = WebCustomControlCoverageHandler;
//# sourceMappingURL=WebCustomControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomTableControlCoverageHandler.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCustomTableControlCoverageHandler.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseCustomControlCoverageHandler_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/BaseCustomControlCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/BaseCustomControlCoverageHandler.js");
const GenericResult_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/GenericResult */ "./node_modules/@jacada-jbot/base/include/Model/GenericResult.js");
const Constants_1 = __webpack_require__(/*! ../../Model/Constants */ "./node_modules/@jacada-jbot/web/include/Model/Constants.js");
class WebCustomTableControlCoverageHandler extends BaseCustomControlCoverageHandler_1.BaseCustomControlCoverageHandler {
    constructor(node) {
        super(node);
        this.type = "Table";
        this.tableType = WebCustomTableControlCoverageHandler.TABLE_TYPE_SINGLE_SELECTION;
        this.node = $(node);
        this.node.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY, this.node.getUniqueId());
    }
    /**
     * This method gets all the rows of the table, that are inside the "body" of the table
     * @returns
     */
    getTableRows() {
        if (this.node.children("tbody").length > 0) {
            return this.node.children("tbody").children("tr");
        }
        else {
            return this.node.children("tr");
        }
    }
    /**
     * This method gets the header row of the table
     * @returns
     */
    getTableHeader() {
        const $trs = this.node.children("thead").children("tr");
        return $trs[0];
    }
    /**
     * This method gets a node, and returns its' column name
     * @param node
     * @returns
     */
    getColumnName(node) {
        return $(node).text();
    }
    /**
     * This method gets the name of the field that is identified by column name and number
     * @param columnName
     * @param columnNumber
     * @returns
     */
    getFieldName(columnName, columnNumber) {
        return columnName;
    }
    /**
     * This method gets the cell that is under the given node
     * @param node
     * @returns
     */
    getCell(node) {
        return node;
    }
    /**
     *  This method updates elementNode with the specific values in order to identify the element correctly
     * @param elementNode the element node to update
     */
    updateElementRepositoryNode(elementNode) { }
    /**
     * This method indicates if this table is capturable, default value is true.
     * @returns
     */
    isCapturable() {
        if (this.tableType === WebCustomTableControlCoverageHandler.TABLE_TYPE_SINGLE_SELECTION && this.node.children("tbody").children().length > 0) {
            return true;
        }
        return false;
    }
    /**
     * Getter of attribute isExits
     * @returns true - always
     */
    isExists() {
        return new GenericResult_1.GenericResult(true, null, true);
    }
}
exports["default"] = WebCustomTableControlCoverageHandler;
WebCustomTableControlCoverageHandler.TABLE_TYPE_UNKNOWN = 0;
WebCustomTableControlCoverageHandler.TABLE_TYPE_GRID = 1;
WebCustomTableControlCoverageHandler.TABLE_TYPE_SINGLE_SELECTION = 2;
//# sourceMappingURL=WebCustomTableControlCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebScreenCoverageHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebScreenCoverageHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const ScreenCoverageHandler_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/ScreenCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ScreenCoverageHandler.js");
const WebControlCoverageHandler_1 = __webpack_require__(/*! ./WebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebControlCoverageHandler.js");
const ControlCoverageHandler_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler.js");
const WebHighlight_1 = __webpack_require__(/*! ../../Utils/WebHighlight */ "./node_modules/@jacada-jbot/web/include/Utils/WebHighlight.js");
const WebHighlightElementData_1 = __webpack_require__(/*! ../../Model/WebHighlightElementData */ "./node_modules/@jacada-jbot/web/include/Model/WebHighlightElementData.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const ChromePlatformDriver_1 = __webpack_require__(/*! ../../PlatformDrivers/ChromePlatformDriver */ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/ChromePlatformDriver.js");
const $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
const _ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore-umd.js");
const Constants_1 = __webpack_require__(/*! ../../Model/Constants */ "./node_modules/@jacada-jbot/web/include/Model/Constants.js");
const TypeGuards_1 = __webpack_require__(/*! ../../Utils/TypeGuards */ "./node_modules/@jacada-jbot/web/include/Utils/TypeGuards.js");
const log = Log4jConfig_1.logFactory.getLogger("WebScreenCoverageHandler");
/**
 * Coverage handler for screen
 */
class WebScreenCoverageHandler extends ScreenCoverageHandler_1.default {
    constructor(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) {
        super(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
        /**
         * True in case we have started capturing
         *  */
        this.inCaptureMode = false;
        /**
         * Postpone mutation observer callback execution until after wait milliseconds have elapsed since the last time it was invoked.
         */
        this.waitTimeBeforeDetactChanges = 1000;
        this.loadAppSection();
        this.uniqueId = window.location.href.replace(/\W/g, "");
    }
    type() {
        return "WebPage";
    }
    screenChanged() {
        // GD: This method will be called when we will add logical screens (soon)
        this.loadAppSection();
    }
    /**
     * Loading the app sections of this screen
     */
    loadAppSection() {
        this.appSections = this.createAppSections();
    }
    /**
     * Creates the app sections of this screen. Coverage handler with app sections need to inherit this method and create the app sections
     */
    createAppSections() {
        return []; // By default there are no app sections.
    }
    /**
     * The path might be to the app section, not just to this screen so groupNavbar or header is valid.
     * If we have app sections, lets handle them
     * @returns
     */
    validateScreen() {
        for (let i = 0; i < this.appSections.length; i++) {
            let appSection = this.appSections[i];
            // If it's validated (found) we can return
            let result = appSection.validateAppSection(this.repositoryHandler);
            if (result.success) {
                return result;
            }
        }
        return super.validateScreen();
    }
    /**
     *  On a default web screen, which is HTML based, each element decides what to record.
     *  Here we walk on the dom and each element we decide if to listen to it, and listen to it's children.
     * @returns
     */
    startRecording() {
        // Initiating the control mapping
        this.highlightMap = {};
        // Recording on current screen and children
        this.performStartRecording();
        // In case screen changes, we need to re-record
        this.startRecordingChangesOnScreen();
        // Start highlight for recording
        this.startHighlightingOnScreen();
        log.info("Recording was set");
        return this.returnSuccess("");
    }
    stopRecording() {
        this.removeHighlighter();
        this.stopHighlightElementsInScreen();
        this.stopHighlightOnScreen();
        this.stopRecordingChangesOnScreen();
        this.stopRecordingOnFrames();
        this.removeAllRegisteredEvents();
        this.removeAllCoverageHandlersFromNode();
        this.highlightMap = {};
        log.debug("Recording stopped");
        return this.returnSuccess("Recording stopped");
    }
    stopRecordingOnFrames() {
        let $frames = $("iframe,frame");
        $($frames).each((_index, iframe) => {
            let frameGuid = iframe.getAttribute(Constants_1.Constants.ATTR_FRAME_GUID);
            iframe.contentWindow.postMessage({
                message: "stopRecordingOnFrame",
                frameGuid: frameGuid,
            }, "*");
        });
    }
    /**
     *  Remove all elements with Registered Attr.
     */
    removeAllRegisteredEvents() {
        let $registeredElements = $("[" + Constants_1.Constants.JBOT_REGISTERED_ATTR + "]");
        $registeredElements.each((_index, element) => {
            this.removeRegisteredEvent($(element));
        });
        $registeredElements.removeAttr(Constants_1.Constants.JBOT_REGISTERED_ATTR);
    }
    /**
     *  Remove element with Registered Attr.
     */
    removeRegisteredEvent($elem) {
        const uniqueId = $elem.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        if (uniqueId) {
            $elem.offNativeById(uniqueId);
        }
    }
    /**
     * Remove all registered coverage handlers by JBOT_COVERAGE_HANDLER_UNIQUE_ID_ATTR attribute
     */
    removeAllCoverageHandlersFromNode() {
        let $registeredElements = $("[" + Constants_1.Constants.JBOT_COVERAGE_HANDLER_ATTR + "]");
        $registeredElements.each((_index, element) => {
            this.removeCoverageHandlerFromNode(element);
        });
    }
    performStartRecording() {
        // If we have app sections, lets handle them
        if (this.appSections.length == 0) {
            this.walkOnChildren(document.body, (node) => {
                return this.performStartRecordingOnNode(node);
            });
            return this.returnSuccess("");
        }
        else {
            // Perform the recording on the app sections and then on the main section if exists
            for (let i = 0; i < this.appSections.length; i++) {
                let appSection = this.appSections[i];
                if (appSection.isAppSectionAppear()) {
                    appSection.performStartRecording();
                }
            }
            let $mainSection = this.getMainSection();
            if ($mainSection) {
                this.performStartRecordingOnNode($mainSection[0]);
            }
            return this.returnSuccess("");
        }
    }
    performStartRecordingOnNode(node) {
        // Prepare node for recording. Need to find the coverage handler for this node to execute it.
        // Let the coverage prepare for the recording
        let coverageHandler = this.getCoverageHandlerForNode(node);
        if (coverageHandler instanceof WebControlCoverageHandler_1.default) {
            coverageHandler.performStartRecording();
        }
        else if (coverageHandler instanceof WebScreenCoverageHandler) {
            coverageHandler.walkOnChildren(node, (childNode) => {
                return coverageHandler.performStartRecordingOnNode(childNode);
            });
        }
        else {
            if (coverageHandler) {
                log.error(`Coverage handler of ${node.nodeName} is not inheriting known classes`);
            }
        }
        // Return code is important to continue the walking on children
        return true;
    }
    /**
     * Returns the main section of a screen with app sections. This typically will not be the body therefore it needs to be inherited
     */
    getMainSection() {
        return $("body");
    }
    /**
     * Stops listening on changes on screen (mutation observer)
     */
    stopRecordingChangesOnScreen() {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
    }
    /**
     * Starts listening on changes on screen (mutation observer)
     */
    startRecordingChangesOnScreen() {
        // Save the current screen unique id in order to compare later if we have changed screen
        this.lastUniqueId = this.uniqueId;
        this.mutationObserver = new MutationObserver((mutations) => {
            // Are we in a new logical screen?
            if (this.lastUniqueId != this.uniqueId) {
                log.debug(`Screen was changed to: ${this.uniqueId}`);
                // New screen. Need to stop current recording, notify that it's a new screen and then restart recording
                this.applicationCoverageHandler.stopRecording();
                this.applicationCoverageHandler.startRecording();
                return;
            }
            log.debug(`Processing mutation changes on : ${this.lastUniqueId}`);
            // Loop on all controls changed in screen
            for (const mutation of mutations) {
                for (const node of mutation.addedNodes) {
                    if (!(node instanceof HTMLElement) || node.className === "jBotHighlighter")
                        continue; // not an element
                    // Going up to first coverage handler to start recording from there all the path down
                    this.startRecordingFromFirstParentWithCoverageHandler(node);
                    // Going down in case node is not a leaf and start recording on its children
                    this.walkOnChildren(node, (childNode) => {
                        return this.performStartRecordingOnNode(childNode);
                    });
                }
                for (const node of mutation.removedNodes) {
                    let $element = $(node);
                    // Remove highlight with the mapping
                    let uniqueId = $element.attr(Constants_1.Constants.JBOT_HIGHLIGHT_ATTR_ID);
                    if (uniqueId) {
                        delete this.highlightMap[uniqueId];
                    }
                    this.removeRegisteredEvent($element);
                }
            }
        });
        let mutationsOptions = { subtree: true, childList: true };
        this.mutationObserver.observe(document.body, mutationsOptions);
    }
    /**
     * This method gets a  node, and iterates on it's parents until we find an element with Coverage Handler.
     * Then it start recording down from it
     * @param node
     */
    startRecordingFromFirstParentWithCoverageHandler(node) {
        let coverageHandler = null;
        let nodesStack = [];
        // Iterate on html elements up until we reach and element with coverage handler
        const data = { node, nodesStack, coverageHandler };
        this.findAncestorsCoverageHandler(data);
        // Recording on the stack from top to bottom
        data.coverageHandler.performStartRecordingOnNodesStack(nodesStack);
    }
    /**
     * Populate node stack with nodes start from node until ancestor coverage handler was found
     * @param data
     */
    findAncestorsCoverageHandler(data) {
        while (data.node && !data.node.isEqualNode(document.body)) {
            // Do we have coverage handler for the node ?
            data.coverageHandler = this.fetchCoverageHandlerFromNode(data.node);
            if (data.coverageHandler)
                break;
            // Save the node in a stack as it doesn't have coverage handler and need to be processed.
            data.nodesStack.push(data.node);
            // Node has no coverage handler. Move up in the chain.
            data.node = data.node.parentElement;
        }
        log.debug(`findAncestorsCoverageHandler: ${data.nodesStack.length} . Found coverage ${data.coverageHandler}`);
        if (!data.node) {
            log.debug("DEBUG: Scenario where parent was not body!");
        }
        // If not found, we are (as the screen), are the handler
        if (!data.coverageHandler) {
            data.coverageHandler = this;
        }
    }
    /**
     * This method gets a  node, and iterates on it's parents until we find an element with Coverage Handler.
     * Then it start listening down from it
     * @param node
     */
    startListeningFromFirstParentWithCoverageHandler(node) {
        let coverageHandler = null;
        let nodesStack = [];
        const data = { node, nodesStack, coverageHandler };
        // Iterate on html elements up until we reach and element with coverage handler
        this.findAncestorsCoverageHandler(data);
        // Listening on the stack from top to bottom
        data.coverageHandler.performStartListeningOnNodesStack(nodesStack);
    }
    /**
     * Starts observe DOM changes such as removed/added nodes and/or attributes
     */
    startListeningOnChanges() {
        this.CreateObserverForListeningOnChanges();
        let mutationsOptions = { attributes: true, subtree: true, childList: true };
        this.mutationObserver.observe(document.body, mutationsOptions);
    }
    /**
     * Creating mutation observer for purposes of listening on changes
     */
    CreateObserverForListeningOnChanges() {
        this.lastUniqueId = this.uniqueId;
        this.mutationObserver = new MutationObserver(_.debounce((mutations) => {
            // Are we in a new logical screen?
            if (this.lastUniqueId != this.uniqueId) {
                // New screen. Need to stop current recording, notify that it's a new screen and then restart recording
                this.applicationCoverageHandler.stopListening();
                this.applicationCoverageHandler.startListening();
                //notify application that a page has opened
                this.pageOpened();
                return;
            }
            // GDTEMP: We should do it once all messages have received
            // Check what has changed.
            let structureModified = false;
            let addedNodes = [];
            // Loop on all controls changed in screen
            for (const mutation of mutations) {
                if ((mutation.removedNodes.length > 0 && Array.from(mutation.removedNodes).some((node) => node.nodeType === Node.ELEMENT_NODE && node.nodeName !== "SCRIPT")) ||
                    (mutation.addedNodes.length > 0 && Array.from(mutation.addedNodes).some((node) => node.nodeType === Node.ELEMENT_NODE && node.nodeName !== "SCRIPT"))) {
                    structureModified = true;
                    addedNodes = [...addedNodes, ...Array.from(mutation.addedNodes)];
                }
                //attribute has changed
                //if this element is part of listening info which include this attribute name
                //we will update JBot with the new value
                if (!structureModified && mutation.attributeName) {
                    if (!mutation.attributeName.startsWith(Constants_1.Constants.JBOT_ATTR_PREFIX)) {
                        const $element = $(mutation.target);
                        $element.trigger("attributeChanged", mutation.attributeName);
                    }
                }
                if (structureModified && mutation.removedNodes.length > 0) {
                    for (const node of mutation.removedNodes) {
                        let $element = $(node);
                        $element.trigger("nodeRemoved");
                    }
                }
            }
            if (structureModified) {
                this.applicationCoverageHandler.startListening();
                for (const node of addedNodes) {
                    let $element = $(node);
                    $element.trigger("nodeAdded");
                }
            }
        }, this.waitTimeBeforeDetactChanges));
    }
    /**
     * This method reports that element's attribute has changed to the platform
     * @param listeningElement
     * @param attribute
     * @param value new attribute value
     */
    reportAttributeChanged(listeningElement, attribute, value) {
        let elementPath = listeningElement.path;
        if (listeningElement.lastStatus.has(attribute)) {
            let lastValue = listeningElement.lastStatus.get(attribute);
            // If we already reported and it's false, no need to report
            if (lastValue != value) {
                // Changed
                this.platformDriver.reportChangedElement(elementPath, attribute, value);
                listeningElement.lastStatus.set(attribute, value);
            }
        }
        else {
            // Initial one
            this.platformDriver.reportChangedElement(elementPath, attribute, value);
            listeningElement.lastStatus.set(attribute, value); // Initially set
        }
    }
    /**
     * Request from each frame under this screen to
     * start observe mutations
     */
    startListeningOnChangesInFrames() {
        let $frames = $("iframe,frame");
        $($frames).each((_index, iframe) => {
            let frameGuid = iframe.getAttribute(Constants_1.Constants.ATTR_FRAME_GUID);
            if (frameGuid) {
                iframe.contentWindow.postMessage({
                    message: ChromePlatformDriver_1.default.MESSAGE_START_LISTENING_ON_CHANGES_IN_FRAME,
                    frameGuid: frameGuid,
                }, "*");
            }
        });
    }
    /**
     * Request from each frame under this screen to
     * start observe mutations
     */
    stopListeningInFrames() {
        const $frames = $("iframe,frame");
        $($frames).each((index, iframe) => {
            const $iframe = $(iframe);
            const uniqueId = $iframe.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
            $iframe.offNative(ChromePlatformDriver_1.default.FRAME_LISTENED_ELEMENT_MESSAGE, uniqueId);
            const frameGuid = iframe.getAttribute(Constants_1.Constants.ATTR_FRAME_GUID);
            iframe.contentWindow.postMessage({
                message: ChromePlatformDriver_1.default.MESSAGE_STOP_LISTENING_ON_FRAME,
                frameGuid: frameGuid,
            }, "*");
        });
    }
    startListening() {
        this.startListeningOnChanges();
        this.startListeningOnChangesInFrames();
        return this.returnSuccess();
    }
    stopListening() {
        this.stopListeningOnChanges();
        this.stopListeningInFrames();
        this.removeAllRegisteredEvents();
        this.removeAllCoverageHandlersFromNode();
        return this.returnSuccess("");
    }
    /**
     * Stop listening on changes (mutation observer)
     */
    stopListeningOnChanges() {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
    }
    startCapturing() {
        this.highlightMap = {}; // Initiating the control mapping
        this.inCaptureMode = true;
        this.startCapturingOnScreen();
        // This will loop on children
        let result = this.performStartCapturingOnElementsInScreen();
        log.debug("Capturing was set");
        return result;
    }
    /**
     * Enter into recording mode on the screen and its children
     */
    performStartCapturingOnElementsInScreen() {
        // If we have app sections, lets handle them
        if (this.appSections.length == 0) {
            this.walkOnChildren(document.body, (node) => {
                return this.performStartCapturingOnNode(node);
            });
        }
        else {
            // Enter the recording on the app sections and then on the main section
            for (let i = 0; i < this.appSections.length; i++) {
                let appSection = this.appSections[i];
                if (appSection.isAppSectionAppear()) {
                    appSection.performStartCapturing();
                }
            }
            let $mainSection = this.getMainSection();
            if ($mainSection) {
                this.performStartCapturingOnNode($mainSection[0]);
            }
        }
        return this.returnSuccess();
    }
    /**
     * Start capturing on document body
     */
    startCapturingOnScreen() {
        // The window can also be captured
        let $elem = $(document.body);
        this.registerScreenForCapture(this, $elem, (event) => {
            this.executeStartCapturingClicked(event);
        });
        // Make the window ready for capturing.
        this.startHighlightingOnScreen();
        // For a case of mouse move on the highlighter
        $(document).on(Constants_1.Constants.EVENT_CAPTURE_MOUSE, (event) => {
            this.handleHighlightMouseEvent(event);
        });
        this.highlightObject.setPreventClickEvent(true);
    }
    stopCapturingOnScreen() {
        this.stopHighlightOnScreen();
        $(document).off(Constants_1.Constants.EVENT_CAPTURE_MOUSE);
    }
    stopCapturing() {
        // Remove highlights for capture if exists
        this.removeHighlighter(); // Remove the current highlighted
        this.stopHighlightElementsInScreen();
        this.stopCapturingOnScreen();
        this.stopCapturingOnFrames();
        this.removeAllRegisteredEvents();
        this.removeAllCoverageHandlersFromNode();
        this.inCaptureMode = false;
        log.debug("Capturing was stopped");
        return this.returnSuccess("Capturing stopped");
    }
    stopCapturingOnFrames() {
        const $frames = $("iframe,frame");
        $($frames).each((_index, iframe) => {
            iframe.contentWindow.postMessage({
                message: "stopCapturingOnFrame",
            }, "*");
        });
    }
    /**
     * Stop capturing by removing all elements with Capture Attr.
     */
    stopHighlightElementsInScreen() {
        let $elements = $("[" + Constants_1.Constants.JBOT_HIGHLIGHT_ATTR_ID + "]");
        let self = this;
        $elements.each(function () {
            let $elem = $(this);
            const controlCoverage = self.getCoverageHandlerForNode(this);
            if (self.inCaptureMode || controlCoverage.customCoverageHandler.node.data(Constants_1.Constants.IS_PREVENT_CLICK_ON_ELEMENT)) {
                const uniqueId = $elem.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
                $elem.offNative(Constants_1.Constants.EVENT_OVERLAY_CLICKED, uniqueId);
            }
            // Remove the attributes
            $elem.removeAttr(Constants_1.Constants.JBOT_HIGHLIGHT_ATTR_ID);
        });
    }
    /**
     * Create a selector from this coverage handler to childDomNode
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        let partialSelector = this.createSelectorFromParentToChild(document.body, childDomNode);
        let anchorSelector = this.createAnchorSelector(useExistingSelector);
        return this.concatenateSelectorParts(anchorSelector, partialSelector);
    }
    /**
     * Get the path to ourselves
     * @param useExistingSelector
     * @returns $(document.body) by default
     */
    createAnchorSelector(useExistingSelector) {
        return "$(document.body)";
    }
    /**
     * concatenate ourself with the access to the child.
     * @param anchorSelector
     * @param partialSelector
     * @returns
     */
    concatenateSelectorParts(anchorSelector, partialSelector) {
        return `${anchorSelector}.children${partialSelector}`;
    }
    createSelectorFromParentToChild(parentDomNode, elementDomNode) {
        // Create a selector command that finds the element node on parent element.
        // By default we do it by finding the element type and it's index. So, lets walk
        let nodeTagName = elementDomNode.nodeName;
        let indexInParent = 0;
        this.walkOnChildren(parentDomNode, function (node) {
            if (node === elementDomNode) {
                return false; // Stop looping
            }
            else {
                if (node.nodeName === nodeTagName) {
                    indexInParent++;
                }
                return true;
            }
        });
        // Return a JQuery selector based on the index
        return `('${nodeTagName}').eq(${indexInParent})`;
    }
    canAccessDirectly() {
        return true;
    }
    getNode() {
        const selector = this.getSelectorFromRepository();
        if (!selector)
            return this.returnFailure("Selector was not found");
        const selectionCmd = this.createJQuerySelectorCommand(selector);
        const $elements = eval(selectionCmd);
        if ($elements.length === 0) {
            return this.returnFailure(`Selector ${selectionCmd} not found`);
        }
        return this.returnSuccess({ accessResult: $elements });
    }
    /**
     * This method gets the selector part from the field section in the repository
     * @returns selector if a selector exists otherwise false
     */
    getSelectorFromRepository() {
        // Getting our configuration. This is specific for JQuery.
        const config = this.repositoryHandler.config;
        const fields = config.fields;
        // By default we perform get on first field. Other controls can change it.
        const field = fields[0];
        return field.selector;
    }
    createJQuerySelectorCommand(selector) {
        if (selector.startsWith("$"))
            return selector;
        selector = `$${selector}`;
        return selector;
    }
    /**
     * Register screen for highlight
     * @param screenCoverageHandler
     * @param $elem document body
     * @param functionHandler event handler
     */
    registerScreenForCapture(screenCoverageHandler, $elem, functionHandler) {
        // This control wants to handle capture. We add it to the dictionary so we can map it on mouse move and click.
        // Get the key for the dictionary
        let key = this.uniqueId;
        let highlightElementData = new WebHighlightElementData_1.default(screenCoverageHandler, $elem, functionHandler);
        this.registerElementForHighlight(key, highlightElementData, $elem);
    }
    registerControlForHighlight(controlCoverageHandler, $elem, functionHandler) {
        // This control wants to handle capture. We add it to the dictionary so we can map it on mouse move and click.
        // Get the key for the dictionary
        const key = $elem.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        const highlightElementData = new WebHighlightElementData_1.default(controlCoverageHandler, $elem, functionHandler);
        this.registerElementForHighlight(key, highlightElementData, $elem);
    }
    /**
     * register
     * @param key screen unique id
     * @param highlightElementData
     * @param $elem document body
     */
    registerElementForHighlight(key, highlightElementData, $elem) {
        // We also adding indication on the control that we have highlight on it.
        $elem.attr(Constants_1.Constants.JBOT_HIGHLIGHT_ATTR_ID, key);
        // This control wants to handle capture. We add it to the dictionary so we can map it on mouse move and click.
        this.highlightMap[key] = highlightElementData;
        if (highlightElementData.captureCallback) {
            // Do we have call back in case of capture ? If yes, register for that click
            const uniqueId = $elem.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
            $elem.onNative(Constants_1.Constants.EVENT_OVERLAY_CLICKED, uniqueId, function (event) {
                let functionHandler = highlightElementData.captureCallback;
                if (functionHandler) {
                    log.trace(`Clicked on element with key ${key}`);
                    functionHandler(event);
                }
            });
            $elem.attr(Constants_1.Constants.JBOT_REGISTERED_ATTR, "");
        }
    }
    /**
     * Listen to the mouse move. We will get it also from the controls as it will bubble. However if we open a highlighter, it should not bubble.
     */
    startHighlightingOnScreen() {
        this.highlightObject = new WebHighlight_1.default(this, ControlCoverageHandler_1.default.ELEMENT_HIGHLIGHT_COLOR, document);
        $("body").onNative("mousemove", this.uniqueId, (event) => {
            this.handleMouseMoveOnHighlight(event);
        });
    }
    /**
     * Stops highlight
     */
    stopHighlightOnScreen() {
        $("body").offNative("mousemove", this.uniqueId);
        if (this.highlightObject) {
            this.highlightObject.destroy();
            this.highlightObject = null;
        }
        if (this.snapshotHighlightObject) {
            this.snapshotHighlightObject.destroy();
            this.snapshotHighlightObject = null;
        }
    }
    /**
     * Mouse move event handler
     * @param event mouse move event data
     * @returns
     */
    handleMouseMoveOnHighlight(event) {
        // We received mouse move event directly
        log.trace(`mouse move: ${event.clientX}/${event.clientY}`);
        let highlightElementData;
        let $elem;
        let isElementFound = false;
        // On move, we find the elements where the mouse above them and choose the smallest or last one in the list.
        let lowestElement = this.elementFromPoint(event.clientX, event.clientY);
        if (!lowestElement) {
            // Not on element - so on window
            // log.debug("Highlighter: Element was not found from point");
            highlightElementData = this.highlightMap[this.uniqueId];
            $elem = $(document.body);
        }
        else {
            $elem = $(lowestElement);
            // log.debug("Highlighter: Element was found from point. type is " + lowestElement.tagName);
            if ($elem.prop("class") === "jBotHighlighter") {
                // Make sure we do not receive events on the highlighter itself
                log.trace("Mouse is on highlighter");
                return;
            }
            // If we are inside an iFrame - we should let the iFrame handle it.
            // If we move on an iFrame, we only allow to click on the border. Therefore if we are not on the border, it's same as leaving.
            if (lowestElement.tagName === "IFRAME" || lowestElement.tagName === "FRAME") {
                if (event.offsetX > 1 && event.offsetX < $elem.width() - 2 && event.offsetY > 1 && event.offsetY < $elem.height() - 2) {
                    // We are in the middle of the frame. Remove it.
                    this.removeHighlighter();
                    return;
                }
            }
            while ($elem && $elem.length > 0 && !$elem.is("body")) {
                // All elements which are ready to be captured should have this attribute
                let key = $elem.attr(Constants_1.Constants.JBOT_HIGHLIGHT_ATTR_ID);
                if (key && key.length > 0) {
                    log.trace(`Highlighter:  Element key on move is:${key}`);
                    // Was it registered ?
                    highlightElementData = this.highlightMap[key];
                    if (highlightElementData) {
                        isElementFound = true;
                        break;
                    }
                    log.trace(`Highlighter:  Element with key is not in the map:${key}`);
                }
                else {
                    // log.debug("Highlighter: No key for element. Go to parent.");
                }
                // Not registered - climbing up to parent
                $elem = $elem.parent();
            }
            if (!$elem || $elem.length == 0) {
                log.trace(`Highlighter: Haven't found element to highlight for type ${lowestElement.tagName}`);
                return;
            }
        }
        // Highlight the element
        if (isElementFound) {
            // log.debug(`Highlighter: Highlighting element: ${$elem}`)
            this.highlightElement($elem);
        }
        else {
            // log.debug(`Highlighter: Remove highlighting element: ${$elem}`)
            this.removeHighlighter();
        }
    }
    /**
     * @param x coordinate
     * @param y coordinate
     * @returns the element for the specified x coordinate and the specified y coordinate.
     */
    elementFromPoint(x, y) {
        return document.elementFromPoint(x, y);
    }
    /**
     * Capture mouse move event handler
     * @param event
     * @returns
     */
    handleHighlightMouseEvent(event) {
        // Handle mouse move on the element. The key will identify it
        // See the event created in WebHighlight
        let data = event.detail;
        let key = data.key;
        log.trace(`Received capture mouse event with key ${key}`);
        let highlightElementData = this.highlightMap[key];
        if (!highlightElementData) {
            log.trace(`No capture element data for key ${key}`);
            return;
        }
        let $elem = highlightElementData.$elem;
        // Highlight the element
        log.trace("Highlighting element");
        this.highlightElement($elem);
    }
    /**
     * Add or remove highlight to element
     * @param $highlightedElement
     * @returns
     */
    highlightElement($highlightedElement) {
        // If already highlighted, no need to do again
        log.trace(`In highlightElement: ${$highlightedElement}`);
        if ($highlightedElement) {
            log.trace(`In highlightElement: element exists`);
        }
        if ($highlightedElement && $highlightedElement.attr(Constants_1.Constants.ELEMENT_IS_CURRENTLY_HIGHLIGHTED))
            return;
        log.trace(`In highlightElement: highlightedElement is: ${this.highlightElement.name}`);
        // Remove from current
        this.removeHighlighter();
        // Set the highlighting
        this.addHighlighter($highlightedElement);
        return;
    }
    /**
     * Add highlighter attribute to element
     * @param $elem
     * @returns
     */
    addHighlighter($elem) {
        if (!$elem)
            return;
        this.showHighlighter($elem);
        $elem.attr(Constants_1.Constants.ELEMENT_IS_CURRENTLY_HIGHLIGHTED, "true");
    }
    /**
     * Remove the current highlighted
     */
    removeHighlighter() {
        this.removeHighlightAttribute();
        this.hideHighlighter();
    }
    /**
     * Show red highlight according to show argument
     * @param $elem element to highlight
     * @param show if true show highlight otherwise hide highlight
     */
    highlightForSnapshot($elem, show) {
        if (show) {
            this.hideHighlighter();
            if (!this.snapshotHighlightObject) {
                this.snapshotHighlightObject = new WebHighlight_1.default(this, ControlCoverageHandler_1.default.ELEMENT_SNAPSHOT_COLOR, document);
            }
            this.snapshotHighlightObject.show($elem);
        }
        else {
            if (this.snapshotHighlightObject) {
                this.snapshotHighlightObject.hide();
            }
        }
    }
    /**
     * Remove current highlighted attribute element
     */
    removeHighlightAttribute() {
        let $elem = $("[" + Constants_1.Constants.ELEMENT_IS_CURRENTLY_HIGHLIGHTED + "]");
        $elem.removeAttr(Constants_1.Constants.ELEMENT_IS_CURRENTLY_HIGHLIGHTED);
    }
    /**
     * show highlight around element
     * @param $elem to highlight
     * @returns
     */
    showHighlighter($elem) {
        if ($elem.length === 0)
            return;
        const controlCoverage = this.getCoverageHandlerForNode($elem[0]);
        //Recording mode
        if (!this.inCaptureMode && controlCoverage.customCoverageHandler && (0, TypeGuards_1.isControl)(controlCoverage.customCoverageHandler)) {
            this.highlightObject.setPreventClickEvent(controlCoverage.customCoverageHandler.node.data(Constants_1.Constants.IS_PREVENT_CLICK_ON_ELEMENT));
        }
        let element = $elem[0];
        this.highlightObject.show(element);
    }
    /**
     * hide highlight around element
     * @returns
     */
    hideHighlighter() {
        // Show/move the highlighted rectangle
        if (!this.highlightObject)
            return;
        this.highlightObject.hide();
    }
    /**
     * On a default web screen, which is HTML based, each element decides what to record.
     * Here we walk on the stack and each node decides if to record itself
     * @param nodesStack
     * @returns
     */
    performStartRecordingOnNodesStack(nodesStack) {
        if (nodesStack.length === 0) {
            return this.returnSuccess("");
        }
        let node = nodesStack.pop();
        this.performStartRecordingOnNodeAndStack(node, nodesStack);
    }
    /**
     * On a default web screen, which is HTML based, each element decides what to listen to.
     * Here we walk on the stack and each node decides if it needs to start listening.
     * @param nodesStack
     * @returns
     */
    performStartListeningOnNodesStack(nodesStack) {
        // On a default web screen, which is HTML based, each element decides what to record.
        // Here we walk on the stack and each node decides if to record itself
        if (nodesStack.length === 0) {
            return this.returnSuccess("");
        }
        let node = nodesStack.pop();
        this.performStartListeningOnNodeAndStack(node, nodesStack);
    }
    url() {
        return window.location.href;
    }
    screenTitle() {
        return document.title;
    }
    screenName() {
        // By default, the unique Id in web is the url without all the non alphanumeric characters
        return document.title;
    }
    walkOnChildren(parentNode, func) {
        if (!parentNode) {
            log.trace("walkOnChildren but no parentNode");
            return;
        }
        let node = parentNode.firstChild;
        if (!node) {
            log.trace(`no first child for ${parentNode.nodeName}`);
            return;
        }
        if (node)
            do {
                log.trace(`nodeType= ${node.nodeType}`);
                if (node.nodeType === Node.ELEMENT_NODE) {
                    if (!func(node)) {
                        break;
                    }
                }
            } while ((node = node.nextSibling));
    }
    /**
     * Search and retrieve from memory a coverage handler which was set for this node.
     * @param node - the node we looking to find coverage for. The coverage returned can be from any coverage handler class.
     */
    fetchCoverageHandlerFromNode(node) {
        const uniqueId = $(node).data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        if (!uniqueId) {
            return null;
        }
        return this.fetchCoverageHandlerFromUniqueId(uniqueId);
    }
    /**
     * Remove the coverage handler from memory include coverage attribute from element
     * @param node - This coverage handler node
     */
    removeCoverageHandlerFromNode(node) {
        const uniqueId = $(node).data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        if (!uniqueId) {
            return;
        }
        this.deleteCoverageHandlerForUniqueId(uniqueId);
        node.removeAttribute(Constants_1.Constants.JBOT_COVERAGE_HANDLER_ATTR);
    }
    /**
     * Retrieve a unique id from a given node
     * @param node The node we try to retrieve a unique id from
     */
    getUniqueIdOfNode(node) {
        return null;
    }
    /**
     * This method gets a node and returns it's coverageHandler.
     * @param node - the node to get it's coverage handler
     * @returns the suitable coverageHandler.
     */
    getCoverageHandlerForNode(node) {
        let coverageHandler = this.fetchCoverageHandlerFromNode(node);
        if (coverageHandler) {
            return coverageHandler;
        }
        // Need to try get it from type and factory
        // Get the node type (web type)
        let result = this.getCoverageHandlerByNode(node);
        if (!result.success) {
            return null;
        }
        coverageHandler = result.data.coverageHandler;
        coverageHandler.setNode(node);
        const uniqueId = $(node).data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY);
        coverageHandler.saveCoverageHandlerForUniqueId(uniqueId);
        node.setAttribute(Constants_1.Constants.JBOT_COVERAGE_HANDLER_ATTR, "");
        return coverageHandler;
    }
    /**
     * This method gets a HTMLElement and HTMLElement array and starts the recording process on the
     * nodes in the array.
     * @param node -
     * @param nodesStack
     * @returns true
     */
    performStartRecordingOnNodeAndStack(node, nodesStack) {
        // We have a stack of nodes which we should perform recording on it.
        // Prepare node for recording. Need to find the coverage handler for this node to execute it.
        let coverageHandler = this.getCoverageHandlerForNode(node);
        coverageHandler.performStartRecordingOnNodesStack(nodesStack);
        return true;
    }
    /**
     * This method gets a HTMLElement and HTMLElement array and starts the listening process on the
     * nodes in the array.
     * @param node
     * @param nodesStack
     * @returns
     */
    performStartListeningOnNodeAndStack(node, nodesStack) {
        // We have a stack of nodes which we should perform recording on it.
        // Prepare node for recording. Need to find the coverage handler for this node to execute it.
        let coverageHandler = this.getCoverageHandlerForNode(node);
        coverageHandler.createRepositoryIfNotExists();
        coverageHandler.performStartListeningOnNodesStack(nodesStack);
        return true;
    }
    performStartCapturingOnNode(node) {
        // Prepare node to be captured. Need to find the coverage handler for this node to execute it.
        // Let the coverage prepare for the capture
        let coverageHandler = this.getCoverageHandlerForNode(node);
        if (coverageHandler instanceof WebControlCoverageHandler_1.default) {
            coverageHandler.performStartCapturing();
        }
        else if (coverageHandler instanceof WebScreenCoverageHandler) {
            this.walkOnChildren(node, (childNode) => {
                return coverageHandler.performStartCapturingOnNode(childNode);
            });
        }
        // Return code is important to continue the walking on children
        return true;
    }
    createElementRepositoryNode() {
        let elementNode = super.createElementRepositoryNode();
        elementNode.id = this.uniqueId;
        elementNode.config.url = this.url();
        elementNode.config.fields = []; // Web elements can have multiple fields.
        const field = { selector: "$(document.body)" };
        elementNode.config.fields.push(field);
        elementNode.name = this.screenName();
        return elementNode;
    }
    /**
     * This method validates if the screen and the controls under it exist during execution.
     * @param elementPath - the path of te element to validate
     * @param lAction - the action to execute
     * @returns a GenericResult struct
     */
    async validateScreenAndControls(elementPath, lAction) {
        // Wait for the screen
        let result = this.validateScreen();
        if (!result.success)
            return result;
        // Now validate that the controls (if exist in the path) exists. If not, we will need to wait and try again.
        let elementPathCurrentIndex = elementPath.currentIndex;
        result = await this.execLastNodeOnScreenAsync(elementPath, lAction, true);
        // Restore element path before return or rerun
        elementPath.currentIndex = elementPathCurrentIndex;
        return result;
    }
}
exports["default"] = WebScreenCoverageHandler;
//# sourceMappingURL=WebScreenCoverageHandler.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/Model/ApplicationContext.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/Model/ApplicationContext.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const CoverageHandlerCreator_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const log = Log4jConfig_1.logFactory.getLogger("WebCoverageHandlerCreator");
/**
 * Application context holds set of property to coverage an application
 */
class ApplicationContext {
    /**
     *
     */
    constructor(logger) {
        this.logger = logger;
    }
    /**
     * Create application coverage handler globally
     */
    createAppObject() {
        log.debug(`initializing  ${this.applicationName} application`);
        // Create the app object for this page using the factory function
        try {
            (0, CoverageHandlerCreator_1.setLogger)(this.logger, this.applicationName);
            // Create the repository handler.
            //in iframe we don't have appRepositoryNode
            (0, CoverageHandlerCreator_1.createRepositoryHandler)(JSON.stringify(this.appRepositoryNode));
            // Create the platform driver object which is the intermediate between the repository and this module
            // The parameter is a function here that provides the call back from the repository
            (0, CoverageHandlerCreator_1.createPlatformDriver)(this);
            //Application Data - Dynamic attribute
            (0, CoverageHandlerCreator_1.createApplicationData)(this.applicationData);
            // Finally can create the application coverage handler
            (0, CoverageHandlerCreator_1.createApplicationCoverageHandler)();
        }
        catch (e) {
            log.error("Exception when creating app:", e);
        }
    }
}
exports["default"] = ApplicationContext;
//# sourceMappingURL=ApplicationContext.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/Model/Constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/Model/Constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Constants = exports.BaseConstants = void 0;
var Constants_1 = __webpack_require__(/*! @jacada-jbot/base/include/Model/Constants */ "./node_modules/@jacada-jbot/base/include/Model/Constants.js");
Object.defineProperty(exports, "BaseConstants", ({ enumerable: true, get: function () { return Constants_1.Constants; } }));
// export BaseConstants;
exports.Constants = {
    /**
     * uniqueId represents a unique id for a coverageHandler and it is used for events.
     */
    JBOT_UNIQUE_ID_KEY: "uniqueId",
    /**
     * This attribute indicates that this element has a Coverage handler per the attribute value in applicationData.
     */
    JBOT_COVERAGE_HANDLER_ATTR: "jbot_coverage_handler",
    /**
     * this attr is to mark the elements that are registered on events on specific coverage
     */
    JBOT_REGISTERED_ATTR: "jbot_registered",
    /**
     * this attribute used to hold an guid that represent commination between main frame and frame via extension
     */
    ATTR_FRAME_GUID: "JBOT_FRAME_GUID",
    JBOT_ATTR_PREFIX: "jbot_",
    /**
     * This element can be highlighted
     */
    JBOT_HIGHLIGHT_ATTR_ID: "jbot_highlight_id",
    /**
     *  Attribute on the current highlighted element
    */
    ELEMENT_IS_CURRENTLY_HIGHLIGHTED: "jbot_currently_highlighted",
    EVENT_OVERLAY_CLICKED: "overlayClicked",
    IS_PREVENT_CLICK_ON_ELEMENT: "isPreventClickOnElement",
    EVENT_CAPTURE_MOUSE: "CaptureMouseEvent",
    PARENT_ID: "___parent___",
    LABELS_TOPIC: "Labels",
};
//# sourceMappingURL=Constants.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/Model/WebHighlightElementData.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/Model/WebHighlightElementData.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class WebHighlightElementData {
    constructor(coverageHandler, $elem, captureCallback) {
        this.coverageHandler = coverageHandler;
        this.$elem = $elem;
        this.captureCallback = captureCallback;
    }
}
exports["default"] = WebHighlightElementData;
//# sourceMappingURL=WebHighlightElementData.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/ChromePlatformDriver.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/PlatformDrivers/ChromePlatformDriver.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MESSAGE_TREE_CHANGED = void 0;
const PlatformDriver_1 = __webpack_require__(/*! @jacada-jbot/base/include/PlatformDrivers/PlatformDriver */ "./node_modules/@jacada-jbot/base/include/PlatformDrivers/PlatformDriver.js");
const FrameWebControlCoverageHandler_1 = __webpack_require__(/*! ../CoverageHandlers/Web/FrameWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/FrameWebControlCoverageHandler.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const OutboundHandlersFactory_1 = __webpack_require__(/*! ./OutboundHandlersFactory */ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/OutboundHandlersFactory.js");
const log = Log4jConfig_1.logFactory.getLogger("ChromePlatformDriver");
const MESSAGE_CREATE_SNAPSHOT = "createSnapshot";
const MESSAGE_RECORDED_ELEMENT = "recordedElement";
exports.MESSAGE_TREE_CHANGED = "treeChanged";
const MESSAGE_CAPTURED_ELEMENT = "capturedElement";
/**
 * A platform driver for chrome browser which represent
 * layer between coverage handler to chrome extension includes support of iFrames
 */
class ChromePlatformDriver extends PlatformDriver_1.default {
    constructor(applicationContext) {
        super();
        this.applicationContext = applicationContext;
        this.outboundHandlersFactory = new OutboundHandlersFactory_1.default(applicationContext);
        // Prepare ourselves to receive messages
        this.registerForFrameMessages();
        // Create ids for all our iFrames and sync them with their children.
        this.syncFrameIds();
    }
    /**
     * Sends updated repository tree to extension
     * @remark in case we are inside iFrame send a post message that to parent window
     * @param repositoryHandler
     */
    reportTreeChanged(repositoryHandler) {
        log.trace(`ReportTreeChanged: Respiratory tree is: ${JSON.stringify(repositoryHandler._repository.tree)}`);
        this.applicationContext.appRepositoryNode = repositoryHandler._repository.tree;
        if (this.isFrame()) {
            let frameGuid = this.applicationContext.myFrameGuid;
            let applicationHandlerNode = repositoryHandler.applicationHandler().currentNode;
            if (frameGuid) {
                window.parent.postMessage({
                    message: exports.MESSAGE_TREE_CHANGED,
                    frameGuid: frameGuid,
                    applicationHandlerNode: applicationHandlerNode
                }, "*");
            }
        }
        else {
            log.debug('Sending tree to background');
            chrome.runtime.sendMessage({
                service: "treeChanged",
                tree: repositoryHandler._repository.tree
            });
        }
    }
    /**
     * Send a captured element to chrome extension
     *
     * Note: in case we are inside iFrame send a post message to parent window
     * @param pathId path to element
     * @param snapshot screen snapshot
     * @param coordinates element's coordinates
     */
    reportCapturedTable(pathId, fieldsPathIds, snapshot, coordinates) {
        log.debug(`Reporting captured table. Path ${pathId}`);
        // If we are a frame, we need to continue at the parent
        if (this.isFrame()) {
            log.debug("reportCapturedElement: Goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_CAPTURED_TABLE_MESSAGE,
                    frameGuid: frameGuid,
                    pathId: pathId,
                    fieldsPathIds: fieldsPathIds,
                    snapshot: snapshot,
                    coordinates: coordinates
                }, "*");
            }
            else {
                log.error("Error: In frame but no guid");
            }
            return false; // We are a frame. Not finished yet
        }
        else {
            // We are the top - report to extension
            chrome.runtime.sendMessage({
                service: "capturedTable",
                pathId: pathId,
                fieldsPathIds: fieldsPathIds,
                snapshot: snapshot,
                coordinates: coordinates
            });
            return true; // We are the top. Reporting completed
        }
    }
    /**
     * @returns true if current window is an iFrame otherwise false
     */
    isFrame() {
        return window.parent !== window;
    }
    /**
     * In case we have iFrames below us, we will receive capture events from it to here
     */
    registerForFrameMessages() {
        window.addEventListener("message", this.frameMessages.bind(this), false);
    }
    /**
     * window's messages event handler
     * @param event
     */
    frameMessages(event) {
        var data = event.data;
        if (!data)
            return;
        log.debug(`frameMessages: Message is:${data.message}`);
        let handler = this.outboundHandlersFactory[data.message];
        if (typeof handler !== "function") {
            log.error(`Could not find handler for ${data.message}`);
            return;
        }
        handler(data);
    }
    /**
     * Send a recorded step to chrome extension
     * @remark in case we are inside iFrame send a post message to parent window
     * @param logicalAction action name such a click and its data if it exists
     * @param pathId path to element
     * @param snapshot screen snapshot
     * @param coordinates element coordinates
     */
    reportRecordedStep(logicalAction, pathId, snapshot, coordinates) {
        log.debug(`PlatformDriver: Reporting recording step on: ${pathId}`);
        log.debug(`Action: ${logicalAction.actionName}`);
        log.debug(`Action value: ${JSON.stringify(logicalAction.value)}`);
        if (this.isFrame()) {
            log.debug("reportRecordedStep: goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_RECORDED_ELEMENT_MESSAGE,
                    frameGuid: frameGuid,
                    logicalAction: logicalAction.toJSON(),
                    pathId: pathId,
                    snapshot: snapshot,
                    coordinates: coordinates
                }, "*");
            }
            else {
                log.error("In frame but no guid");
            }
        }
        else {
            chrome.runtime.sendMessage({
                service: "recordedElement",
                logicalAction: JSON.stringify(logicalAction),
                pathId: pathId,
                snapshot: snapshot,
                coordinates: coordinates
            });
        }
    }
    /**
     * Send a message to extension to perform active tab snapshot
     * @param responseCallback a callback function is called when the snapshot is ready
     */
    createSnapshot(responseCallback) {
        log.debug("Send request to create snapshot.");
        chrome.runtime.sendMessage({
            service: MESSAGE_CREATE_SNAPSHOT
        }, responseCallback);
    }
    /**
     * Send a captured element to chrome extension
     * @remark in case we are inside iFrame send a post message to parent window
     * @param pathId path to element
     * @param snapshot screen snapshot
     * @param coordinates element's coordinates
     */
    reportCapturedElement(pathId, snapshot, coordinates) {
        log.debug(`Reporting captured element. Path ${pathId}`);
        // If we are a frame, we need to continue at the parent
        if (this.isFrame()) {
            log.debug("reportCapturedElement: Goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_CAPTURED_ELEMENT_MESSAGE,
                    frameGuid: frameGuid,
                    pathId: pathId,
                    snapshot: snapshot,
                    coordinates: coordinates
                }, "*");
            }
            else {
                log.error("Error: In frame but no guid");
            }
            return false; // We are a frame. Not finished yet
        }
        else {
            // We are the top - report to extension
            chrome.runtime.sendMessage({
                service: "capturedElement",
                pathId: pathId,
                snapshot: snapshot,
                coordinates: coordinates
            });
            return true; // We are the top. Reporting completed
        }
    }
    /**
     * Request for specific iFrame to start record
     * @param frameGuid iFrame's unique id
     */
    startRecordingOnFrame(frameGuid) {
        log.debug(`Start recording on frame ${frameGuid}`);
        let handler = this.outboundHandlersFactory.getHandler("startRecordingOnFrame");
        if (!handler) {
            log.error(`Could not find handler for startRecordingOnFrame`);
            return;
        }
        handler({ frameGuid: frameGuid });
    }
    /**
     * Request for specific iFrame to start listening
     * @param frameGuid iFrame's unique id
     * @param listeningInfo listening information
     */
    startListeningOnFrame(frameGuid, listeningInfo) {
        log.debug(`Start listening on frame ${frameGuid}`);
        let handler = this.outboundHandlersFactory.getHandler("startListeningOnFrame");
        if (!handler) {
            log.error(`Could not find handler for startListeningOnFrame`);
            return;
        }
        handler({ frameGuid: frameGuid, listeningInfo: listeningInfo });
    }
    /**
     * Request for specific iFrame to stop listening
     * @param frameGuid iFrame's unique id
     */
    stopListeningOnFrame(frameGuid) {
        log.debug(`Start listening on frame ${frameGuid}`);
        let handler = this.outboundHandlersFactory.getHandler(ChromePlatformDriver.MESSAGE_STOP_LISTENING_ON_FRAME);
        if (!handler) {
            log.error(`Could not find handler for startListeningOnFrame`);
            return;
        }
        handler({ frameGuid: frameGuid });
    }
    /**
     * Request for specific iFrame to start capturing
     * @param frameGuid iFrame's unique id
     * @returns
     */
    startCaptureOnFrame(frameGuid) {
        log.debug(`Start capturing on frame ${frameGuid}`);
        let handler = this.outboundHandlersFactory.getHandler("startCaptureOnFrame");
        if (!handler) {
            log.error(`Could not find handler for startCaptureOnFrame`);
            return;
        }
        handler({ frameGuid: frameGuid });
    }
    /**
     * Search and synchronize iFrames elements
     */
    syncFrameIds() {
        // Sync all iFrames with their content.
        let $iFrames = $('iframe,frame');
        log.debug(`syncFrameIds: Found ${$iFrames.length} iFrames`);
        $($iFrames).each((_index, iframe) => {
            FrameWebControlCoverageHandler_1.default.synchIdToContent(iframe);
        });
    }
    /**
     * Execution has completed in iFrame notify parent window
     */
    execOnFrameCompleted(result) {
        log.debug(`execOnFrameCompleted. Success ${result}`);
        // Notify parent about this completed
        if (!this.isFrame()) {
            log.error("PlatformDriver: Suppose to be a frame but we are not...");
            return;
        }
        log.debug("Platform Driver goes to parent");
        let frameGuid = this.applicationContext.myFrameGuid;
        if (frameGuid) {
            window.parent.postMessage({
                message: ChromePlatformDriver.FRAME_EXEC_NODE_ON_SCREEN_COMPLETED_MESSAGE,
                frameGuid: frameGuid,
                result: result
            }, "*");
        }
    }
    /**
     * Send a message to chrome extension that trigger was fired
     * @remark in case we are inside iFrame send a post message to parent window
     * @param pathId path of element that fire the trigger
     * @param trigger name of the trigger
     */
    reportTriggerFired(pathId, trigger) {
        log.debug(`Reporting trigger fired: path id - ${pathId} , trigger name - ${trigger}`);
        if (this.isFrame()) {
            log.debug("Platform Driver goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_TRIGGER_FIRED_MESSAGE,
                    frameGuid: frameGuid,
                    pathId: pathId,
                    trigger: trigger
                }, "*");
            }
        }
        else {
            chrome.runtime.sendMessage({
                service: "triggerFired",
                pathId: pathId,
                trigger: trigger
            });
        }
        return true;
    }
    /**
     * Send a message to chrome extension that attribute/value has changed
     * @remark in case we are inside iFrame send a post message to parent window
     * @param pathId path of element that fire the trigger
     * @param attribute name of the trigger
     * @param newValue new value of attribute
     */
    reportChangedElement(pathId, attribute, newValue) {
        log.debug(`Reporting changed element: path id - ${pathId} , attribute - ${attribute} , new value - ${newValue}`);
        if (this.isFrame()) {
            log.debug("Platform Driver goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_LISTENED_ELEMENT_MESSAGE,
                    frameGuid: frameGuid,
                    pathId: pathId,
                    attribute: attribute,
                    newValue: newValue
                }, "*");
            }
        }
        else {
            chrome.runtime.sendMessage({
                service: "changedElement",
                pathId: pathId,
                attribute: attribute,
                newValue: newValue
            });
        }
        return true;
    }
    /**
     * Perform an action on element(pathId) in specific iFrame
     * @param guid iFrame's unique id
     * @param pathId element path
     * @param executionLogicalAction action's information
     * @param validateOnly if true just verify that element exists on the current screen without perform any action otherwise perform an action
     */
    execNextNodeOnScreenOnFrame(guid, pathId, executionLogicalAction, validateOnly) {
        // Need to execute the action on the pathId in the frame identified by guid
        log.debug(`PlatformDriver: Need to execute the action ${executionLogicalAction.actionName} on the pathId ${pathId} in the frame ${guid} `);
        // Running from top frame to low, we perform execution (on pathId and lAction). The IFrame is now asking us to continue it on the Frame.
        // We use background for it
        chrome.runtime.sendMessage({
            service: "execNextNodeOnScreenOnFrame",
            frameGuid: guid,
            pathId: pathId,
            executionLogicalAction: executionLogicalAction,
            validateOnly: validateOnly
        });
    }
}
exports["default"] = ChromePlatformDriver;
ChromePlatformDriver.MESSAGE_START_LISTENING_ON_CHANGES_IN_FRAME = "startListeningOnChangesInFrame";
ChromePlatformDriver.MESSAGE_STOP_LISTENING_ON_FRAME = "stopListeningOnFrame";
ChromePlatformDriver.FRAME_EXEC_NODE_ON_SCREEN_COMPLETED_MESSAGE = "frameExecutedNodeOnScreenCompleted";
ChromePlatformDriver.FRAME_CAPTURED_ELEMENT_MESSAGE = "frameCapturedElement";
ChromePlatformDriver.FRAME_CAPTURED_TABLE_MESSAGE = "frameCapturedTable";
ChromePlatformDriver.FRAME_RECORDED_ELEMENT_MESSAGE = "frameRecordedElement";
ChromePlatformDriver.FRAME_LISTENED_ELEMENT_MESSAGE = "frameListenedElement";
ChromePlatformDriver.FRAME_TREE_CHANGED_MESSAGE = "treeChanged";
ChromePlatformDriver.FRAME_TRIGGER_FIRED_MESSAGE = "frameTriggerFired";
ChromePlatformDriver.REGISTER_FRAME_MESSAGE = "registerFrame";
ChromePlatformDriver.SYNC_FRAME_IDS_MESSAGE = "syncFrameIds";
//# sourceMappingURL=ChromePlatformDriver.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/InboundHandlersFactory.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/PlatformDrivers/InboundHandlersFactory.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const CoverageHandlerCreator_1 = __webpack_require__(/*! @jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator */ "./node_modules/@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator.js");
const ChromePlatformDriver_1 = __webpack_require__(/*! ./ChromePlatformDriver */ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/ChromePlatformDriver.js");
const FrameWebControlCoverageHandler_1 = __webpack_require__(/*! ../CoverageHandlers/Web/FrameWebControlCoverageHandler */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/FrameWebControlCoverageHandler.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const log = Log4jConfig_1.logFactory.getLogger("InboundHandlersFactory");
/**
 * This class handles messages that sent from extension
 */
class InboundHandlersFactory {
    constructor(applicationContext) {
        this.applicationContext = applicationContext;
        /**
         * Chrome extension message event handler
         * @param request message from extension
         * @param sender who send this message
         * @param sendResponse callback function
         */
        this.backgroundMessageHandler = (request, sender, sendResponse) => {
            log.info(`JBot receive: ${request.message}`);
            log.debug(`Request is: ${JSON.stringify(request)}`);
            let handler = this.getHandler(request.message);
            if (!handler) {
                log.error(`Could not find handler for ${request.message}`);
                return;
            }
            if (sendResponse) {
                sendResponse(handler(request));
            }
            else {
                handler(request);
            }
        };
        /**
         * init message handler creates an application object
         * @param request message data: repository, application data, application name and iFrame guid (if exists)
         */
        this.init = (request) => {
            this.applicationContext.appRepositoryNode = request.repositoryNode;
            this.applicationContext.myFrameGuid = request.frameGuid;
            this.applicationContext.applicationData = request.applicationData == undefined ? "{}" : request.applicationData;
            this.applicationContext.applicationName = request.applicationName;
            this.applicationContext.createAppObject();
            this.applicationContext.currentApp = (0, CoverageHandlerCreator_1.getApplicationCoverageHandler)();
            FrameWebControlCoverageHandler_1.default.searchSubApplicationsInRepository(this.applicationContext.currentApp);
        };
        /**
         * Request from current application to start record
         * @param request
         */
        this.startRecording = (request) => {
            this.applicationContext.currentApp.startRecording();
        };
        /**
         * Request from current application to stop record
         * @param request
         */
        this.stopRecording = (request) => {
            this.applicationContext.currentApp.stopRecording();
        };
        /**
         * Request from current application to start capture
         * @param request
         */
        this.startCapturing = (request) => {
            this.applicationContext.currentApp.startCapturing();
        };
        /**
         * Request from current application to stop capture
         * @param request
         */
        this.stopCapturing = (request) => {
            this.applicationContext.currentApp.stopCapturing();
        };
        /**
         * Execution is done first by validation
         * Validate screen and the control for the path
         * @param request
         */
        this.validateElementPath = (request) => {
            let execObj = this.createExecObject(request);
            if (!execObj) {
                return;
            }
            let elementPath = execObj.elementPath;
            let promise = this.applicationContext.currentApp.validateElementPath(elementPath, execObj.executionLogicalAction);
            promise
                .then(function (data) {
                log.debug(`ValidateElementPath result: ${JSON.stringify(data)}`);
                if (this.applicationContext.myFrameGuid) {
                    // We are a frame. Need to notify parent through the driver.
                    let platformDriver = (0, CoverageHandlerCreator_1.getPlatformDriver)();
                    platformDriver.execOnFrameCompleted(data);
                }
                else {
                    // We are main
                    chrome.runtime.sendMessage({
                        service: "elementFound",
                        elementPath: elementPath,
                        found: data.success ? true : false,
                    });
                }
            }.bind(this))
                .catch(() => {
                chrome.runtime.sendMessage({
                    service: "executeActionCompleted",
                    elementPath: elementPath,
                    status: "Failure executing the action",
                });
            });
        };
        /**
         * Execute action asynchronously. After validation that we are in the right place
         * @param request
         */
        this.executeAction = (request) => {
            let execObj = this.createExecObject(request);
            if (!execObj) {
                return;
            }
            let elementPath = execObj.elementPath;
            log.debug(`Execute action path: ' ${elementPath}' on: ${JSON.stringify(request.executionLogicalAction)}`);
            let promise = this.applicationContext.currentApp.executeActionAsync(elementPath, execObj.executionLogicalAction);
            promise
                .then((result) => {
                log.debug(`Execute action result: ${JSON.stringify(result)}`);
                if (this.applicationContext.myFrameGuid) {
                    // We are a frame. Need to notify parent through the driver.
                    let platformDriver = (0, CoverageHandlerCreator_1.getPlatformDriver)();
                    platformDriver.execOnFrameCompleted(result);
                }
                else {
                    // We are main
                    if (result.success) {
                        chrome.runtime.sendMessage({
                            service: "executeActionCompleted",
                            elementPath: elementPath,
                            data: result.data,
                            status: "Success",
                        });
                    }
                    else {
                        chrome.runtime.sendMessage({
                            service: "executeActionCompleted",
                            elementPath: elementPath,
                            status: "Failure executing the action",
                            data: result.data,
                        });
                    }
                }
            })
                .catch((reason) => {
                chrome.runtime.sendMessage({
                    service: "executeActionCompleted",
                    elementPath: elementPath,
                    status: "Failure executing the action",
                    data: reason,
                });
            });
        };
        /**
         * Start listening on top level frame
         * @param request.listeningInfo Elements to listen to
         */
        this.startListening = (request) => {
            let listeningInfo = request.listeningInfo;
            this.applicationContext.currentApp.setListeningInfo(listeningInfo);
            this.applicationContext.currentApp.startListening();
        };
        /**
         *  Start listening on specific element at specific frame
         * @param request.listeningInfo Element to listen to
         */
        this.startListeningElementOnFrame = (request) => {
            this.applicationContext.currentApp.startListeningOnFrameElement(request.listeningInfo);
        };
        /**
         * This method let Background script know that this coverage handler is already loaded
         */
        this.isCoverageLoaded = (request) => {
            return true;
        };
        /**
         * Start listening on changes (mutation observer) in frame
         */
        this.startListeningOnChangesInFrame = () => {
            this.applicationContext.currentApp.startListeningOnFrame();
        };
        /**
         * Stop listening in all frames
         */
        this.stopListening = () => {
            this.applicationContext.currentApp.stopListening();
            this.applicationContext.currentApp.setListeningInfo([]);
        };
        /**
         * Notify application that page has opened -
         * @param request
         */
        this.pageOpened = (request) => {
            this.applicationContext.currentApp.pageOpened();
        };
        /**
         * Update repository tree when we have multiple tabs application during recording/capturing
         * @param request
         */
        this.treeUpdated = (request) => {
            // Need to merge the new things in the tree with the current tree
            if (this.applicationContext.currentApp.repositoryHandler._repository.tree) {
                this.mergeRepositoryObject(this.applicationContext.currentApp.repositoryHandler._repository.tree, request.repositoryNode);
            }
            else {
                this.applicationContext.currentApp.repositoryHandler._repository.tree = request.repositoryNode;
            }
            this.applicationContext.appRepositoryNode = this.applicationContext.currentApp.repositoryHandler._repository.tree;
            // todo - how we handle iFrames? Consult with Lior
        };
        /**
         * We currently DO NOT support multiple instances therefore it must be the same instance
         * @param request
         * @returns true
         */
        this.isSameInstance = (request) => {
            // We currently DO NOT support multiple instances therefore it must be the same instance
            let response = {
                isSameInstance: true,
            };
            return response;
        };
        this.mergeRepositoryObject = (targetNode, sourceNode) => {
            // Why we merge and not just copy ? Because current coverage handler controls are pointing into the repository
            // Please note: We ONLY ADD ELEMENTS. We do not merge them
            for (let key in sourceNode) {
                let newValue = sourceNode[key];
                if (!targetNode[key]) {
                    // Doesn't Exists in new.
                    targetNode[key] = newValue; // Add it.
                    continue;
                }
                if (Array.isArray(newValue)) {
                    this.mergeRepositoryArray(targetNode[key], newValue);
                }
                else if (newValue instanceof Object) {
                    this.mergeRepositoryObject(targetNode[key], newValue);
                }
                else {
                    targetNode[key] = newValue;
                }
            }
        };
        this.mergeRepositoryArray = (targetNode, sourceNode) => {
            for (let newValue of sourceNode) {
                let newValueId = newValue["id"];
                if (!newValueId) {
                    // Without id we can't compare so just add it
                    targetNode.push(newValue); // Add it.
                    continue;
                }
                // Check if we have in the array and element with the same id. We assume inside arrays we have objects with ids
                let prevValues = targetNode.filter((prevValue) => prevValue["id"] == newValueId);
                if (prevValues.length > 0) {
                    // yes- there is an element with same id. lets merge it
                    let prevValue = prevValues[0];
                    this.mergeRepositoryObject(prevValue, newValue);
                }
                else {
                    // This id doesn't exist - push it
                    targetNode.push(newValue); // Add it.
                    continue;
                }
            }
        };
        this.handlers = {};
        this.setHandlers();
        chrome.runtime.onMessage.addListener(this.backgroundMessageHandler);
    }
    /**
     * Set handler to each message type
     */
    setHandlers() {
        this.handlers["init"] = this.init;
        this.handlers["startRecording"] = this.startRecording;
        this.handlers["stopRecording"] = this.stopRecording;
        this.handlers["startCapturing"] = this.startCapturing;
        this.handlers["stopCapturing"] = this.stopCapturing;
        this.handlers["validateElementPath"] = this.validateElementPath;
        this.handlers["executeAction"] = this.executeAction;
        this.handlers["startListening"] = this.startListening;
        this.handlers["stopListening"] = this.stopListening;
        this.handlers["treeUpdated"] = this.treeUpdated;
        this.handlers["isSameInstance"] = this.isSameInstance;
        this.handlers["startListeningElementOnFrame"] = this.startListeningElementOnFrame;
        this.handlers["isCoverageLoaded"] = this.isCoverageLoaded;
        this.handlers[ChromePlatformDriver_1.default.MESSAGE_START_LISTENING_ON_CHANGES_IN_FRAME] = this.startListeningOnChangesInFrame;
        this.handlers["pageOpened"] = this.pageOpened;
    }
    /**
     * Get a handler by key
     * @param Key message's key
     * @returns handler
     */
    getHandler(Key) {
        return this.handlers[Key];
    }
    /**
     * Covert request into ExecObject
     * @param request
     * @returns
     */
    createExecObject(request) {
        var elementPath = request.elementPath;
        if (!elementPath) {
            log.error("No element path in request");
            return null;
        }
        return {
            elementPath: elementPath,
            executionLogicalAction: request.executionLogicalAction,
        };
    }
}
exports["default"] = InboundHandlersFactory;
//# sourceMappingURL=InboundHandlersFactory.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/OutboundHandlersFactory.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/PlatformDrivers/OutboundHandlersFactory.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const ChromePlatformDriver_1 = __webpack_require__(/*! ./ChromePlatformDriver */ "./node_modules/@jacada-jbot/web/include/PlatformDrivers/ChromePlatformDriver.js");
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
const Constants_1 = __webpack_require__(/*! ../Model/Constants */ "./node_modules/@jacada-jbot/web/include/Model/Constants.js");
const log = Log4jConfig_1.logFactory.getLogger("OutboundHandlersFactory");
/**
 * This class has set of handlers that related to iFrame
 *
 */
class OutboundHandlersFactory {
    constructor(applicationContext) {
        this.applicationContext = applicationContext;
        /**
         * An inner iFrame report that repository tree was changed,
         * dispatch an event to all iFrames  only relevant frame coverage handle will handle it.
         * @param data
         */
        this.treeChanged = (data) => {
            // The frame below found the path. We should add it to our path. Starting from the iFrame command
            log.trace(`treeChanged: iFrame continue to build repository. Data is: ${JSON.stringify(data)}`);
            // Find all the iFrames in the window and dispatch a message to them.
            const frameTreeChangedEvent = new CustomEvent(ChromePlatformDriver_1.MESSAGE_TREE_CHANGED, {
                detail: {
                    frameGuid: data.frameGuid,
                    applicationHandlerNode: data.applicationHandlerNode
                }
            });
            const $frames = $(`[${Constants_1.Constants.ATTR_FRAME_GUID.toLowerCase()} = ${data.frameGuid}]`);
            $frames[0].dispatchEvent(frameTreeChangedEvent);
        };
        /**
         * Recording has reached an iFrame and ask the extension to tell the Frame to start Record.
         * @param data contains frame guid - iFrame's unique id
         */
        this.startRecordingOnFrame = (data) => {
            log.debug(`startRecordingOnFrame: Data is: ${JSON.stringify(data)}`);
            // 
            chrome.runtime.sendMessage({
                service: "startRecordingOnFrame",
                frameGuid: data.frameGuid
            });
        };
        /**
         * Request from extension to stop recording on specific iFrame
         * @param data contains frame guid - iFrame's unique id
         */
        this.stopRecordingOnFrame = (data) => {
            log.debug(`stopRecordingOnFrame: Data is: ${JSON.stringify(data)}`);
            chrome.runtime.sendMessage({
                service: "stopRecordingOnFrame",
                frameGuid: data.frameGuid
            });
        };
        /**
         * Request from extension to start capture on specific iFrame
         * @param data contains frame guid - iFrame's unique id
         */
        this.startCaptureOnFrame = (data) => {
            log.debug(`startCaptureOnFrame: Data is:${JSON.stringify(data)}`);
            // Capture has reached an iFrame and ask the extension to tell the Frame to start Capture.
            chrome.runtime.sendMessage({
                service: "startCaptureOnFrame",
                frameGuid: data.frameGuid
            });
        };
        /**
         * Stop capturing
         * @param data
         */
        this.stopCapturingOnFrame = (data) => {
            log.debug(`stopCapturing: Data is:${JSON.stringify(data)}`);
            this.applicationContext.currentApp.stopCapturing();
        };
        /**
         * Request from extension to start listening on changes on specific iFrame
         * @param data contains frame guid - iFrame's unique id
         */
        this.startListeningOnChangesInFrame = (data) => {
            log.debug(`startListeningOnChangesInFrame: Data is:${JSON.stringify(data)}`);
            chrome.runtime.sendMessage({
                service: ChromePlatformDriver_1.default.MESSAGE_START_LISTENING_ON_CHANGES_IN_FRAME,
                frameGuid: data.frameGuid
            });
        };
        /**
         * Request from extension to start listening according to listening info on specific iFrame
         * @param data contains frame guid - iFrame's unique id  and listening info
         */
        this.startListeningOnFrame = (data) => {
            log.debug(`startListening: Data is:${JSON.stringify(data)}`);
            chrome.runtime.sendMessage({
                service: "startListeningOnFrame",
                frameGuid: data.frameGuid,
                listeningInfo: data.listeningInfo
            });
        };
        /**
         * Request from extension to stop listening on specific iFrame
         * @param data contains frame guid - iFrame's unique id
         */
        this.stopListeningOnFrame = (data) => {
            log.debug(`stopListening" Data is:${JSON.stringify(data)}`);
            chrome.runtime.sendMessage({
                service: "stopListeningOnFrame",
                frameGuid: data.frameGuid
            });
        };
        /**
         * An inner iFrame report that execution has completed,
         * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
         * @param data
         */
        this.frameExecutedNodeOnScreenCompleted = (data) => {
            // The frame below completed execution. We should notify the iFrame 
            log.debug(`iFrame execution completed: Data is:${JSON.stringify(data)}`);
            // Find all the iFrames in the window and dispatch a message to them.
            const executionOnFrameCompletedEvent = new CustomEvent(ChromePlatformDriver_1.default.FRAME_EXEC_NODE_ON_SCREEN_COMPLETED_MESSAGE, {
                detail: {
                    result: data.result,
                    frameGuid: data.frameGuid
                }
            });
            const $frames = $(`[${Constants_1.Constants.ATTR_FRAME_GUID.toLowerCase()} = ${data.frameGuid}]`);
            $frames[0].dispatchEvent(executionOnFrameCompletedEvent);
        };
        /**
         * An inner iFrame report that element has been captured,
         * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
         * @param data
         */
        this.frameCapturedElement = (data) => {
            // The frame below found the path. We should add it to our path. Starting from the iFrame command
            log.trace(`Frame continue to build capture path: Data is:${JSON.stringify(data)}`);
            // Find all the iFrames in the window and dispatch a message to them.
            let frameCapturedEvent = new CustomEvent(ChromePlatformDriver_1.default.FRAME_CAPTURED_ELEMENT_MESSAGE, {
                detail: {
                    pathId: data.pathId,
                    frameGuid: data.frameGuid,
                    snapshot: data.snapshot,
                    coordinates: data.coordinates
                }
            });
            const $frames = $(`[${Constants_1.Constants.ATTR_FRAME_GUID.toLowerCase()} = ${data.frameGuid}]`);
            $frames[0].dispatchEvent(frameCapturedEvent);
        };
        /**
         * An inner iFrame report that table has been captured,
         * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
         * @param data
         */
        this.frameCapturedTable = (data) => {
            // The frame below found the path. We should add it to our path. Starting from the iFrame command
            log.trace(`Frame continue to build capture path: Data is:${JSON.stringify(data)}`);
            // Find all the iFrames in the window and dispatch a message to them.
            const frameCapturedEvent = new CustomEvent(ChromePlatformDriver_1.default.FRAME_CAPTURED_TABLE_MESSAGE, {
                detail: {
                    pathId: data.pathId,
                    fieldsPathIds: data.fieldsPathIds,
                    frameGuid: data.frameGuid,
                    snapshot: data.snapshot,
                    coordinates: data.coordinates
                }
            });
            const $frames = $(`[${Constants_1.Constants.ATTR_FRAME_GUID.toLowerCase()} = ${data.frameGuid}]`);
            $frames[0].dispatchEvent(frameCapturedEvent);
        };
        /**
         * An inner iFrame report that element has been recorded,
         * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
         * @param data
         */
        this.frameRecordedElement = (data) => {
            // The frame below found the path. We should add it to our path. Starting from the iFrame command
            log.trace(`iFrame continue to build recorded path: Data is:${JSON.stringify(data)}`);
            // Find all the iFrames in the window and dispatch a message to them.
            const frameRecordedEvent = new CustomEvent(ChromePlatformDriver_1.default.FRAME_RECORDED_ELEMENT_MESSAGE, {
                detail: {
                    pathId: data.pathId,
                    logicalAction: data.logicalAction,
                    frameGuid: data.frameGuid,
                    snapshot: data.snapshot,
                    coordinates: data.coordinates
                }
            });
            const $frames = $(`[${Constants_1.Constants.ATTR_FRAME_GUID.toLowerCase()} = ${data.frameGuid}]`);
            $frames[0].dispatchEvent(frameRecordedEvent);
        };
        /**
         * An inner iFrame report that attribute/value has changed,
         * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
         * @param data
         */
        this.frameListenedElement = (data) => {
            log.trace(`iFrame continue to bubbling listened element: Data is:${JSON.stringify(data)}`);
            const frameListenedEvent = new CustomEvent(ChromePlatformDriver_1.default.FRAME_LISTENED_ELEMENT_MESSAGE, {
                detail: {
                    frameGuid: data.frameGuid,
                    pathId: data.pathId,
                    attribute: data.attribute,
                    newValue: data.newValue
                }
            });
            const $frames = $(`[${Constants_1.Constants.ATTR_FRAME_GUID.toLowerCase()} = ${data.frameGuid}]`);
            $frames[0].dispatchEvent(frameListenedEvent);
        };
        /**
         * An inner iFrame report that trigger has fired,
         * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
         * @param data
         */
        this.frameTriggerFired = (data) => {
            log.trace(`iFrame continue to fire trigger : Data is:${JSON.stringify(data)}`);
            // Find all the iFrames in the window and dispatch a message to them.
            const frameTriggerFired = new CustomEvent(ChromePlatformDriver_1.default.FRAME_TRIGGER_FIRED_MESSAGE, {
                detail: {
                    frameGuid: data.frameGuid,
                    pathId: data.pathId,
                    trigger: data.trigger
                }
            });
            const $frames = $(`[${Constants_1.Constants.ATTR_FRAME_GUID.toLowerCase()} = ${data.frameGuid}]`);
            $frames[0].dispatchEvent(frameTriggerFired);
        };
        this.handlers = {};
        this.setHandlers();
    }
    /**
     * Set handler to each message type
     */
    setHandlers() {
        this.handlers["startRecordingOnFrame"] = this.startRecordingOnFrame;
        this.handlers["stopRecordingOnFrame"] = this.stopRecordingOnFrame;
        this.handlers["stopCapturingOnFrame"] = this.stopCapturingOnFrame;
        this.handlers["startCaptureOnFrame"] = this.startCaptureOnFrame;
        this.handlers["startListeningOnFrame"] = this.startListeningOnFrame;
        this.handlers[ChromePlatformDriver_1.default.MESSAGE_STOP_LISTENING_ON_FRAME] = this.stopListeningOnFrame;
        this.handlers["treeChanged"] = this.treeChanged;
        this.handlers["frameExecutedNodeOnScreenCompleted"] = this.frameExecutedNodeOnScreenCompleted;
        this.handlers["frameCapturedElement"] = this.frameCapturedElement;
        this.handlers["frameCapturedTable"] = this.frameCapturedTable;
        this.handlers["frameRecordedElement"] = this.frameRecordedElement;
    }
    /**
     * Get a handler by key
     * @param Key message's key
     * @returns handler
     */
    getHandler(Key) {
        return this[Key];
    }
}
exports["default"] = OutboundHandlersFactory;
//# sourceMappingURL=OutboundHandlersFactory.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/Utils/JQueryExtensions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/Utils/JQueryExtensions.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* Jquery extensions  Begin*/
var JQueryExtensionCallbackFunctions = {};

(function ($) {
    $.fn.onNative = function (event_name, id, callback) {
        var $elements = this;
        if (!id){
            id = this.getUniqueId(event_name);
        }
        var iElement;
        for (iElement = 0 ; iElement < $elements.length ; iElement++){
            var elem = $elements[iElement];
            if (elem){
                // console.log("In onNative for event " + event_name);

                var key = id.toString() + "_" + event_name;
                var prevCallback = JQueryExtensionCallbackFunctions[key];
                if (prevCallback) {
                    if (elem.removeEventListener) {
                        elem.removeEventListener(event_name, prevCallback);
                    }
                    else {
                        elem.detachEvent("on" + event_name, prevCallback);
                    }
                }

                JQueryExtensionCallbackFunctions[key] = callback;
                if (elem.addEventListener) {
                    elem.addEventListener(event_name, callback);
                }
                else {
                    elem.attachEvent("on" + event_name, callback);
                }
            }
        }

        return id;
    };
    $.fn.getUniqueId = function(event_name) {
        var id;
        do {
            if (!event_name) event_name = "generic";
            id = Math.random().toString(36).replace(/[^a-z]+/g, '');
        } while (JQueryExtensionCallbackFunctions[id.toString() + "_" + event_name]);
        return id;
    }
}(jQuery));
(function ($) {
    $.fn.offNativeById = function (id) {
        var $elements = this;
        var iElement;
        var keyPrefix = id.toString() + "_";
        for (iElement = 0 ; iElement < $elements.length ; iElement++){
            var elem = $elements[iElement];
            if (elem){
                for (key in JQueryExtensionCallbackFunctions){
                    if (key.startsWith(keyPrefix)){
                        var callback = JQueryExtensionCallbackFunctions[key];
                        var event_name = key.substring (keyPrefix.length);
                        if (elem.removeEventListener) {
                            elem.removeEventListener(event_name, callback);
                        }
                        else {
                            elem.detachEvent("on" + event_name, callback);
                        }
                    }
                }
            }
        }

        // Remove from mapping
        var keysToRemove = [];
        for (key in JQueryExtensionCallbackFunctions){
            if (key.startsWith(keyPrefix)){
                keysToRemove.push(key);
            }
        }
        var iKey = 0;
        for (iKey = 0 ; iKey < keysToRemove.length ; iKey++){
            key = keysToRemove[iKey];
            delete JQueryExtensionCallbackFunctions[key];
        }

    };
    $.fn.offNative = function (event_name, id) {
        var $elements = this;
        var iElement;
        var callback = JQueryExtensionCallbackFunctions[id.toString() + "_" + event_name];
        for (iElement = 0 ; iElement < $elements.length ; iElement++){
            var elem = $elements[iElement];
            if (elem){
                if (elem.removeEventListener) {
                    elem.removeEventListener(event_name, callback);
                }
                else {
                    elem.detachEvent("on" + event_name, callback);
                }
            }
        }
        delete JQueryExtensionCallbackFunctions[id.toString() + "_" + event_name];
    };
    $.fn.hasNative = function (event_name, id) {
        var callback = JQueryExtensionCallbackFunctions[id.toString() + "_" + event_name];
        if (callback){
            return true;
        } else {
            return false;
        }
    };
}(jQuery));

/* Jquery extensions end */


/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/Utils/TypeGuards.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/Utils/TypeGuards.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isWebControl = exports.isControl = exports.isTable = void 0;
function isTable(val) {
    return val && val.getTableRows !== undefined;
}
exports.isTable = isTable;
function isControl(val) {
    return val && val.isListenable !== undefined;
}
exports.isControl = isControl;
function isWebControl(val) {
    return isControl(val) || isTable(val);
}
exports.isWebControl = isWebControl;
//# sourceMappingURL=TypeGuards.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/Utils/WebHighlight.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/Utils/WebHighlight.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

Object.defineProperty(exports, "__esModule", ({ value: true }));
const Log4jConfig_1 = __webpack_require__(/*! @jacada-jbot/base/include/Utils/Log4jConfig */ "./node_modules/@jacada-jbot/base/include/Utils/Log4jConfig.js");
const Constants_1 = __webpack_require__(/*! ../Model/Constants */ "./node_modules/@jacada-jbot/web/include/Model/Constants.js");
const log = Log4jConfig_1.logFactory.getLogger("WebHighlight");
class WebHighlight {
    constructor(screenCoverageHandler, frameColor, ownerDocument = parent.document) {
        this.frameColor = frameColor;
        this.ownerDocument = ownerDocument;
        this.active = false;
        this.screenCoverageHandler = screenCoverageHandler;
        this.ownerDocument = ownerDocument;
        // Get the position type of the body
        let ownerDocumentBody = $(ownerDocument.body);
        this.active = false;
        // If it is relative use the body offset when showing the highlight
        if (ownerDocumentBody.css("position") === "relative") {
            this.bodyOffset = ownerDocumentBody.position();
            if (ownerDocumentBody.css('margin')) {
                this.bodyOffset.top = parseFloat(ownerDocumentBody.css('marginTop'));
                this.bodyOffset.left = parseFloat(ownerDocumentBody.css('marginLeft'));
            }
        }
        else {
            this.bodyOffset = { top: 0, left: 0 };
        }
        this.overlay = this.buildOverlay(frameColor).appendTo(ownerDocumentBody);
    }
    buildOverlay(frameColor) {
        let overlay = $("<div />");
        overlay.prop("class", "jBotHighlighter");
        let self = this;
        overlay.on("click", function () {
            log.debug("Highlighted clicked");
            if (self.target) {
                self.hide();
                let event = new Event(Constants_1.Constants.EVENT_OVERLAY_CLICKED);
                self.target[0].dispatchEvent(event);
            }
        });
        overlay[0].addEventListener("mousemove", function (e) {
            self.emitCaptureMouseEventOnMove(overlay, e);
        });
        overlay[0].addEventListener("mouseleave", function (e) {
            self.emitCaptureMouseEventOnLeave(e);
        });
        overlay.css({
            position: "absolute",
            zIndex: 1000000,
            border: `2px solid ${frameColor}`
        }).hide();
        return overlay;
    }
    emitCaptureMouseEventOnMove(overlay, e) {
        if (!this.active)
            return;
        // If we move on an iFrame, we only allow to click on the border. Therefore if we are not on the border, it'ss ame as leaving.
        if (this.target && (this.target.prop("tagName") === "IFRAME" || this.target.prop("tagName") === "FRAME")) {
            if (e.offsetX > 1 && e.offsetX < this.target.width() - 2 && e.offsetY > 1 && e.offsetY < this.target.height() - 2) {
                // We are in the middle of the frame. Remove it.
                this.screenCoverageHandler.removeHighlightAttribute();
                this.hide();
                return;
            }
        }
        // As we get all the events, we need to omit it to the right control below us. To get it, we need to hide ourselves, find the 
        // control below us and omit a capture event to it.
        overlay.hide();
        let targetControl = document.elementFromPoint(e.clientX, e.clientY);
        if (!targetControl) {
            // Not on element - so on window
            log.debug("Element was not found from point");
        }
        else {
            let $elem = $(targetControl);
            log.debug(`Element was found from point. type is ${targetControl.tagName}`);
            let $prevElem;
            do {
                let key = $elem.attr(Constants_1.Constants.JBOT_HIGHLIGHT_ATTR_ID);
                if (key && key.length > 0) {
                    log.debug(`Element key on move is:${key}`);
                    // Notify window about it
                    let captureEvent = new CustomEvent(Constants_1.Constants.EVENT_CAPTURE_MOUSE, {
                        detail: {
                            key: key,
                            type: "move"
                        }
                    });
                    this.ownerDocument.dispatchEvent(captureEvent);
                    break;
                }
                else {
                    log.debug("No key for element. Go to parent.");
                }
                // Not registered - limbing up to parent
                $prevElem = $elem;
                $elem = $elem.parent();
            } while ($elem && $elem.length > 0 && $prevElem != $elem && !$prevElem.is("body"));
        }
        if (this.active) {
            overlay.show();
        }
    }
    emitCaptureMouseEventOnLeave(e) {
        if (!this.active)
            return;
        // As we get all the events, we need to omit it to the right control below us. To get it, we need to hide ourselves, find the 
        // control below us and omit a capture event to it.
        this.screenCoverageHandler.removeHighlightAttribute();
        this.hide();
        // Now perform the dispatch
        let targetControl = document.elementFromPoint(e.clientX, e.clientY);
        if (targetControl) {
            var captureEvent = new MouseEvent(Constants_1.Constants.EVENT_CAPTURE_MOUSE, {
                clientX: e.clientX,
                clientY: e.clientY,
                screenX: e.pageX,
                screenY: e.pageY
            });
            targetControl.dispatchEvent(captureEvent);
        }
    }
    hideFrameHighlight() {
        if (this.frameElement != null) {
            this.frameElement.css("border-width", this.frameBorderWidth);
            this.frameElement.css("border-style", this.frameBorderStyle);
            this.frameElement.css("border-color", this.frameBorderColor);
            this.frameElement = null;
        }
    }
    show(element) {
        let top, left, width, height;
        if (element) {
            this.target = $(element);
        }
        if (this.target) {
            this.hideFrameHighlight();
            if (this.target.prop("tagName") === "FRAME") {
                this.frameElement = this.target;
                this.frameBorderWidth = this.target.css("border-width");
                this.frameBorderStyle = this.target.css("border-style");
                this.frameBorderColor = this.target.css("border-color");
                this.target.css("border", `2px solid ${this.frameColor}`);
            }
            else {
                let offset = this.target.offset();
                top = offset.top - this.bodyOffset.top;
                left = offset.left - this.bodyOffset.left;
                width = this.target.outerWidth();
                height = this.target.outerHeight();
            }
        }
        else {
            top = 2;
            left = 2;
            width = parent.document.documentElement.clientWidth;
            height = parent.document.documentElement.clientHeight;
        }
        this.active = true;
        this.overlay.css({
            top: top,
            left: left,
            width: width,
            height: height
        }).show();
    }
    ;
    hide() {
        this.active = false;
        this.hideFrameHighlight();
        this.overlay.hide();
    }
    ;
    destroy() {
        this.active = false;
        this.hideFrameHighlight();
        this.overlay.remove();
    }
    ;
    setPreventClickEvent(isPreventClickEvent) {
        this.overlay.css({
            pointerEvents: `${isPreventClickEvent ? "auto" : "none"}`
        });
    }
}
exports["default"] = WebHighlight;
//# sourceMappingURL=WebHighlight.js.map

/***/ }),

/***/ "./node_modules/@jacada-jbot/web/include/Utils/WebLogger.js":
/*!******************************************************************!*\
  !*** ./node_modules/@jacada-jbot/web/include/Utils/WebLogger.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Log4Net style Logger with levels to write into console log
 */
class WebLogger {
    constructor(logLevel) {
        this.logLevel = logLevel;
    }
    Warn(message) {
        console.warn(message);
    }
    Error(message) {
        console.error(message);
    }
    Trace(message) {
        console.debug(message);
    }
    Debug(message) {
        console.debug(message);
    }
    Info(message) {
        console.info(message);
    }
}
exports["default"] = WebLogger;
//# sourceMappingURL=WebLogger.js.map

/***/ }),

/***/ "./node_modules/core-js/es/promise/index.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/es/promise/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.aggregate-error */ "./node_modules/core-js/modules/es.aggregate-error.js");
__webpack_require__(/*! ../../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! ../../modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! ../../modules/es.promise */ "./node_modules/core-js/modules/es.promise.js");
__webpack_require__(/*! ../../modules/es.promise.all-settled */ "./node_modules/core-js/modules/es.promise.all-settled.js");
__webpack_require__(/*! ../../modules/es.promise.any */ "./node_modules/core-js/modules/es.promise.any.js");
__webpack_require__(/*! ../../modules/es.promise.finally */ "./node_modules/core-js/modules/es.promise.finally.js");
__webpack_require__(/*! ../../modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");
var path = __webpack_require__(/*! ../../internals/path */ "./node_modules/core-js/internals/path.js");

module.exports = path.Promise;


/***/ }),

/***/ "./node_modules/core-js/internals/a-callable.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-callable.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "./node_modules/core-js/internals/a-constructor.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/a-constructor.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "./node_modules/core-js/internals/is-constructor.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");

var $TypeError = TypeError;

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a constructor');
};


/***/ }),

/***/ "./node_modules/core-js/internals/a-possible-prototype.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/a-possible-prototype.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var $String = String;
var $TypeError = TypeError;

module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw $TypeError("Can't set " + $String(argument) + ' as a prototype');
};


/***/ }),

/***/ "./node_modules/core-js/internals/add-to-unscopables.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  defineProperty(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-instance.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/an-instance.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");

var $TypeError = TypeError;

module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw $TypeError('Incorrect invocation');
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-includes.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-slice.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/array-slice.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

module.exports = uncurryThis([].slice);


/***/ }),

/***/ "./node_modules/core-js/internals/check-correctness-of-iteration.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es-x/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof-raw.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/classof.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/clear-error-stack.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/clear-error-stack.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

var $Error = Error;
var replace = uncurryThis(''.replace);

var TEST = (function (arg) { return String($Error(arg).stack); })('zxcasd');
var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

module.exports = function (stack, dropEntries) {
  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {
    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
  } return stack;
};


/***/ }),

/***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/correct-prototype-getter.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "./node_modules/core-js/internals/create-iterator-constructor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var IteratorPrototype = (__webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype);
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-non-enumerable-property.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property-descriptor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-built-in.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-built-in.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var makeBuiltIn = __webpack_require__(/*! ../internals/make-built-in */ "./node_modules/core-js/internals/make-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "./node_modules/core-js/internals/define-global-property.js");

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-global-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/define-global-property.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-iterator.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var FunctionName = __webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js");

var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
          defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return call(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
  }
  Iterators[NAME] = defaultIterator;

  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/internals/descriptors.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/document-create-element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/internals/dom-iterables.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/dom-iterables.js ***!
  \*********************************************************/
/***/ ((module) => {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "./node_modules/core-js/internals/dom-token-list-prototype.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/dom-token-list-prototype.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-browser.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-browser.js ***!
  \*************************************************************/
/***/ ((module) => {

module.exports = typeof window == 'object' && typeof Deno != 'object';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-deno.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-deno.js ***!
  \**********************************************************/
/***/ ((module) => {

/* global Deno -- Deno case */
module.exports = typeof Deno == 'object' && Deno && typeof Deno.version == 'object';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-ios-pebble.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-ios-pebble.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = /ipad|iphone|ipod/i.test(userAgent) && global.Pebble !== undefined;


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-ios.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-ios.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-node.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-node.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = classof(global.process) == 'process';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-webos-webkit.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-webos-webkit.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

module.exports = /web0s(?!.*chrome)/i.test(userAgent);


/***/ }),

/***/ "./node_modules/core-js/internals/engine-user-agent.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-user-agent.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-v8-version.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-v8-version.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ "./node_modules/core-js/internals/enum-bug-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
/***/ ((module) => {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "./node_modules/core-js/internals/error-stack-installable.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/error-stack-installable.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = !fails(function () {
  var error = Error('a');
  if (!('stack' in error)) return true;
  // eslint-disable-next-line es-x/no-object-defineproperty -- safe
  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
  return error.stack !== 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/export.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "./node_modules/core-js/internals/define-global-property.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fails.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-apply.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/function-apply.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;

// eslint-disable-next-line es-x/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});


/***/ }),

/***/ "./node_modules/core-js/internals/function-bind-context.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-bind-context.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-bind-native.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-bind-native.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ "./node_modules/core-js/internals/function-call.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/function-call.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-name.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/function-name.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-uncurry-this.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-uncurry-this.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var uncurryThis = NATIVE_BIND && bind.bind(call, call);

module.exports = NATIVE_BIND ? function (fn) {
  return fn && uncurryThis(fn);
} : function (fn) {
  return fn && function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-built-in.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-iterator-method.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-iterator.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");

var $TypeError = TypeError;

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw $TypeError(tryToString(argument) + ' is not iterable');
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-method.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/get-method.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};


/***/ }),

/***/ "./node_modules/core-js/internals/global.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es-x/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ "./node_modules/core-js/internals/has-own-property.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/has-own-property.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es-x/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ "./node_modules/core-js/internals/hidden-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
/***/ ((module) => {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/host-report-errors.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/host-report-errors.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length == 1 ? console.error(a) : console.error(a, b);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/html.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/html.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "./node_modules/core-js/internals/ie8-dom-define.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/indexed-object.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : $Object(it);
} : $Object;


/***/ }),

/***/ "./node_modules/core-js/internals/inspect-source.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/inspect-source.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "./node_modules/core-js/internals/install-error-cause.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/install-error-cause.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");

// `InstallErrorCause` abstract operation
// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
module.exports = function (O, options) {
  if (isObject(options) && 'cause' in options) {
    createNonEnumerableProperty(O, 'cause', options.cause);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/internal-state.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var shared = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = uncurryThis(store.get);
  var wmhas = uncurryThis(store.has);
  var wmset = uncurryThis(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-array-iterator-method.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/is-callable.js ***!
  \*******************************************************/
/***/ ((module) => {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-constructor.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/is-constructor.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;


/***/ }),

/***/ "./node_modules/core-js/internals/is-forced.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "./node_modules/core-js/internals/is-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-pure.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
/***/ ((module) => {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/internals/is-symbol.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-symbol.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js");

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterate.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/iterate.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "./node_modules/core-js/internals/get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");
var iteratorClose = __webpack_require__(/*! ../internals/iterator-close */ "./node_modules/core-js/internals/iterator-close.js");

var $TypeError = TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_RECORD = !!(options && options.IS_RECORD);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_RECORD) {
    iterator = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw $TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = IS_RECORD ? iterable.next : iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterator-close.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterator-close.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators-core.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterators-core.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es-x/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) {
  defineBuiltIn(IteratorPrototype, ITERATOR, function () {
    return this;
  });
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/iterators.js ***!
  \*****************************************************/
/***/ ((module) => {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/length-of-array-like.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/length-of-array-like.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/make-built-in.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/make-built-in.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").CONFIGURABLE);
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (String(name).slice(0, 7) === 'Symbol(') {
    name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');


/***/ }),

/***/ "./node_modules/core-js/internals/math-trunc.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/math-trunc.js ***!
  \******************************************************/
/***/ ((module) => {

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es-x/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};


/***/ }),

/***/ "./node_modules/core-js/internals/microtask.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/microtask.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var macrotask = (__webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set);
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "./node_modules/core-js/internals/engine-is-ios.js");
var IS_IOS_PEBBLE = __webpack_require__(/*! ../internals/engine-is-ios-pebble */ "./node_modules/core-js/internals/engine-is-ios-pebble.js");
var IS_WEBOS_WEBKIT = __webpack_require__(/*! ../internals/engine-is-webos-webkit */ "./node_modules/core-js/internals/engine-is-webos-webkit.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = bind(promise.then, promise);
    notify = function () {
      then(flush);
    };
  // Node.js without promises
  } else if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessage
  // - onreadystatechange
  // - setTimeout
  } else {
    // strange IE + webpack dev server bug - use .bind(global)
    macrotask = bind(macrotask, global);
    notify = function () {
      macrotask(flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};


/***/ }),

/***/ "./node_modules/core-js/internals/native-symbol.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es-x/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "./node_modules/core-js/internals/native-weak-map.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "./node_modules/core-js/internals/new-promise-capability.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/new-promise-capability.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "./node_modules/core-js/internals/normalize-string-argument.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/normalize-string-argument.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");

module.exports = function (argument, $default) {
  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-create.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-create.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var definePropertiesModule = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es-x/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-properties.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(/*! ../internals/v8-prototype-define-bug */ "./node_modules/core-js/internals/v8-prototype-define-bug.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es-x/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(/*! ../internals/v8-prototype-define-bug */ "./node_modules/core-js/internals/v8-prototype-define-bug.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");

var $TypeError = TypeError;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");

// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js");

var IE_PROTO = sharedKey('IE_PROTO');
var $Object = Object;
var ObjectPrototype = $Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es-x/no-object-getprototypeof -- safe
module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof $Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-is-prototype-of.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-is-prototype-of.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys-internal.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var indexOf = (__webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js").indexOf);
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es-x/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/internals/object-set-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable no-proto -- safe */
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var aPossiblePrototype = __webpack_require__(/*! ../internals/a-possible-prototype */ "./node_modules/core-js/internals/a-possible-prototype.js");

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es-x/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "./node_modules/core-js/internals/object-to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/object-to-string.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),

/***/ "./node_modules/core-js/internals/ordinary-to-primitive.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/ordinary-to-primitive.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/internals/own-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "./node_modules/core-js/internals/path.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/path.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = global;


/***/ }),

/***/ "./node_modules/core-js/internals/perform.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/perform.js ***!
  \***************************************************/
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/promise-constructor-detection.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/promise-constructor-detection.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_BROWSER = __webpack_require__(/*! ../internals/engine-is-browser */ "./node_modules/core-js/internals/engine-is-browser.js");
var IS_DENO = __webpack_require__(/*! ../internals/engine-is-deno */ "./node_modules/core-js/internals/engine-is-deno.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var SPECIES = wellKnownSymbol('species');
var SUBCLASSING = false;
var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);

var FORCED_PROMISE_CONSTRUCTOR = isForced('Promise', function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution
  if (IS_PURE && !(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
    // Detect correctness of subclassing with @@species support
    var promise = new NativePromiseConstructor(function (resolve) { resolve(1); });
    var FakePromise = function (exec) {
      exec(function () { /* empty */ }, function () { /* empty */ });
    };
    var constructor = promise.constructor = {};
    constructor[SPECIES] = FakePromise;
    SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
    if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  } return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT;
});

module.exports = {
  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
  SUBCLASSING: SUBCLASSING
};


/***/ }),

/***/ "./node_modules/core-js/internals/promise-native-constructor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/promise-native-constructor.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = global.Promise;


/***/ }),

/***/ "./node_modules/core-js/internals/promise-resolve.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/promise-resolve.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var newPromiseCapability = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "./node_modules/core-js/internals/promise-statics-incorrect-iteration.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/core-js/internals/promise-statics-incorrect-iteration.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR);

module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function (iterable) {
  NativePromiseConstructor.all(iterable).then(undefined, function () { /* empty */ });
});


/***/ }),

/***/ "./node_modules/core-js/internals/queue.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/queue.js ***!
  \*************************************************/
/***/ ((module) => {

var Queue = function () {
  this.head = null;
  this.tail = null;
};

Queue.prototype = {
  add: function (item) {
    var entry = { item: item, next: null };
    if (this.head) this.tail.next = entry;
    else this.head = entry;
    this.tail = entry;
  },
  get: function () {
    var entry = this.head;
    if (entry) {
      this.head = entry.next;
      if (this.tail === entry) this.tail = null;
      return entry.item;
    }
  }
};

module.exports = Queue;


/***/ }),

/***/ "./node_modules/core-js/internals/require-object-coercible.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
/***/ ((module) => {

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw $TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-species.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/set-species.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-to-string-tag.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;
  if (target && !hasOwn(target, TO_STRING_TAG)) {
    defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-key.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-store.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/shared-store.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "./node_modules/core-js/internals/define-global-property.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;


/***/ }),

/***/ "./node_modules/core-js/internals/shared.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.24.0',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.24.0/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ "./node_modules/core-js/internals/species-constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/species-constructor.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var aConstructor = __webpack_require__(/*! ../internals/a-constructor */ "./node_modules/core-js/internals/a-constructor.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-multibyte.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/string-multibyte.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "./node_modules/core-js/internals/task.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/task.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var apply = __webpack_require__(/*! ../internals/function-apply */ "./node_modules/core-js/internals/function-apply.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice */ "./node_modules/core-js/internals/array-slice.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
var validateArgumentsLength = __webpack_require__(/*! ../internals/validate-arguments-length */ "./node_modules/core-js/internals/validate-arguments-length.js");
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "./node_modules/core-js/internals/engine-is-ios.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");

var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var Dispatch = global.Dispatch;
var Function = global.Function;
var MessageChannel = global.MessageChannel;
var String = global.String;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var location, defer, channel, port;

try {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  location = global.location;
} catch (error) { /* empty */ }

var run = function (id) {
  if (hasOwn(queue, id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(String(id), location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(handler) {
    validateArgumentsLength(arguments.length, 1);
    var fn = isCallable(handler) ? handler : Function(handler);
    var args = arraySlice(arguments, 1);
    queue[++counter] = function () {
      apply(fn, undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    isCallable(global.postMessage) &&
    !global.importScripts &&
    location && location.protocol !== 'file:' &&
    !fails(post)
  ) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-absolute-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-indexed-object.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-integer-or-infinity.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer-or-infinity.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trunc = __webpack_require__(/*! ../internals/math-trunc */ "./node_modules/core-js/internals/math-trunc.js");

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-length.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-primitive.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var ordinaryToPrimitive = __webpack_require__(/*! ../internals/ordinary-to-primitive */ "./node_modules/core-js/internals/ordinary-to-primitive.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-property-key.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/to-property-key.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-string-tag-support.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/to-string-tag-support.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "./node_modules/core-js/internals/to-string.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-string.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");

var $String = String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};


/***/ }),

/***/ "./node_modules/core-js/internals/try-to-string.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/try-to-string.js ***!
  \*********************************************************/
/***/ ((module) => {

var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/uid.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ "./node_modules/core-js/internals/use-symbol-as-uid.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es-x/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "./node_modules/core-js/internals/v8-prototype-define-bug.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/v8-prototype-define-bug.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});


/***/ }),

/***/ "./node_modules/core-js/internals/validate-arguments-length.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/validate-arguments-length.js ***!
  \*********************************************************************/
/***/ ((module) => {

var $TypeError = TypeError;

module.exports = function (passed, required) {
  if (passed < required) throw $TypeError('Not enough arguments');
  return passed;
};


/***/ }),

/***/ "./node_modules/core-js/internals/well-known-symbol.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "./node_modules/core-js/modules/es.aggregate-error.constructor.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/modules/es.aggregate-error.constructor.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var clearErrorStack = __webpack_require__(/*! ../internals/clear-error-stack */ "./node_modules/core-js/internals/clear-error-stack.js");
var installErrorCause = __webpack_require__(/*! ../internals/install-error-cause */ "./node_modules/core-js/internals/install-error-cause.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var normalizeStringArgument = __webpack_require__(/*! ../internals/normalize-string-argument */ "./node_modules/core-js/internals/normalize-string-argument.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var ERROR_STACK_INSTALLABLE = __webpack_require__(/*! ../internals/error-stack-installable */ "./node_modules/core-js/internals/error-stack-installable.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Error = Error;
var push = [].push;

var $AggregateError = function AggregateError(errors, message /* , options */) {
  var options = arguments.length > 2 ? arguments[2] : undefined;
  var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
  var that;
  if (setPrototypeOf) {
    that = setPrototypeOf(new $Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
  } else {
    that = isInstance ? this : create(AggregateErrorPrototype);
    createNonEnumerableProperty(that, TO_STRING_TAG, 'Error');
  }
  if (message !== undefined) createNonEnumerableProperty(that, 'message', normalizeStringArgument(message));
  if (ERROR_STACK_INSTALLABLE) createNonEnumerableProperty(that, 'stack', clearErrorStack(that.stack, 1));
  installErrorCause(that, options);
  var errorsArray = [];
  iterate(errors, push, { that: errorsArray });
  createNonEnumerableProperty(that, 'errors', errorsArray);
  return that;
};

if (setPrototypeOf) setPrototypeOf($AggregateError, $Error);
else copyConstructorProperties($AggregateError, $Error, { name: true });

var AggregateErrorPrototype = $AggregateError.prototype = create($Error.prototype, {
  constructor: createPropertyDescriptor(1, $AggregateError),
  message: createPropertyDescriptor(1, ''),
  name: createPropertyDescriptor(1, 'AggregateError')
});

// `AggregateError` constructor
// https://tc39.es/ecma262/#sec-aggregate-error-constructor
$({ global: true, constructor: true, arity: 2 }, {
  AggregateError: $AggregateError
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.aggregate-error.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.aggregate-error.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(/*! ../modules/es.aggregate-error.constructor */ "./node_modules/core-js/modules/es.aggregate-error.constructor.js");


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.iterator.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

// V8 ~ Chrome 45- bug
if (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {
  defineProperty(values, 'name', { value: 'values' });
} catch (error) { /* empty */ }


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.to-string.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var toString = __webpack_require__(/*! ../internals/object-to-string */ "./node_modules/core-js/internals/object-to-string.js");

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  defineBuiltIn(Object.prototype, 'toString', toString, { unsafe: true });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.all-settled.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.all-settled.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");

// `Promise.allSettled` method
// https://tc39.es/ecma262/#sec-promise.allsettled
$({ target: 'Promise', stat: true }, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'fulfilled', value: value };
          --remaining || resolve(values);
        }, function (error) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'rejected', reason: error };
          --remaining || resolve(values);
        });
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.all.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.all.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__(/*! ../internals/promise-statics-incorrect-iteration */ "./node_modules/core-js/internals/promise-statics-incorrect-iteration.js");

// `Promise.all` method
// https://tc39.es/ecma262/#sec-promise.all
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call($promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.any.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.any.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");

var PROMISE_ANY_ERROR = 'No one promise resolved';

// `Promise.any` method
// https://tc39.es/ecma262/#sec-promise.any
$({ target: 'Promise', stat: true }, {
  any: function any(iterable) {
    var C = this;
    var AggregateError = getBuiltIn('AggregateError');
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var errors = [];
      var counter = 0;
      var remaining = 1;
      var alreadyResolved = false;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyRejected = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyResolved = true;
          resolve(value);
        }, function (error) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyRejected = true;
          errors[index] = error;
          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
        });
      });
      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.catch.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.catch.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR);
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// `Promise.prototype.catch` method
// https://tc39.es/ecma262/#sec-promise.prototype.catch
$({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
  'catch': function (onRejected) {
    return this.then(undefined, onRejected);
  }
});

// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['catch'];
  if (NativePromisePrototype['catch'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'catch', method, { unsafe: true });
  }
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.constructor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
var task = (__webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set);
var microtask = __webpack_require__(/*! ../internals/microtask */ "./node_modules/core-js/internals/microtask.js");
var hostReportErrors = __webpack_require__(/*! ../internals/host-report-errors */ "./node_modules/core-js/internals/host-report-errors.js");
var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
var Queue = __webpack_require__(/*! ../internals/queue */ "./node_modules/core-js/internals/queue.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var PromiseConstructorDetection = __webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");

var PROMISE = 'Promise';
var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var setInternalState = InternalStateModule.set;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var PromiseConstructor = NativePromiseConstructor;
var PromisePrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;

var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;

var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && isCallable(then = it.then) ? then : false;
};

var callReaction = function (reaction, state) {
  var value = state.value;
  var ok = state.state == FULFILLED;
  var handler = ok ? reaction.ok : reaction.fail;
  var resolve = reaction.resolve;
  var reject = reaction.reject;
  var domain = reaction.domain;
  var result, then, exited;
  try {
    if (handler) {
      if (!ok) {
        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
        state.rejection = HANDLED;
      }
      if (handler === true) result = value;
      else {
        if (domain) domain.enter();
        result = handler(value); // can throw
        if (domain) {
          domain.exit();
          exited = true;
        }
      }
      if (result === reaction.promise) {
        reject(TypeError('Promise-chain cycle'));
      } else if (then = isThenable(result)) {
        call(then, result, resolve, reject);
      } else resolve(result);
    } else reject(value);
  } catch (error) {
    if (domain && !exited) domain.exit();
    reject(error);
  }
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  microtask(function () {
    var reactions = state.reactions;
    var reaction;
    while (reaction = reactions.get()) {
      callReaction(reaction, state);
    }
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          call(then, value,
            bind(internalResolve, wrapper, state),
            bind(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED_PROMISE_CONSTRUCTOR) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromisePrototype);
    aCallable(executor);
    call(Internal, this);
    var state = getInternalPromiseState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };

  PromisePrototype = PromiseConstructor.prototype;

  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: new Queue(),
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };

  // `Promise.prototype.then` method
  // https://tc39.es/ecma262/#sec-promise.prototype.then
  Internal.prototype = defineBuiltIn(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
    var state = getInternalPromiseState(this);
    var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
    state.parent = true;
    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
    reaction.fail = isCallable(onRejected) && onRejected;
    reaction.domain = IS_NODE ? process.domain : undefined;
    if (state.state == PENDING) state.reactions.add(reaction);
    else microtask(function () {
      callReaction(reaction, state);
    });
    return reaction.promise;
  });

  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalPromiseState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };

  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;

    if (!NATIVE_PROMISE_SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      defineBuiltIn(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          call(nativeThen, that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromisePrototype);
    }
  }
}

$({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.finally.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.finally.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "./node_modules/core-js/internals/promise-resolve.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromiseConstructor && fails(function () {
  // eslint-disable-next-line unicorn/no-thenable -- required for testing
  NativePromisePrototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
});

// `Promise.prototype.finally` method
// https://tc39.es/ecma262/#sec-promise.prototype.finally
$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = isCallable(onFinally);
    return this.then(
      isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () { return x; });
      } : onFinally,
      isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () { throw e; });
      } : onFinally
    );
  }
});

// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['finally'];
  if (NativePromisePrototype['finally'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'finally', method, { unsafe: true });
  }
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__(/*! ../modules/es.promise.constructor */ "./node_modules/core-js/modules/es.promise.constructor.js");
__webpack_require__(/*! ../modules/es.promise.all */ "./node_modules/core-js/modules/es.promise.all.js");
__webpack_require__(/*! ../modules/es.promise.catch */ "./node_modules/core-js/modules/es.promise.catch.js");
__webpack_require__(/*! ../modules/es.promise.race */ "./node_modules/core-js/modules/es.promise.race.js");
__webpack_require__(/*! ../modules/es.promise.reject */ "./node_modules/core-js/modules/es.promise.reject.js");
__webpack_require__(/*! ../modules/es.promise.resolve */ "./node_modules/core-js/modules/es.promise.resolve.js");


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.race.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.race.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__(/*! ../internals/promise-statics-incorrect-iteration */ "./node_modules/core-js/internals/promise-statics-incorrect-iteration.js");

// `Promise.race` method
// https://tc39.es/ecma262/#sec-promise.race
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        call($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.reject.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.reject.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR);

// `Promise.reject` method
// https://tc39.es/ecma262/#sec-promise.reject
$({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  reject: function reject(r) {
    var capability = newPromiseCapabilityModule.f(this);
    call(capability.reject, undefined, r);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.resolve.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.resolve.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR);
var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "./node_modules/core-js/internals/promise-resolve.js");

var PromiseConstructorWrapper = getBuiltIn('Promise');
var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;

// `Promise.resolve` method
// https://tc39.es/ecma262/#sec-promise.resolve
$({ target: 'Promise', stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
  resolve: function resolve(x) {
    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var charAt = (__webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").charAt);
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-collections.iterator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
var DOMTokenListPrototype = __webpack_require__(/*! ../internals/dom-token-list-prototype */ "./node_modules/core-js/internals/dom-token-list-prototype.js");
var ArrayIteratorMethods = __webpack_require__(/*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype, COLLECTION_NAME);
}

handlePrototype(DOMTokenListPrototype, 'DOMTokenList');


/***/ }),

/***/ "./node_modules/core-js/stable/promise/index.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/stable/promise/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parent = __webpack_require__(/*! ../../es/promise */ "./node_modules/core-js/es/promise/index.js");
__webpack_require__(/*! ../../modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

module.exports = parent;


/***/ }),

/***/ "./node_modules/error-stack-parser/error-stack-parser.js":
/*!***************************************************************!*\
  !*** ./node_modules/error-stack-parser/error-stack-parser.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! stackframe */ "./node_modules/stackframe/stackframe.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function ErrorStackParser(StackFrame) {
    'use strict';

    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+\:\d+/;
    var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+\:\d+|\(native\))/m;
    var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code\])?$/;

    function _map(array, fn, thisArg) {
        if (typeof Array.prototype.map === 'function') {
            return array.map(fn, thisArg);
        } else {
            var output = new Array(array.length);
            for (var i = 0; i < array.length; i++) {
                output[i] = fn.call(thisArg, array[i]);
            }
            return output;
        }
    }

    function _filter(array, fn, thisArg) {
        if (typeof Array.prototype.filter === 'function') {
            return array.filter(fn, thisArg);
        } else {
            var output = [];
            for (var i = 0; i < array.length; i++) {
                if (fn.call(thisArg, array[i])) {
                    output.push(array[i]);
                }
            }
            return output;
        }
    }

    function _indexOf(array, target) {
        if (typeof Array.prototype.indexOf === 'function') {
            return array.indexOf(target);
        } else {
            for (var i = 0; i < array.length; i++) {
                if (array[i] === target) {
                    return i;
                }
            }
            return -1;
        }
    }

    return {
        /**
         * Given an Error object, extract the most information from it.
         *
         * @param {Error} error object
         * @return {Array} of StackFrames
         */
        parse: function ErrorStackParser$$parse(error) {
            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
                return this.parseOpera(error);
            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
                return this.parseV8OrIE(error);
            } else if (error.stack) {
                return this.parseFFOrSafari(error);
            } else {
                throw new Error('Cannot parse given Error object');
            }
        },

        // Separate line and column numbers from a string of the form: (URI:Line:Column)
        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
            // Fail-fast but return locations like "(native)"
            if (urlLike.indexOf(':') === -1) {
                return [urlLike];
            }

            var regExp = /(.+?)(?:\:(\d+))?(?:\:(\d+))?$/;
            var parts = regExp.exec(urlLike.replace(/[\(\)]/g, ''));
            return [parts[1], parts[2] || undefined, parts[3] || undefined];
        },

        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
            var filtered = _filter(error.stack.split('\n'), function(line) {
                return !!line.match(CHROME_IE_STACK_REGEXP);
            }, this);

            return _map(filtered, function(line) {
                if (line.indexOf('(eval ') > -1) {
                    // Throw away eval information until we implement stacktrace.js/stackframe#8
                    line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^\()]*)|(\)\,.*$)/g, '');
                }
                var tokens = line.replace(/^\s+/, '').replace(/\(eval code/g, '(').split(/\s+/).slice(1);
                var locationParts = this.extractLocation(tokens.pop());
                var functionName = tokens.join(' ') || undefined;
                var fileName = _indexOf(['eval', '<anonymous>'], locationParts[0]) > -1 ? undefined : locationParts[0];

                return new StackFrame(functionName, undefined, fileName, locationParts[1], locationParts[2], line);
            }, this);
        },

        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
            var filtered = _filter(error.stack.split('\n'), function(line) {
                return !line.match(SAFARI_NATIVE_CODE_REGEXP);
            }, this);

            return _map(filtered, function(line) {
                // Throw away eval information until we implement stacktrace.js/stackframe#8
                if (line.indexOf(' > eval') > -1) {
                    line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval\:\d+\:\d+/g, ':$1');
                }

                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
                    // Safari eval frames only have function names and nothing else
                    return new StackFrame(line);
                } else {
                    var tokens = line.split('@');
                    var locationParts = this.extractLocation(tokens.pop());
                    var functionName = tokens.join('@') || undefined;
                    return new StackFrame(functionName,
                        undefined,
                        locationParts[0],
                        locationParts[1],
                        locationParts[2],
                        line);
                }
            }, this);
        },

        parseOpera: function ErrorStackParser$$parseOpera(e) {
            if (!e.stacktrace || (e.message.indexOf('\n') > -1 &&
                e.message.split('\n').length > e.stacktrace.split('\n').length)) {
                return this.parseOpera9(e);
            } else if (!e.stack) {
                return this.parseOpera10(e);
            } else {
                return this.parseOpera11(e);
            }
        },

        parseOpera9: function ErrorStackParser$$parseOpera9(e) {
            var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
            var lines = e.message.split('\n');
            var result = [];

            for (var i = 2, len = lines.length; i < len; i += 2) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                    result.push(new StackFrame(undefined, undefined, match[2], match[1], undefined, lines[i]));
                }
            }

            return result;
        },

        parseOpera10: function ErrorStackParser$$parseOpera10(e) {
            var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
            var lines = e.stacktrace.split('\n');
            var result = [];

            for (var i = 0, len = lines.length; i < len; i += 2) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                    result.push(
                        new StackFrame(
                            match[3] || undefined,
                            undefined,
                            match[2],
                            match[1],
                            undefined,
                            lines[i]
                        )
                    );
                }
            }

            return result;
        },

        // Opera 10.65+ Error.stack very similar to FF/Safari
        parseOpera11: function ErrorStackParser$$parseOpera11(error) {
            var filtered = _filter(error.stack.split('\n'), function(line) {
                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
            }, this);

            return _map(filtered, function(line) {
                var tokens = line.split('@');
                var locationParts = this.extractLocation(tokens.pop());
                var functionCall = (tokens.shift() || '');
                var functionName = functionCall
                        .replace(/<anonymous function(: (\w+))?>/, '$2')
                        .replace(/\([^\)]*\)/g, '') || undefined;
                var argsRaw;
                if (functionCall.match(/\(([^\)]*)\)/)) {
                    argsRaw = functionCall.replace(/^[^\(]+\(([^\)]*)\)$/, '$1');
                }
                var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?
                    undefined : argsRaw.split(',');
                return new StackFrame(
                    functionName,
                    args,
                    locationParts[0],
                    locationParts[1],
                    locationParts[2],
                    line);
            }, this);
        }
    };
}));



/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/stack-generator/node_modules/stackframe/stackframe.js":
/*!****************************************************************************!*\
  !*** ./node_modules/stack-generator/node_modules/stackframe/stackframe.js ***!
  \****************************************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function() {
    'use strict';
    function _isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    function _capitalize(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
    }

    function _getter(p) {
        return function() {
            return this[p];
        };
    }

    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];
    var numericProps = ['columnNumber', 'lineNumber'];
    var stringProps = ['fileName', 'functionName', 'source'];
    var arrayProps = ['args'];
    var objectProps = ['evalOrigin'];

    var props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);

    function StackFrame(obj) {
        if (!obj) return;
        for (var i = 0; i < props.length; i++) {
            if (obj[props[i]] !== undefined) {
                this['set' + _capitalize(props[i])](obj[props[i]]);
            }
        }
    }

    StackFrame.prototype = {
        getArgs: function() {
            return this.args;
        },
        setArgs: function(v) {
            if (Object.prototype.toString.call(v) !== '[object Array]') {
                throw new TypeError('Args must be an Array');
            }
            this.args = v;
        },

        getEvalOrigin: function() {
            return this.evalOrigin;
        },
        setEvalOrigin: function(v) {
            if (v instanceof StackFrame) {
                this.evalOrigin = v;
            } else if (v instanceof Object) {
                this.evalOrigin = new StackFrame(v);
            } else {
                throw new TypeError('Eval Origin must be an Object or StackFrame');
            }
        },

        toString: function() {
            var fileName = this.getFileName() || '';
            var lineNumber = this.getLineNumber() || '';
            var columnNumber = this.getColumnNumber() || '';
            var functionName = this.getFunctionName() || '';
            if (this.getIsEval()) {
                if (fileName) {
                    return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
                }
                return '[eval]:' + lineNumber + ':' + columnNumber;
            }
            if (functionName) {
                return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
            }
            return fileName + ':' + lineNumber + ':' + columnNumber;
        }
    };

    StackFrame.fromString = function StackFrame$$fromString(str) {
        var argsStartIndex = str.indexOf('(');
        var argsEndIndex = str.lastIndexOf(')');

        var functionName = str.substring(0, argsStartIndex);
        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');
        var locationString = str.substring(argsEndIndex + 1);

        if (locationString.indexOf('@') === 0) {
            var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, '');
            var fileName = parts[1];
            var lineNumber = parts[2];
            var columnNumber = parts[3];
        }

        return new StackFrame({
            functionName: functionName,
            args: args || undefined,
            fileName: fileName,
            lineNumber: lineNumber || undefined,
            columnNumber: columnNumber || undefined
        });
    };

    for (var i = 0; i < booleanProps.length; i++) {
        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);
        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function(p) {
            return function(v) {
                this[p] = Boolean(v);
            };
        })(booleanProps[i]);
    }

    for (var j = 0; j < numericProps.length; j++) {
        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);
        StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function(p) {
            return function(v) {
                if (!_isNumber(v)) {
                    throw new TypeError(p + ' must be a Number');
                }
                this[p] = Number(v);
            };
        })(numericProps[j]);
    }

    for (var k = 0; k < stringProps.length; k++) {
        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);
        StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function(p) {
            return function(v) {
                this[p] = String(v);
            };
        })(stringProps[k]);
    }

    return StackFrame;
}));


/***/ }),

/***/ "./node_modules/stack-generator/stack-generator.js":
/*!*********************************************************!*\
  !*** ./node_modules/stack-generator/stack-generator.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! stackframe */ "./node_modules/stack-generator/node_modules/stackframe/stackframe.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function (StackFrame) {
    return {
        backtrace: function StackGenerator$$backtrace(opts) {
            var stack = [];
            var maxStackSize = 10;

            if (typeof opts === 'object' && typeof opts.maxStackSize === 'number') {
                maxStackSize = opts.maxStackSize;
            }

            var curr = arguments.callee;
            while (curr && stack.length < maxStackSize) {
                // Allow V8 optimizations
                var args = new Array(curr['arguments'].length);
                for(var i = 0; i < args.length; ++i) {
                    args[i] = curr['arguments'][i];
                }
                if (/function(?:\s+([\w$]+))+\s*\(/.test(curr.toString())) {
                    stack.push(new StackFrame({functionName: RegExp.$1 || undefined, args: args}));
                } else {
                    stack.push(new StackFrame({args: args}));
                }

                try {
                    curr = curr.caller;
                } catch (e) {
                    break;
                }
            }
            return stack;
        }
    };
}));


/***/ }),

/***/ "./node_modules/stackframe/stackframe.js":
/*!***********************************************!*\
  !*** ./node_modules/stackframe/stackframe.js ***!
  \***********************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    'use strict';
    function _isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    function StackFrame(functionName, args, fileName, lineNumber, columnNumber, source) {
        if (functionName !== undefined) {
            this.setFunctionName(functionName);
        }
        if (args !== undefined) {
            this.setArgs(args);
        }
        if (fileName !== undefined) {
            this.setFileName(fileName);
        }
        if (lineNumber !== undefined) {
            this.setLineNumber(lineNumber);
        }
        if (columnNumber !== undefined) {
            this.setColumnNumber(columnNumber);
        }
        if (source !== undefined) {
            this.setSource(source);
        }
    }

    StackFrame.prototype = {
        getFunctionName: function () {
            return this.functionName;
        },
        setFunctionName: function (v) {
            this.functionName = String(v);
        },

        getArgs: function () {
            return this.args;
        },
        setArgs: function (v) {
            if (Object.prototype.toString.call(v) !== '[object Array]') {
                throw new TypeError('Args must be an Array');
            }
            this.args = v;
        },

        // NOTE: Property name may be misleading as it includes the path,
        // but it somewhat mirrors V8's JavaScriptStackTraceApi
        // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi and Gecko's
        // http://mxr.mozilla.org/mozilla-central/source/xpcom/base/nsIException.idl#14
        getFileName: function () {
            return this.fileName;
        },
        setFileName: function (v) {
            this.fileName = String(v);
        },

        getLineNumber: function () {
            return this.lineNumber;
        },
        setLineNumber: function (v) {
            if (!_isNumber(v)) {
                throw new TypeError('Line Number must be a Number');
            }
            this.lineNumber = Number(v);
        },

        getColumnNumber: function () {
            return this.columnNumber;
        },
        setColumnNumber: function (v) {
            if (!_isNumber(v)) {
                throw new TypeError('Column Number must be a Number');
            }
            this.columnNumber = Number(v);
        },

        getSource: function () {
            return this.source;
        },
        setSource: function (v) {
            this.source = String(v);
        },

        toString: function() {
            var functionName = this.getFunctionName() || '{anonymous}';
            var args = '(' + (this.getArgs() || []).join(',') + ')';
            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';
            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';
            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';
            return functionName + args + fileName + lineNumber + columnNumber;
        }
    };

    return StackFrame;
}));


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/array-set.js":
/*!******************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/array-set.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(/*! ./util */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/util.js");
var has = Object.prototype.hasOwnProperty;

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = util.toSetString(aStr);
  var isDuplicate = has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    this._set[sStr] = idx;
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  var sStr = util.toSetString(aStr);
  return has.call(this._set, sStr);
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  var sStr = util.toSetString(aStr);
  if (has.call(this._set, sStr)) {
    return this._set[sStr];
  }
  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/base64-vlq.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/base64-vlq.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = __webpack_require__(/*! ./base64 */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/base64.js");

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/base64.js":
/*!***************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/base64.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/binary-search.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/binary-search.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/mapping-list.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/mapping-list.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(/*! ./util */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/util.js");

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/quick-sort.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/quick-sort.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-consumer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-consumer.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(/*! ./util */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/util.js");
var binarySearch = __webpack_require__(/*! ./binary-search */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/binary-search.js");
var ArraySet = (__webpack_require__(/*! ./array-set */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/array-set.js").ArraySet);
var base64VLQ = __webpack_require__(/*! ./base64-vlq */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/base64-vlq.js");
var quickSort = (__webpack_require__(/*! ./quick-sort */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/quick-sort.js").quickSort);

function SourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap)
    : new BasicSourceMapConsumer(sourceMap);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      if (source != null && sourceRoot != null) {
        source = util.join(sourceRoot, source);
      }
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: Optional. the column number in the original source.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    if (this.sourceRoot != null) {
      needle.source = util.relative(this.sourceRoot, needle.source);
    }
    if (!this._sources.has(needle.source)) {
      return [];
    }
    needle.source = this._sources.indexOf(needle.source);

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The only parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._sources.toArray().map(function (s) {
      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
    }, this);
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.
 *   - column: The column number in the generated source.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.
 *   - column: The column number in the original source, or null.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          if (this.sourceRoot != null) {
            source = util.join(this.sourceRoot, source);
          }
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    if (this.sourceRoot != null) {
      aSource = util.relative(this.sourceRoot, aSource);
    }

    if (this._sources.has(aSource)) {
      return this.sourcesContent[this._sources.indexOf(aSource)];
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + aSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: The column number in the original source.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    if (this.sourceRoot != null) {
      source = util.relative(this.sourceRoot, source);
    }
    if (!this._sources.has(source)) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }
    source = this._sources.indexOf(source);

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The only parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'))
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.
 *   - column: The column number in the generated source.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.
 *   - column: The column number in the original source, or null.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: The column number in the original source.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        if (section.consumer.sourceRoot !== null) {
          source = util.join(section.consumer.sourceRoot, source);
        }
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = section.consumer._names.at(mapping.name);
        this._names.add(name);
        name = this._names.indexOf(name);

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-generator.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-generator.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = __webpack_require__(/*! ./base64-vlq */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/base64-vlq.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/util.js");
var ArraySet = (__webpack_require__(/*! ./array-set */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/array-set.js").ArraySet);
var MappingList = (__webpack_require__(/*! ./mapping-list */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/mapping-list.js").MappingList);

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/source-node.js":
/*!********************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/source-node.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = (__webpack_require__(/*! ./source-map-generator */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-generator.js").SourceMapGenerator);
var util = __webpack_require__(/*! ./util */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/util.js");

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are removed from this array, by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var shiftNextLine = function() {
      var lineContents = remainingLines.shift();
      // The last line of a file might not have a newline.
      var newLine = remainingLines.shift() || "";
      return lineContents + newLine;
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[0];
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[0];
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[0] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLines.length > 0) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/lib/util.js":
/*!*************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/lib/util.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = mappingA.source - mappingB.source;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return mappingA.name - mappingB.name;
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = mappingA.source - mappingB.source;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return mappingA.name - mappingB.name;
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;


/***/ }),

/***/ "./node_modules/stacktrace-gps/node_modules/source-map/source-map.js":
/*!***************************************************************************!*\
  !*** ./node_modules/stacktrace-gps/node_modules/source-map/source-map.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = __webpack_require__(/*! ./lib/source-map-generator */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-generator.js").SourceMapGenerator;
exports.SourceMapConsumer = __webpack_require__(/*! ./lib/source-map-consumer */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-consumer.js").SourceMapConsumer;
exports.SourceNode = __webpack_require__(/*! ./lib/source-node */ "./node_modules/stacktrace-gps/node_modules/source-map/lib/source-node.js").SourceNode;


/***/ }),

/***/ "./node_modules/stacktrace-gps/stacktrace-gps.js":
/*!*******************************************************!*\
  !*** ./node_modules/stacktrace-gps/stacktrace-gps.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! source-map */ "./node_modules/stacktrace-gps/node_modules/source-map/source-map.js"), __webpack_require__(/*! stackframe */ "./node_modules/stackframe/stackframe.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function(SourceMap, StackFrame) {
    'use strict';

    /**
     * Make a X-Domain request to url and callback.
     *
     * @param {String} url
     * @returns {Promise} with response text if fulfilled
     */
    function _xdr(url) {
        return new Promise(function(resolve, reject) {
            var req = new XMLHttpRequest();
            req.open('get', url);
            req.onerror = reject;
            req.onreadystatechange = function onreadystatechange() {
                if (req.readyState === 4) {
                    if (req.status >= 200 && req.status < 300) {
                        resolve(req.responseText);
                    } else {
                        reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url));
                    }
                }
            };
            req.send();
        });

    }

    /**
     * Convert a Base64-encoded string into its original representation.
     * Used for inline sourcemaps.
     *
     * @param {String} b64str Base-64 encoded string
     * @returns {String} original representation of the base64-encoded string.
     */
    function _atob(b64str) {
        if (typeof window !== 'undefined' && window.atob) {
            return window.atob(b64str);
        } else {
            throw new Error('You must supply a polyfill for window.atob in this environment');
        }
    }

    function _parseJson(string) {
        if (typeof JSON !== 'undefined' && JSON.parse) {
            return JSON.parse(string);
        } else {
            throw new Error('You must supply a polyfill for JSON.parse in this environment');
        }
    }

    function _findFunctionName(source, lineNumber/*, columnNumber*/) {
        // function {name}({args}) m[1]=name m[2]=args
        var reFunctionDeclaration = /function\s+([^(]*?)\s*\(([^)]*)\)/;
        // {name} = function ({args}) TODO args capture
        var reFunctionExpression = /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*function\b/;
        // {name} = eval()
        var reFunctionEvaluation = /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*(?:eval|new Function)\b/;
        var lines = source.split('\n');

        // Walk backwards in the source lines until we find the line which matches one of the patterns above
        var code = '';
        var maxLines = Math.min(lineNumber, 20);
        var m;
        for (var i = 0; i < maxLines; ++i) {
            // lineNo is 1-based, source[] is 0-based
            var line = lines[lineNumber - i - 1];
            var commentPos = line.indexOf('//');
            if (commentPos >= 0) {
                line = line.substr(0, commentPos);
            }

            if (line) {
                code = line + code;
                m = reFunctionExpression.exec(code);
                if (m && m[1]) {
                    return m[1];
                }
                m = reFunctionDeclaration.exec(code);
                if (m && m[1]) {
                    return m[1];
                }
                m = reFunctionEvaluation.exec(code);
                if (m && m[1]) {
                    return m[1];
                }
            }
        }
        return undefined;
    }

    function _ensureSupportedEnvironment() {
        if (typeof Object.defineProperty !== 'function' || typeof Object.create !== 'function') {
            throw new Error('Unable to consume source maps in older browsers');
        }
    }

    function _ensureStackFrameIsLegit(stackframe) {
        if (typeof stackframe !== 'object') {
            throw new TypeError('Given StackFrame is not an object');
        } else if (typeof stackframe.fileName !== 'string') {
            throw new TypeError('Given file name is not a String');
        } else if (typeof stackframe.lineNumber !== 'number' ||
            stackframe.lineNumber % 1 !== 0 ||
            stackframe.lineNumber < 1) {
            throw new TypeError('Given line number must be a positive integer');
        } else if (typeof stackframe.columnNumber !== 'number' ||
            stackframe.columnNumber % 1 !== 0 ||
            stackframe.columnNumber < 0) {
            throw new TypeError('Given column number must be a non-negative integer');
        }
        return true;
    }

    function _findSourceMappingURL(source) {
        var m = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/.exec(source);
        if (m && m[1]) {
            return m[1];
        } else {
            throw new Error('sourceMappingURL not found');
        }
    }

    function _extractLocationInfoFromSourceMap(stackframe, rawSourceMap, sourceCache) {
        return new Promise(function(resolve, reject) {
            var mapConsumer = new SourceMap.SourceMapConsumer(rawSourceMap);

            var loc = mapConsumer.originalPositionFor({
                line: stackframe.lineNumber,
                column: stackframe.columnNumber
            });

            if (loc.source) {
                var mappedSource = mapConsumer.sourceContentFor(loc.source);
                if (mappedSource) {
                    sourceCache[loc.source] = mappedSource;
                }
                resolve(
                    new StackFrame(
                        loc.name || stackframe.functionName,
                        stackframe.args,
                        loc.source,
                        loc.line,
                        loc.column));
            } else {
                reject(new Error('Could not get original source for given stackframe and source map'));
            }
        });
    }

    /**
     * @constructor
     * @param {Object} opts
     *      opts.sourceCache = {url: "Source String"} => preload source cache
     *      opts.offline = True to prevent network requests.
     *              Best effort without sources or source maps.
     *      opts.ajax = Promise returning function to make X-Domain requests
     */
    return function StackTraceGPS(opts) {
        if (!(this instanceof StackTraceGPS)) {
            return new StackTraceGPS(opts);
        }
        opts = opts || {};

        this.sourceCache = opts.sourceCache || {};

        this.ajax = opts.ajax || _xdr;

        this._atob = opts.atob || _atob;

        this._get = function _get(location) {
            return new Promise(function(resolve, reject) {
                var isDataUrl = location.substr(0, 5) === 'data:';
                if (this.sourceCache[location]) {
                    resolve(this.sourceCache[location]);
                } else if (opts.offline && !isDataUrl) {
                    reject(new Error('Cannot make network requests in offline mode'));
                } else {
                    if (isDataUrl) {
                        // data URLs can have parameters.
                        // see http://tools.ietf.org/html/rfc2397
                        var supportedEncodingRegexp =
                            /^data:application\/json;([\w=:"-]+;)*base64,/;
                        var match = location.match(supportedEncodingRegexp);
                        if (match) {
                            var sourceMapStart = match[0].length;
                            var encodedSource = location.substr(sourceMapStart);
                            var source = this._atob(encodedSource);
                            this.sourceCache[location] = source;
                            resolve(source);
                        } else {
                            reject(new Error('The encoding of the inline sourcemap is not supported'));
                        }
                    } else {
                        var xhrPromise = this.ajax(location, {method: 'get'});
                        // Cache the Promise to prevent duplicate in-flight requests
                        this.sourceCache[location] = xhrPromise;
                        xhrPromise.then(resolve, reject);
                    }
                }
            }.bind(this));
        };

        /**
         * Given a StackFrame, enhance function name and use source maps for a
         * better StackFrame.
         *
         * @param {StackFrame} stackframe object
         * @returns {Promise} that resolves with with source-mapped StackFrame
         */
        this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {
            return new Promise(function(resolve, reject) {
                this.getMappedLocation(stackframe).then(function(mappedStackFrame) {
                    function resolveMappedStackFrame() {
                        resolve(mappedStackFrame);
                    }

                    this.findFunctionName(mappedStackFrame)
                        .then(resolve, resolveMappedStackFrame)
                        ['catch'](resolveMappedStackFrame);
                }.bind(this), reject);
            }.bind(this));
        };

        /**
         * Given a StackFrame, guess function name from location information.
         *
         * @param {StackFrame} stackframe
         * @returns {Promise} that resolves with enhanced StackFrame.
         */
        this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {
            return new Promise(function(resolve, reject) {
                _ensureStackFrameIsLegit(stackframe);
                this._get(stackframe.fileName).then(function getSourceCallback(source) {
                    var lineNumber = stackframe.lineNumber;
                    var columnNumber = stackframe.columnNumber;
                    var guessedFunctionName = _findFunctionName(source, lineNumber, columnNumber);
                    // Only replace functionName if we found something
                    if (guessedFunctionName) {
                        resolve(new StackFrame(guessedFunctionName,
                            stackframe.args,
                            stackframe.fileName,
                            lineNumber,
                            columnNumber));
                    } else {
                        resolve(stackframe);
                    }
                }, reject)['catch'](reject);
            }.bind(this));
        };

        /**
         * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.
         *
         * @param {StackFrame} stackframe
         * @returns {Promise} that resolves with enhanced StackFrame.
         */
        this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {
            return new Promise(function(resolve, reject) {
                _ensureSupportedEnvironment();
                _ensureStackFrameIsLegit(stackframe);

                var sourceCache = this.sourceCache;
                var fileName = stackframe.fileName;
                this._get(fileName).then(function(source) {
                    var sourceMappingURL = _findSourceMappingURL(source);
                    var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:';
                    var base = fileName.substring(0, fileName.lastIndexOf('/') + 1);

                    if (sourceMappingURL[0] !== '/' && !isDataUrl && !(/^https?:\/\/|^\/\//i).test(sourceMappingURL)) {
                        sourceMappingURL = base + sourceMappingURL;
                    }

                    this._get(sourceMappingURL).then(function(sourceMap) {
                        if (typeof sourceMap === 'string') {
                            sourceMap = _parseJson(sourceMap.replace(/^\)\]\}'/, ''));
                        }
                        if (typeof sourceMap.sourceRoot === 'undefined') {
                            sourceMap.sourceRoot = base;
                        }

                        _extractLocationInfoFromSourceMap(stackframe, sourceMap, sourceCache)
                            .then(resolve)['catch'](function() {
                            resolve(stackframe);
                        });
                    }, reject)['catch'](reject);
                }.bind(this), reject)['catch'](reject);
            }.bind(this));
        };
    };
}));


/***/ }),

/***/ "./node_modules/stacktrace-js/stacktrace.js":
/*!**************************************************!*\
  !*** ./node_modules/stacktrace-js/stacktrace.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! error-stack-parser */ "./node_modules/error-stack-parser/error-stack-parser.js"), __webpack_require__(/*! stack-generator */ "./node_modules/stack-generator/stack-generator.js"), __webpack_require__(/*! stacktrace-gps */ "./node_modules/stacktrace-gps/stacktrace-gps.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function StackTrace(ErrorStackParser, StackGenerator, StackTraceGPS) {
    var _options = {
        filter: function(stackframe) {
            // Filter out stackframes for this library by default
            return (stackframe.functionName || '').indexOf('StackTrace$$') === -1 &&
                (stackframe.functionName || '').indexOf('ErrorStackParser$$') === -1 &&
                (stackframe.functionName || '').indexOf('StackTraceGPS$$') === -1 &&
                (stackframe.functionName || '').indexOf('StackGenerator$$') === -1;
        },
        sourceCache: {}
    };

    var _generateError = function StackTrace$$GenerateError() {
        try {
            // Error must be thrown to get stack in IE
            throw new Error();
        } catch (err) {
            return err;
        }
    };

    /**
     * Merge 2 given Objects. If a conflict occurs the second object wins.
     * Does not do deep merges.
     *
     * @param {Object} first base object
     * @param {Object} second overrides
     * @returns {Object} merged first and second
     * @private
     */
    function _merge(first, second) {
        var target = {};

        [first, second].forEach(function(obj) {
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    target[prop] = obj[prop];
                }
            }
            return target;
        });

        return target;
    }

    function _isShapedLikeParsableError(err) {
        return err.stack || err['opera#sourceloc'];
    }

    function _filtered(stackframes, filter) {
        if (typeof filter === 'function') {
            return stackframes.filter(filter);
        }
        return stackframes;
    }

    return {
        /**
         * Get a backtrace from invocation point.
         *
         * @param {Object} opts
         * @returns {Array} of StackFrame
         */
        get: function StackTrace$$get(opts) {
            var err = _generateError();
            return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);
        },

        /**
         * Get a backtrace from invocation point.
         * IMPORTANT: Does not handle source maps or guess function names!
         *
         * @param {Object} opts
         * @returns {Array} of StackFrame
         */
        getSync: function StackTrace$$getSync(opts) {
            opts = _merge(_options, opts);
            var err = _generateError();
            var stack = _isShapedLikeParsableError(err) ? ErrorStackParser.parse(err) : StackGenerator.backtrace(opts);
            return _filtered(stack, opts.filter);
        },

        /**
         * Given an error object, parse it.
         *
         * @param {Error} error object
         * @param {Object} opts
         * @returns {Promise} for Array[StackFrame}
         */
        fromError: function StackTrace$$fromError(error, opts) {
            opts = _merge(_options, opts);
            var gps = new StackTraceGPS(opts);
            return new Promise(function(resolve) {
                var stackframes = _filtered(ErrorStackParser.parse(error), opts.filter);
                resolve(Promise.all(stackframes.map(function(sf) {
                    return new Promise(function(resolve) {
                        function resolveOriginal() {
                            resolve(sf);
                        }

                        gps.pinpoint(sf).then(resolve, resolveOriginal)['catch'](resolveOriginal);
                    });
                })));
            }.bind(this));
        },

        /**
         * Use StackGenerator to generate a backtrace.
         *
         * @param {Object} opts
         * @returns {Promise} of Array[StackFrame]
         */
        generateArtificially: function StackTrace$$generateArtificially(opts) {
            opts = _merge(_options, opts);
            var stackFrames = StackGenerator.backtrace(opts);
            if (typeof opts.filter === 'function') {
                stackFrames = stackFrames.filter(opts.filter);
            }
            return Promise.resolve(stackFrames);
        },

        /**
         * Given a function, wrap it such that invocations trigger a callback that
         * is called with a stack trace.
         *
         * @param {Function} fn to be instrumented
         * @param {Function} callback function to call with a stack trace on invocation
         * @param {Function} errback optional function to call with error if unable to get stack trace.
         * @param {Object} thisArg optional context object (e.g. window)
         */
        instrument: function StackTrace$$instrument(fn, callback, errback, thisArg) {
            if (typeof fn !== 'function') {
                throw new Error('Cannot instrument non-function object');
            } else if (typeof fn.__stacktraceOriginalFn === 'function') {
                // Already instrumented, return given Function
                return fn;
            }

            var instrumented = function StackTrace$$instrumented() {
                try {
                    this.get().then(callback, errback)['catch'](errback);
                    return fn.apply(thisArg || this, arguments);
                } catch (e) {
                    if (_isShapedLikeParsableError(e)) {
                        this.fromError(e).then(callback, errback)['catch'](errback);
                    }
                    throw e;
                }
            }.bind(this);
            instrumented.__stacktraceOriginalFn = fn;

            return instrumented;
        },

        /**
         * Given a function that has been instrumented,
         * revert the function to it's original (non-instrumented) state.
         *
         * @param {Function} fn to de-instrument
         */
        deinstrument: function StackTrace$$deinstrument(fn) {
            if (typeof fn !== 'function') {
                throw new Error('Cannot de-instrument non-function object');
            } else if (typeof fn.__stacktraceOriginalFn === 'function') {
                return fn.__stacktraceOriginalFn;
            } else {
                // Function not instrumented, return original
                return fn;
            }
        },

        /**
         * Given an error message and Array of StackFrames, serialize and POST to given URL.
         *
         * @param {Array} stackframes
         * @param {String} url
         * @param {String} errorMsg
         */
        report: function StackTrace$$report(stackframes, url, errorMsg) {
            return new Promise(function(resolve, reject) {
                var req = new XMLHttpRequest();
                req.onerror = reject;
                req.onreadystatechange = function onreadystatechange() {
                    if (req.readyState === 4) {
                        if (req.status >= 200 && req.status < 400) {
                            resolve(req.responseText);
                        } else {
                            reject(new Error('POST to ' + url + ' failed with status: ' + req.status));
                        }
                    }
                };
                req.open('post', url);
                req.setRequestHeader('Content-Type', 'application/json');

                var reportPayload = {stack: stackframes};
                if (errorMsg !== undefined) {
                    reportPayload.message = errorMsg;
                }

                req.send(JSON.stringify(reportPayload));
            });
        }
    };
}));


/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/control/CategoryServiceControl.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/control/CategoryServiceControl.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var CategoryService_1 = __webpack_require__(/*! ../log/category/CategoryService */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryService.js");
var LoggerOptions_1 = __webpack_require__(/*! ../log/LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var DataStructures_1 = __webpack_require__(/*! ../utils/DataStructures */ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js");
/**
 * Implementation class for CategoryServiceControl.
 */
var CategoryServiceControlImpl = (function () {
    function CategoryServiceControlImpl() {
    }
    CategoryServiceControlImpl.prototype.help = function () {
        /* tslint:disable:no-console */
        console.log(CategoryServiceControlImpl._help);
        /* tslint:enable:no-console */
    };
    CategoryServiceControlImpl.prototype.example = function () {
        /* tslint:disable:no-console */
        console.log(CategoryServiceControlImpl._example);
        /* tslint:enable:no-console */
    };
    CategoryServiceControlImpl.prototype.showSettings = function (id) {
        if (id === void 0) { id = "all"; }
        var result = new DataStructures_1.StringBuilder();
        var service = CategoryServiceControlImpl._getCategoryService();
        var categories = CategoryServiceControlImpl._getCategories(id);
        categories.forEach(function (category) {
            CategoryServiceControlImpl._processCategory(service, category, result, 0);
        });
        /* tslint:disable:no-console */
        console.log(result.toString());
        /* tslint:enable:no-console */
    };
    CategoryServiceControlImpl.prototype.change = function (settings) {
        var service = CategoryServiceControlImpl._getCategoryService();
        var categories = CategoryServiceControlImpl._getCategories(settings.category);
        var logLevel = null;
        var formatEnum = null;
        var showCategoryName = null;
        var showTimestamp = null;
        var result = null;
        var addResult = function (value) {
            if (result !== null) {
                result += ", ";
            }
            if (result === null) {
                result = value;
            }
            else {
                result += value;
            }
        };
        addResult("recursive=" + settings.recursive);
        if (typeof settings.logLevel === "string") {
            logLevel = LoggerOptions_1.LogLevel.fromString(settings.logLevel);
            addResult("logLevel=" + settings.logLevel);
        }
        if (typeof settings.logFormat === "string") {
            formatEnum = LoggerOptions_1.DateFormatEnum.fromString(settings.logFormat);
            addResult("logFormat=" + settings.logFormat);
        }
        if (typeof settings.showCategoryName === "boolean") {
            showCategoryName = settings.showCategoryName;
            addResult("showCategoryName=" + settings.showCategoryName);
        }
        if (typeof settings.showTimestamp === "boolean") {
            showTimestamp = settings.showTimestamp;
            addResult("showTimestamp=" + settings.showTimestamp);
        }
        var applyChanges = function (cat) {
            var categorySettings = service.getCategorySettings(cat);
            // Should not happen but make tslint happy
            if (categorySettings !== null) {
                if (logLevel !== null) {
                    categorySettings.logLevel = logLevel;
                }
                if (formatEnum !== null) {
                    categorySettings.logFormat.dateFormat.formatEnum = formatEnum;
                }
                if (showTimestamp !== null) {
                    categorySettings.logFormat.showTimeStamp = showTimestamp;
                }
                if (showCategoryName !== null) {
                    categorySettings.logFormat.showCategoryName = showCategoryName;
                }
            }
        };
        categories.forEach(function (cat) { return CategoryServiceControlImpl._applyToCategory(cat, settings.recursive, applyChanges); });
        /* tslint:disable:no-console */
        console.log("Applied changes: " + result + " to categories '" + settings.category + "'.");
        /* tslint:enable:no-console */
    };
    CategoryServiceControlImpl.prototype.reset = function (id) {
        if (id === void 0) { id = "all"; }
        var service = CategoryServiceControlImpl._getCategoryService();
        var categories = CategoryServiceControlImpl._getCategories(id);
        var applyChanges = function (cat) {
            var categorySettings = service.getCategorySettings(cat);
            var original = service.getOriginalCategorySettings(cat);
            // Should not happen but make tslint happy
            if (categorySettings !== null && original !== null) {
                categorySettings.logLevel = original.logLevel;
                categorySettings.logFormat.dateFormat.formatEnum = original.logFormat.dateFormat.formatEnum;
                categorySettings.logFormat.showTimeStamp = original.logFormat.showTimeStamp;
                categorySettings.logFormat.showCategoryName = original.logFormat.showCategoryName;
            }
        };
        categories.forEach(function (cat) { return CategoryServiceControlImpl._applyToCategory(cat, true, applyChanges); });
        /* tslint:disable:no-console */
        console.log("Applied reset to category: " + id + ".");
        /* tslint:enable:no-console */
    };
    CategoryServiceControlImpl._processCategory = function (service, category, result, indent) {
        var settings = service.getCategorySettings(category);
        if (settings !== null) {
            result.append("  " + category.id + ": ");
            if (indent > 0) {
                for (var i = 0; i < indent; i++) {
                    result.append("  ");
                }
            }
            result.append(category.name + " (" + LoggerOptions_1.LogLevel[settings.logLevel].toString() + "@" + LoggerOptions_1.LoggerType[settings.loggerType].toString() + ")\n");
            if (category.children.length > 0) {
                category.children.forEach(function (child) {
                    CategoryServiceControlImpl._processCategory(service, child, result, indent + 1);
                });
            }
        }
    };
    CategoryServiceControlImpl._applyToCategory = function (category, recursive, apply) {
        apply(category);
        if (recursive) {
            category.children.forEach(function (child) {
                CategoryServiceControlImpl._applyToCategory(child, recursive, apply);
            });
        }
    };
    CategoryServiceControlImpl._getCategoryService = function () {
        return CategoryService_1.CategoryServiceImpl.getInstance();
    };
    CategoryServiceControlImpl._getCategories = function (idCategory) {
        var service = CategoryServiceControlImpl._getCategoryService();
        var categories = [];
        if (idCategory === "all") {
            categories = service.getRootCategories();
        }
        else {
            var category = service.getCategoryById(idCategory);
            if (category === null) {
                throw new Error("Failed to find category with id " + idCategory);
            }
            categories.push(category);
        }
        return categories;
    };
    CategoryServiceControlImpl._help = "\n  help(): void\n    ** Shows this help.\n\n  example(): void\n    ** Shows an example on how to use this.\n\n  showSettings(id: number | \"all\" = \"all\"): void\n    ** Shows settings for a specific category, or for all. The id of categories can be found by calling this method without parameter.\n\n  change(settings: CategoryServiceControlSettings): void\n    ** Changes the current settings for one or all categories.\n    **\n       CategoryServiceControlSettings, properties of object:\n         category: number | \"all\"\n           ** Apply to specific category, or \"all\".\n           ** Required\n\n         recursive: boolean\n           ** Apply to child categories (true) or not.\n           ** Required\n\n         logLevel: \"Fatal\" | \"Error\" | \"Warn\" | \"Info\" | \"Debug\" | \"Trace\" | undefined\n           ** Set log level, undefined will not change the setting.\n           ** Optional\n\n         logFormat: \"Default\" | \"YearMonthDayTime\" | \"YearDayMonthWithFullTime\" | \"YearDayMonthTime\" | undefined\n           ** Set the log format, undefined will not change the setting.\n           ** Optional\n\n         showTimestamp: boolean | undefined\n           ** Whether to show timestamp, undefined will not change the setting.\n           ** Optional\n\n         showCategoryName: boolean | undefined\n           ** Whether to show the category name, undefined will not change the setting.\n           ** Optional\n\n   reset(id: number | \"all\"): void\n     ** Resets everything to original values, for one specific or for all categories.\n";
    CategoryServiceControlImpl._example = "\n  Examples:\n    change({category: \"all\", recursive:true, logLevel: \"Info\"})\n      ** Change loglevel to Info for all categories, apply to child categories as well.\n\n    change({category: 1, recursive:false, logLevel: \"Warn\"})\n      ** Change logLevel for category 1, do not recurse.\n\n    change({category: \"all\", recursive:true, logLevel: \"Debug\", logFormat: \"YearDayMonthTime\", showTimestamp:false, showCategoryName:false})\n      ** Change loglevel to Debug for all categories, apply format, do not show timestamp and category names - recursively to child categories.\n\n";
    return CategoryServiceControlImpl;
}());
exports.CategoryServiceControlImpl = CategoryServiceControlImpl;
//# sourceMappingURL=CategoryServiceControl.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/control/LogGroupControl.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/control/LogGroupControl.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LoggerOptions_1 = __webpack_require__(/*! ../log/LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var LFService_1 = __webpack_require__(/*! ../log/standard/LFService */ "./node_modules/typescript-logging/dist/commonjs/log/standard/LFService.js");
var DataStructures_1 = __webpack_require__(/*! ../utils/DataStructures */ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js");
var LoggerControlImpl = (function () {
    function LoggerControlImpl() {
    }
    LoggerControlImpl.prototype.help = function () {
        /* tslint:disable:no-console */
        console.log(LoggerControlImpl._help);
        /* tslint:enable:no-console */
    };
    LoggerControlImpl.prototype.listFactories = function () {
        var rtSettingsFactories = LoggerControlImpl._getRuntimeSettingsLoggerFactories();
        var result = new DataStructures_1.StringBuilder();
        result.appendLine("Registered LoggerFactories (index / name)");
        for (var i = 0; i < rtSettingsFactories.length; i++) {
            var rtSettingsFactory = rtSettingsFactories[i];
            result.append("  " + i).append(": " + rtSettingsFactory.getName() + "\n");
        }
        /* tslint:disable:no-console */
        console.log(result.toString());
        /* tslint:enable:no-console */
    };
    LoggerControlImpl.prototype.showSettings = function (id) {
        if (id === void 0) { id = "all"; }
        var result = [];
        if (id === "all") {
            var idx_1 = 0;
            LoggerControlImpl._getRuntimeSettingsLoggerFactories().forEach(function (item) {
                result.push(new DataStructures_1.TuplePair(idx_1++, item));
            });
        }
        else {
            var settings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();
            if (id >= 0 && id < settings.length) {
                result.push(new DataStructures_1.TuplePair(id, settings[id]));
            }
            else {
                throw new Error("Requested number: " + id + " was not found.");
            }
        }
        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
            var setting = result_1[_i];
            /* tslint:disable:no-console */
            console.log("  LoggerFactory: " + setting.y.getName() + " (id=" + setting.x + ")");
            var logGroupRuntimeSettings = setting.y.getLogGroupRuntimeSettings();
            for (var g = 0; g < logGroupRuntimeSettings.length; g++) {
                var groupSetting = logGroupRuntimeSettings[g];
                console.log("     LogGroup: (id=" + g + ")");
                console.log("       RegExp: " + groupSetting.logGroupRule.regExp.source);
                console.log("       Level: " + LoggerOptions_1.LogLevel[groupSetting.level].toString());
                console.log("       LoggerType: " + LoggerOptions_1.LoggerType[groupSetting.loggerType].toString());
            }
            /* tslint:enable:no-console */
        }
    };
    LoggerControlImpl.prototype.reset = function (idFactory) {
        if (idFactory === void 0) { idFactory = "all"; }
        var loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();
        var result = [];
        if (idFactory === "all") {
            result = loggerFactoriesSettings;
        }
        else {
            if (idFactory >= 0 && idFactory < loggerFactoriesSettings.length) {
                result.push(loggerFactoriesSettings[idFactory]);
            }
        }
        result.forEach(function (setting) {
            /* tslint:disable:no-console */
            console.log("Reset all settings for factory " + idFactory);
            /* tslint:enable:no-console */
            var control = new LoggerFactoryControlImpl(setting);
            control.reset();
        });
    };
    LoggerControlImpl.prototype.getLoggerFactoryControl = function (idFactory) {
        var loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();
        if (idFactory >= 0 && idFactory < loggerFactoriesSettings.length) {
            return new LoggerFactoryControlImpl(loggerFactoriesSettings[idFactory]);
        }
        throw new Error("idFactory is invalid (less than 0) or non existing id.");
    };
    LoggerControlImpl._getRuntimeSettingsLoggerFactories = function () {
        return LoggerControlImpl._getSettings().getRuntimeSettingsForLoggerFactories();
    };
    LoggerControlImpl._getSettings = function () {
        return LFService_1.LFService.getRuntimeSettings();
    };
    LoggerControlImpl._help = "\n  help(): void\n    ** Shows this help.\n\n  listFactories(): void\n    ** List all registered LoggerFactories with associated log groups with respective ids (ids can be used to target a factory and/or group).\n\n  showSettings(idFactory: number | \"all\"): void\n    ** Show log group settings for idFactory (use listFactories to find id for a LoggerFactory). If idFactory is \"all\" shows all factories.\n\n  getLoggerFactoryControl(idFactory: number): LoggerFactoryControl\n    ** Return LoggerFactoryControl when found for given idFactory or throws Error if invalid or null, get the id by using listFactories()\n\n  reset(idFactory: number | \"all\"): void\n    ** Resets given factory or all factories back to original values.\n";
    return LoggerControlImpl;
}());
exports.LoggerControlImpl = LoggerControlImpl;
var LoggerFactoryControlImpl = (function () {
    function LoggerFactoryControlImpl(settings) {
        this._settings = settings;
    }
    LoggerFactoryControlImpl.prototype.help = function () {
        /* tslint:disable:no-console */
        console.log(LoggerFactoryControlImpl._help);
        /* tslint:enable:no-console */
    };
    LoggerFactoryControlImpl.prototype.example = function () {
        /* tslint:disable:no-console */
        console.log(LoggerFactoryControlImpl._example);
        /* tslint:enable:no-console */
    };
    LoggerFactoryControlImpl.prototype.showSettings = function (id) {
        if (id === void 0) { id = "all"; }
        var result = new DataStructures_1.StringBuilder();
        var logGroupRuntimeSettings = this._settings.getLogGroupRuntimeSettings();
        result.appendLine("Registered LogGroups (index / expression)");
        for (var i = 0; i < logGroupRuntimeSettings.length; i++) {
            var logGroupRuntimeSetting = logGroupRuntimeSettings[i];
            result.appendLine("  " + i + ": " + logGroupRuntimeSetting.logGroupRule.regExp.source + ", logLevel=" +
                LoggerOptions_1.LogLevel[logGroupRuntimeSetting.level].toString() + ", showTimestamp=" + logGroupRuntimeSetting.logFormat.showTimeStamp +
                ", showLoggerName=" + logGroupRuntimeSetting.logFormat.showLoggerName +
                ", format=" + LoggerOptions_1.DateFormatEnum[logGroupRuntimeSetting.logFormat.dateFormat.formatEnum].toString());
        }
        /* tslint:disable:no-console */
        console.log(result.toString());
        /* tslint:enable:no-console */
    };
    LoggerFactoryControlImpl.prototype.change = function (settings) {
        var logGroupRuntimeSettings = this._getLogGroupRunTimeSettingsFor(settings.group);
        var logLevel = null;
        var formatEnum = null;
        var showLoggerName = null;
        var showTimestamp = null;
        var result = null;
        var addResult = function (value) {
            if (result !== null) {
                result += ", ";
            }
            if (result === null) {
                result = value;
            }
            else {
                result += value;
            }
        };
        if (typeof settings.logLevel === "string") {
            logLevel = LoggerOptions_1.LogLevel.fromString(settings.logLevel);
            addResult("logLevel=" + settings.logLevel);
        }
        if (typeof settings.logFormat === "string") {
            formatEnum = LoggerOptions_1.DateFormatEnum.fromString(settings.logFormat);
            addResult("logFormat=" + settings.logFormat);
        }
        if (typeof settings.showLoggerName === "boolean") {
            showLoggerName = settings.showLoggerName;
            addResult("showLoggerName=" + settings.showLoggerName);
        }
        if (typeof settings.showTimestamp === "boolean") {
            showTimestamp = settings.showTimestamp;
            addResult("showTimestamp=" + settings.showTimestamp);
        }
        logGroupRuntimeSettings.forEach(function (s) {
            if (logLevel !== null) {
                s.level = logLevel;
            }
            if (formatEnum !== null) {
                s.logFormat.dateFormat.formatEnum = formatEnum;
            }
            if (showTimestamp !== null) {
                s.logFormat.showTimeStamp = showTimestamp;
            }
            if (showLoggerName !== null) {
                s.logFormat.showLoggerName = showLoggerName;
            }
        });
        /* tslint:disable:no-console */
        console.log("Applied changes: " + result + " to log groups '" + settings.group + "'.");
        /* tslint:enable:no-console */
    };
    LoggerFactoryControlImpl.prototype.reset = function (idGroup) {
        if (idGroup === void 0) { idGroup = "all"; }
        var settings = this._getLogGroupRunTimeSettingsFor(idGroup);
        for (var _i = 0, settings_1 = settings; _i < settings_1.length; _i++) {
            var setting = settings_1[_i];
            setting.level = setting.logGroupRule.level;
            setting.logFormat.showTimeStamp = setting.logGroupRule.logFormat.showTimeStamp;
            setting.logFormat.showLoggerName = setting.logGroupRule.logFormat.showLoggerName;
            setting.logFormat.dateFormat.formatEnum = setting.logGroupRule.logFormat.dateFormat.formatEnum;
        }
        /* tslint:disable:no-console */
        console.log("Reset all settings for group " + idGroup);
        /* tslint:enable:no-console */
    };
    LoggerFactoryControlImpl.prototype._getLogGroupRunTimeSettingsFor = function (idGroup) {
        var settings = [];
        if (idGroup === "all") {
            settings = this._settings.getLogGroupRuntimeSettings();
        }
        else {
            this._checkIndex(idGroup);
            settings.push(this._settings.getLogGroupRuntimeSettings()[idGroup]);
        }
        return settings;
    };
    LoggerFactoryControlImpl.prototype._checkIndex = function (index) {
        if (index < 0 || index >= this._settings.getLogGroupRuntimeSettings().length) {
            throw new Error("Invalid index, use listLogGroups to find out a valid one.");
        }
    };
    LoggerFactoryControlImpl._help = "\n  help(): void\n    ** Shows this help.\n\n  example(): void\n    ** Shows an example of usage.\n\n  showSettings(id: number | \"all\"): void\n    ** Prints settings for given group id, \"all\" for all group.\n\n  change(settings: LogGroupControlSettings): void\n    ** Changes the current settings for one or all log groups.\n    **\n       LogGroupControlSettings, properties of object:\n         group: number | \"all\"\n           ** Apply to specific group, or \"all\".\n           ** Required\n\n         logLevel: \"Fatal\" | \"Error\" | \"Warn\" | \"Info\" | \"Debug\" | \"Trace\" | undefined\n           ** Set log level, undefined will not change the setting.\n           ** Optional\n\n         logFormat: \"Default\" | \"YearMonthDayTime\" | \"YearDayMonthWithFullTime\" | \"YearDayMonthTime\" | undefined\n           ** Set the log format, undefined will not change the setting.\n           ** Optional\n\n         showTimestamp: boolean | undefined\n           ** Whether to show timestamp, undefined will not change the setting.\n           ** Optional\n\n         showLoggerName: boolean | undefined\n           ** Whether to show the logger name, undefined will not change the setting.\n           ** Optional\n\n  reset(id: number | \"all\"): void\n    ** Resets everything to original values, for one specific or for all groups.\n\n  help():\n    ** Shows this help.\n";
    LoggerFactoryControlImpl._example = "\n  Examples:\n    change({group: \"all\", logLevel: \"Info\"})\n      ** Change loglevel to Info for all groups.\n\n    change({group: 1, recursive:false, logLevel: \"Warn\"})\n      ** Change logLevel for group 1 to Warn.\n\n    change({group: \"all\", logLevel: \"Debug\", logFormat: \"YearDayMonthTime\", showTimestamp:false, showLoggerName:false})\n      ** Change loglevel to Debug for all groups, apply format, do not show timestamp and logger names.\n";
    return LoggerFactoryControlImpl;
}());
//# sourceMappingURL=LogGroupControl.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/extension/ExtensionHelper.js":
/*!************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/extension/ExtensionHelper.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var CategoryService_1 = __webpack_require__(/*! ../log/category/CategoryService */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryService.js");
var LoggerOptions_1 = __webpack_require__(/*! ../log/LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var MessageUtils_1 = __webpack_require__(/*! ../utils/MessageUtils */ "./node_modules/typescript-logging/dist/commonjs/utils/MessageUtils.js");
var ExtensionHelper = (function () {
    function ExtensionHelper() {
        // Private constructor
    }
    /**
     * Enables the window event listener to listen to messages (from extensions).
     * Can be registered/enabled only once.
     */
    ExtensionHelper.register = function () {
        if (!ExtensionHelper.registered) {
            var listener = function (evt) {
                var msg = evt.data;
                if (msg !== null) {
                    ExtensionHelper.processMessageFromExtension(msg);
                }
            };
            if (typeof window !== "undefined" && typeof window.removeEventListener !== "undefined" && typeof window.addEventListener !== "undefined") {
                window.removeEventListener("message", listener);
                window.addEventListener("message", listener);
                ExtensionHelper.registered = true;
            }
        }
    };
    ExtensionHelper.processMessageFromExtension = function (msg) {
        if (!ExtensionHelper.registered) {
            return;
        }
        /* tslint:disable:no-console */
        if (msg.from === "tsl-extension") {
            var data = msg.data;
            switch (data.type) {
                case "register":
                    ExtensionHelper.enableExtensionIntegration();
                    break;
                case "request-change-loglevel":
                    var valueRequest = data.value;
                    var catsApplied = ExtensionHelper.applyLogLevel(valueRequest.categoryId, valueRequest.logLevel, valueRequest.recursive);
                    if (catsApplied.length > 0) {
                        // Send changes back
                        ExtensionHelper.sendCategoriesRuntimeUpdateMessage(catsApplied);
                    }
                    break;
                default:
                    console.log("Unknown command to process message from extension, command was: " + data.type);
                    break;
            }
        }
        /* tslint:enable:no-console */
    };
    ExtensionHelper.sendCategoryLogMessage = function (msg) {
        if (!ExtensionHelper.registered) {
            return;
        }
        var categoryIds = msg.categories.map(function (cat) {
            return cat.id;
        });
        var content = {
            type: "log-message",
            value: {
                categories: categoryIds,
                errorAsStack: msg.errorAsStack,
                formattedMessage: MessageUtils_1.MessageFormatUtils.renderDefaultMessage(msg, false),
                logLevel: LoggerOptions_1.LogLevel[msg.level].toString(),
                message: msg.messageAsString,
                resolvedErrorMessage: msg.isResolvedErrorMessage
            }
        };
        var message = {
            data: content,
            from: "tsl-logging",
        };
        ExtensionHelper.sendMessage(message);
    };
    ExtensionHelper.sendCategoriesRuntimeUpdateMessage = function (categories) {
        if (!ExtensionHelper.registered) {
            return;
        }
        var service = CategoryService_1.CategoryServiceImpl.getInstance();
        var catLevels = { categories: Array() };
        categories.forEach(function (cat) {
            var catSettings = service.getCategorySettings(cat);
            if (catSettings != null) {
                catLevels.categories.push({ id: cat.id, logLevel: LoggerOptions_1.LogLevel[catSettings.logLevel].toString() });
            }
        });
        var content = {
            type: "categories-rt-update",
            value: catLevels,
        };
        var message = {
            data: content,
            from: "tsl-logging"
        };
        ExtensionHelper.sendMessage(message);
    };
    ExtensionHelper.sendRootCategoriesToExtension = function () {
        if (!ExtensionHelper.registered) {
            return;
        }
        var categories = CategoryService_1.CategoryServiceImpl.getInstance().getRootCategories().map(function (cat) {
            return ExtensionHelper.getCategoryAsJSON(cat);
        });
        var content = {
            type: "root-categories-tree",
            value: categories
        };
        var message = {
            data: content,
            from: "tsl-logging"
        };
        ExtensionHelper.sendMessage(message);
    };
    /**
     * If extension integration is enabled, will send the root categories over to the extension.
     * Otherwise does nothing.
     */
    ExtensionHelper.getCategoryAsJSON = function (cat) {
        var childCategories = cat.children.map(function (child) {
            return ExtensionHelper.getCategoryAsJSON(child);
        });
        return {
            children: childCategories,
            id: cat.id,
            logLevel: LoggerOptions_1.LogLevel[cat.logLevel].toString(),
            name: cat.name,
            parentId: (cat.parent != null ? cat.parent.id : null),
        };
    };
    ExtensionHelper.applyLogLevel = function (categoryId, logLevel, recursive) {
        var cats = [];
        var category = CategoryService_1.CategoryServiceImpl.getInstance().getCategoryById(categoryId);
        if (category != null) {
            ExtensionHelper._applyLogLevelRecursive(category, LoggerOptions_1.LogLevel.fromString(logLevel), recursive, cats);
        }
        else {
            /* tslint:disable:no-console */
            console.log("Could not change log level, failed to find category with id: " + categoryId);
            /* tslint:enable:no-console */
        }
        return cats;
    };
    ExtensionHelper._applyLogLevelRecursive = function (category, logLevel, recursive, cats) {
        var categorySettings = CategoryService_1.CategoryServiceImpl.getInstance().getCategorySettings(category);
        if (categorySettings != null) {
            categorySettings.logLevel = logLevel;
            cats.push(category);
            if (recursive) {
                category.children.forEach(function (child) {
                    ExtensionHelper._applyLogLevelRecursive(child, logLevel, recursive, cats);
                });
            }
        }
    };
    ExtensionHelper.getAllCategories = function () {
        var cats = [];
        var addCats = function (cat, allCats) {
            allCats.push(cat);
            cat.children.forEach(function (catChild) {
                addCats(catChild, allCats);
            });
        };
        CategoryService_1.CategoryServiceImpl.getInstance().getRootCategories().forEach(function (cat) {
            addCats(cat, cats);
        });
        return cats;
    };
    ExtensionHelper.sendMessage = function (msg) {
        if (!ExtensionHelper.registered) {
            return;
        }
        if (typeof window !== "undefined" && typeof window.postMessage !== "undefined") {
            window.postMessage(msg, "*");
        }
    };
    /**
     *  Extension framework will call this to enable the integration between two,
     *  after this call the framework will respond with postMessage() messages.
     */
    ExtensionHelper.enableExtensionIntegration = function () {
        if (!ExtensionHelper.registered) {
            return;
        }
        var instance = CategoryService_1.CategoryServiceImpl.getInstance();
        instance.enableExtensionIntegration();
        // Send over all categories
        ExtensionHelper.sendRootCategoriesToExtension();
        // Send over the current runtime levels
        var cats = ExtensionHelper.getAllCategories();
        ExtensionHelper.sendCategoriesRuntimeUpdateMessage(cats);
    };
    ExtensionHelper.registered = false;
    return ExtensionHelper;
}());
exports.ExtensionHelper = ExtensionHelper;
//# sourceMappingURL=ExtensionHelper.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js":
/*!****************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Log level for a logger.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Trace"] = 0] = "Trace";
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Warn"] = 3] = "Warn";
    LogLevel[LogLevel["Error"] = 4] = "Error";
    LogLevel[LogLevel["Fatal"] = 5] = "Fatal";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/* tslint:disable:no-namespace */
(function (LogLevel) {
    /**
     * Returns LogLevel based on string representation
     * @param val Value
     * @returns {LogLevel}, Error is thrown if invalid.
     */
    function fromString(val) {
        if (val == null) {
            throw new Error("Argument must be set");
        }
        switch (val.toLowerCase()) {
            case "trace":
                return LogLevel.Trace;
            case "debug":
                return LogLevel.Debug;
            case "info":
                return LogLevel.Info;
            case "warn":
                return LogLevel.Warn;
            case "error":
                return LogLevel.Error;
            case "fatal":
                return LogLevel.Fatal;
            default:
                throw new Error("Unsupported value for conversion: " + val);
        }
    }
    LogLevel.fromString = fromString;
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/* tslint:disable:enable-namespace */
/**
 * Where to log to? Pick one of the constants. Custom requires a callback to be present, see LFService.createLoggerFactory(...)
 * where this comes into play.
 */
var LoggerType;
(function (LoggerType) {
    LoggerType[LoggerType["Console"] = 0] = "Console";
    LoggerType[LoggerType["MessageBuffer"] = 1] = "MessageBuffer";
    LoggerType[LoggerType["Custom"] = 2] = "Custom";
})(LoggerType = exports.LoggerType || (exports.LoggerType = {}));
/**
 * Defines several date enums used for formatting a date.
 */
var DateFormatEnum;
(function (DateFormatEnum) {
    /**
     * Displays as: year-month-day hour:minute:second,millis -> 1999-02-12 23:59:59,123
     * Note the date separator can be set separately.
     */
    DateFormatEnum[DateFormatEnum["Default"] = 0] = "Default";
    /**
     * Displays as: year-month-day hour:minute:second -> 1999-02-12 23:59:59
     * Note the date separator can be set separately.
     */
    DateFormatEnum[DateFormatEnum["YearMonthDayTime"] = 1] = "YearMonthDayTime";
    /**
     * Displays as: year-day-month hour:minute:second,millis -> 1999-12-02 23:59:59,123
     * Note the date separator can be set separately.
     */
    DateFormatEnum[DateFormatEnum["YearDayMonthWithFullTime"] = 2] = "YearDayMonthWithFullTime";
    /**
     * Displays as: year-day-month hour:minute:second -> 1999-12-02 23:59:59
     * Note the date separator can be set separately.
     */
    DateFormatEnum[DateFormatEnum["YearDayMonthTime"] = 3] = "YearDayMonthTime";
})(DateFormatEnum = exports.DateFormatEnum || (exports.DateFormatEnum = {}));
/* tslint:disable:no-namespace */
(function (DateFormatEnum) {
    /**
     * Returns LogLevel based on string representation
     * @param val Value
     * @returns {LogLevel}, Error is thrown if invalid.
     */
    function fromString(val) {
        if (val == null) {
            throw new Error("Argument must be set");
        }
        switch (val.toLowerCase()) {
            case "default":
                return DateFormatEnum.Default;
            case "yearmonthdayTime":
                return DateFormatEnum.YearMonthDayTime;
            case "yeardaymonthwithfulltime":
                return DateFormatEnum.YearDayMonthWithFullTime;
            case "yeardaymonthtime":
                return DateFormatEnum.YearDayMonthTime;
            default:
                throw new Error("Unsupported value for conversion: " + val);
        }
    }
    DateFormatEnum.fromString = fromString;
})(DateFormatEnum = exports.DateFormatEnum || (exports.DateFormatEnum = {}));
/* tslint:disable:enable-namespace */
/**
 * DateFormat class, stores data on how to format a date.
 */
var DateFormat = (function () {
    /**
     * Constructor to define the dateformat used for logging, can be called empty as it uses defaults.
     * @param formatEnum DateFormatEnum, use one of the constants from the enum. Defaults to DateFormatEnum.Default
     * @param dateSeparator Separator used between dates, defaults to -
     */
    function DateFormat(formatEnum, dateSeparator) {
        if (formatEnum === void 0) { formatEnum = DateFormatEnum.Default; }
        if (dateSeparator === void 0) { dateSeparator = "-"; }
        this._formatEnum = formatEnum;
        this._dateSeparator = dateSeparator;
    }
    Object.defineProperty(DateFormat.prototype, "formatEnum", {
        get: function () {
            return this._formatEnum;
        },
        set: function (value) {
            this._formatEnum = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateFormat.prototype, "dateSeparator", {
        get: function () {
            return this._dateSeparator;
        },
        set: function (value) {
            this._dateSeparator = value;
        },
        enumerable: true,
        configurable: true
    });
    DateFormat.prototype.copy = function () {
        return new DateFormat(this._formatEnum, this._dateSeparator);
    };
    return DateFormat;
}());
exports.DateFormat = DateFormat;
/**
 * Information about the log format, what will a log line look like?
 */
var LogFormat = (function () {
    /**
     * Constructor to create a LogFormat. Can be created without parameters where it will use sane defaults.
     * @param dateFormat DateFormat (what needs the date look like in the log line)
     * @param showTimeStamp Show date timestamp at all?
     * @param showLoggerName Show the logger name?
     */
    function LogFormat(dateFormat, showTimeStamp, showLoggerName) {
        if (dateFormat === void 0) { dateFormat = new DateFormat(); }
        if (showTimeStamp === void 0) { showTimeStamp = true; }
        if (showLoggerName === void 0) { showLoggerName = true; }
        this._showTimeStamp = true;
        this._showLoggerName = true;
        this._dateFormat = dateFormat;
        this._showTimeStamp = showTimeStamp;
        this._showLoggerName = showLoggerName;
    }
    Object.defineProperty(LogFormat.prototype, "dateFormat", {
        get: function () {
            return this._dateFormat;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogFormat.prototype, "showTimeStamp", {
        get: function () {
            return this._showTimeStamp;
        },
        set: function (value) {
            this._showTimeStamp = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogFormat.prototype, "showLoggerName", {
        get: function () {
            return this._showLoggerName;
        },
        set: function (value) {
            this._showLoggerName = value;
        },
        enumerable: true,
        configurable: true
    });
    return LogFormat;
}());
exports.LogFormat = LogFormat;
/**
 * Information about the log format, what will a log line look like?
 */
var CategoryLogFormat = (function () {
    /**
     * Create an instance defining the category log format used.
     * @param dateFormat Date format (uses default), for details see DateFormat class.
     * @param showTimeStamp True to show timestamp in the logging, defaults to true.
     * @param showCategoryName True to show category name in the logging, defaults to true.
     */
    function CategoryLogFormat(dateFormat, showTimeStamp, showCategoryName) {
        if (dateFormat === void 0) { dateFormat = new DateFormat(); }
        if (showTimeStamp === void 0) { showTimeStamp = true; }
        if (showCategoryName === void 0) { showCategoryName = true; }
        this._dateFormat = dateFormat;
        this._showTimeStamp = showTimeStamp;
        this._showCategoryName = showCategoryName;
    }
    Object.defineProperty(CategoryLogFormat.prototype, "dateFormat", {
        get: function () {
            return this._dateFormat;
        },
        set: function (value) {
            this._dateFormat = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogFormat.prototype, "showTimeStamp", {
        get: function () {
            return this._showTimeStamp;
        },
        set: function (value) {
            this._showTimeStamp = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogFormat.prototype, "showCategoryName", {
        get: function () {
            return this._showCategoryName;
        },
        set: function (value) {
            this._showCategoryName = value;
        },
        enumerable: true,
        configurable: true
    });
    CategoryLogFormat.prototype.copy = function () {
        return new CategoryLogFormat(this._dateFormat.copy(), this._showTimeStamp, this._showCategoryName);
    };
    return CategoryLogFormat;
}());
exports.CategoryLogFormat = CategoryLogFormat;
//# sourceMappingURL=LoggerOptions.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/AbstractCategoryLogger.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/AbstractCategoryLogger.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var DataStructures_1 = __webpack_require__(/*! ../../utils/DataStructures */ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js");
var MessageUtils_1 = __webpack_require__(/*! ../../utils/MessageUtils */ "./node_modules/typescript-logging/dist/commonjs/utils/MessageUtils.js");
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var CategoryLogMessageImpl = (function () {
    function CategoryLogMessageImpl(message, error, categories, date, level, logFormat, ready) {
        this._resolvedErrorMessage = false;
        this._errorAsStack = null;
        this._message = message;
        this._error = error;
        this._categories = categories;
        this._date = date;
        this._level = level;
        this._logFormat = logFormat;
        this._ready = ready;
    }
    Object.defineProperty(CategoryLogMessageImpl.prototype, "message", {
        get: function () {
            return this._message;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "error", {
        get: function () {
            return this._error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "categories", {
        get: function () {
            return this._categories;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "date", {
        get: function () {
            return this._date;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "level", {
        get: function () {
            return this._level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "logFormat", {
        get: function () {
            return this._logFormat;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "isMessageLogData", {
        get: function () {
            return typeof (this._message) !== "string";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "messageAsString", {
        get: function () {
            if (typeof (this._message) === "string") {
                return this._message;
            }
            return this._message.msg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "logData", {
        get: function () {
            var result = null;
            if (typeof (this._message) !== "string") {
                result = this.message;
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "isResolvedErrorMessage", {
        get: function () {
            return this._resolvedErrorMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryLogMessageImpl.prototype, "errorAsStack", {
        get: function () {
            return this._errorAsStack;
        },
        set: function (stack) {
            this._errorAsStack = stack;
        },
        enumerable: true,
        configurable: true
    });
    CategoryLogMessageImpl.prototype.isReady = function () {
        return this._ready;
    };
    CategoryLogMessageImpl.prototype.setReady = function (value) {
        this._ready = value;
    };
    Object.defineProperty(CategoryLogMessageImpl.prototype, "resolvedErrorMessage", {
        get: function () {
            return this._resolvedErrorMessage;
        },
        set: function (value) {
            this._resolvedErrorMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    return CategoryLogMessageImpl;
}());
/**
 * Abstract category logger, use as your base class for new type of loggers (it
 * saves you a lot of work) and override doLog(CategoryLogMessage). The message argument
 * provides full access to anything related to the logging event.
 * If you just want the standard line of logging, call: this.createDefaultLogMessage(msg) on
 * this class which will return you the formatted log message as string (e.g. the
 * default loggers all use this).
 */
var AbstractCategoryLogger = (function () {
    function AbstractCategoryLogger(rootCategory, runtimeSettings) {
        this.allMessages = new DataStructures_1.LinkedList();
        this.rootCategory = rootCategory;
        this.runtimeSettings = runtimeSettings;
    }
    AbstractCategoryLogger.prototype.trace = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        this._log.apply(this, [LoggerOptions_1.LogLevel.Trace, msg, null, false].concat(categories));
    };
    AbstractCategoryLogger.prototype.debug = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        this._log.apply(this, [LoggerOptions_1.LogLevel.Debug, msg, null, false].concat(categories));
    };
    AbstractCategoryLogger.prototype.info = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        this._log.apply(this, [LoggerOptions_1.LogLevel.Info, msg, null, false].concat(categories));
    };
    AbstractCategoryLogger.prototype.warn = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        this._log.apply(this, [LoggerOptions_1.LogLevel.Warn, msg, null, false].concat(categories));
    };
    AbstractCategoryLogger.prototype.error = function (msg, error) {
        var categories = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            categories[_i - 2] = arguments[_i];
        }
        this._log.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, false].concat(categories));
    };
    AbstractCategoryLogger.prototype.fatal = function (msg, error) {
        var categories = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            categories[_i - 2] = arguments[_i];
        }
        this._log.apply(this, [LoggerOptions_1.LogLevel.Fatal, msg, error, false].concat(categories));
    };
    AbstractCategoryLogger.prototype.resolved = function (msg, error) {
        var categories = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            categories[_i - 2] = arguments[_i];
        }
        this._log.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, true].concat(categories));
    };
    AbstractCategoryLogger.prototype.log = function (level, msg, error) {
        var categories = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            categories[_i - 3] = arguments[_i];
        }
        this._log.apply(this, [level, msg, error, false].concat(categories));
    };
    AbstractCategoryLogger.prototype.getRootCategory = function () {
        return this.rootCategory;
    };
    AbstractCategoryLogger.prototype.createDefaultLogMessage = function (msg) {
        return MessageUtils_1.MessageFormatUtils.renderDefaultMessage(msg, true);
    };
    /**
     * Return optional message formatter. All LoggerTypes (except custom) will see if
     * they have this, and if so use it to log.
     * @returns {((message:CategoryLogMessage)=>string)|null}
     */
    AbstractCategoryLogger.prototype._getMessageFormatter = function () {
        var categorySettings = this.runtimeSettings.getCategorySettings(this.rootCategory);
        // Should not happen but make ts happy
        if (categorySettings === null) {
            throw new Error("Did not find CategorySettings for rootCategory: " + this.rootCategory.name);
        }
        return categorySettings.formatterLogMessage;
    };
    AbstractCategoryLogger.prototype._log = function (level, msg, error, resolved) {
        if (error === void 0) { error = null; }
        if (resolved === void 0) { resolved = false; }
        var categories = [];
        for (var _i = 4; _i < arguments.length; _i++) {
            categories[_i - 4] = arguments[_i];
        }
        // this._logInternal(level, () => msg, () => error, resolved, ...categories);
        var functionMessage = function () {
            if (typeof msg === "function") {
                return msg();
            }
            return msg;
        };
        var functionError = function () {
            if (typeof error === "function") {
                return error();
            }
            return error;
        };
        this._logInternal.apply(this, [level, functionMessage, functionError, resolved].concat(categories));
    };
    AbstractCategoryLogger.prototype._logInternal = function (level, msg, error, resolved) {
        var _this = this;
        var categories = [];
        for (var _i = 4; _i < arguments.length; _i++) {
            categories[_i - 4] = arguments[_i];
        }
        var logCategories = [this.rootCategory];
        // Log root category by default if none present
        if (typeof categories !== "undefined" && categories.length > 0) {
            logCategories = logCategories.concat(categories.filter(function (c) { return c !== _this.rootCategory; }));
        }
        var _loop_1 = function (i) {
            var category = logCategories[i];
            if (category === null) {
                throw new Error("Cannot have a null element within categories, at index=" + i);
            }
            var settings = this_1.runtimeSettings.getCategorySettings(category);
            if (settings === null) {
                throw new Error("Category with path: " + category.getCategoryPath() + " is not registered with this logger, maybe " +
                    "you registered it with a different root logger?");
            }
            if (settings.logLevel <= level) {
                var actualError = error !== null ? error() : null;
                if (actualError === null) {
                    var logMessage = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, true);
                    logMessage.resolvedErrorMessage = resolved;
                    this_1.allMessages.addTail(logMessage);
                    this_1.processMessages();
                }
                else {
                    var logMessage_1 = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, false);
                    logMessage_1.resolvedErrorMessage = resolved;
                    this_1.allMessages.addTail(logMessage_1);
                    MessageUtils_1.MessageFormatUtils.renderError(actualError).then(function (stack) {
                        logMessage_1.errorAsStack = stack;
                        logMessage_1.setReady(true);
                        _this.processMessages();
                    }).catch(function () {
                        logMessage_1.errorAsStack = "<UNKNOWN> unable to get stack.";
                        logMessage_1.setReady(true);
                        _this.processMessages();
                    });
                }
                return "break";
            }
        };
        var this_1 = this;
        // Get the runtime levels for given categories. If their level is lower than given level, we log.
        // In addition we pass along which category/categories we log this statement for.
        for (var i = 0; i < logCategories.length; i++) {
            var state_1 = _loop_1(i);
            if (state_1 === "break")
                break;
        }
    };
    AbstractCategoryLogger.prototype.processMessages = function () {
        // Basically we wait until errors are resolved (those messages
        // may not be ready).
        var msgs = this.allMessages;
        if (msgs.getSize() > 0) {
            do {
                var msg = msgs.getHead();
                if (msg != null) {
                    if (!msg.isReady()) {
                        break;
                    }
                    msgs.removeHead();
                    this.doLog(msg);
                }
            } while (msgs.getSize() > 0);
        }
    };
    return AbstractCategoryLogger;
}());
exports.AbstractCategoryLogger = AbstractCategoryLogger;
//# sourceMappingURL=AbstractCategoryLogger.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/Category.js":
/*!********************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/Category.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var CategoryService_1 = __webpack_require__(/*! ./CategoryService */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryService.js");
/**
 * Category for use with categorized logging.
 * At minimum you need one category, which will serve as the root category.
 * You can create child categories (like a tree). You can have multiple root
 * categories.
 */
var Category = (function () {
    function Category(name, parent) {
        if (parent === void 0) { parent = null; }
        this._children = [];
        this._logLevel = LoggerOptions_1.LogLevel.Error;
        if (name.indexOf("#") !== -1) {
            throw new Error("Cannot use # in a name of a Category");
        }
        this._id = Category.nextId();
        this._name = name;
        this._parent = parent;
        if (this._parent !== null) {
            this._parent._children.push(this);
        }
        CategoryService_1.CategoryServiceImpl.getInstance().registerCategory(this);
    }
    Object.defineProperty(Category.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Category.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Category.prototype, "children", {
        get: function () {
            return this._children;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Category.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        enumerable: true,
        configurable: true
    });
    Category.prototype.trace = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        this.loadCategoryLogger();
        (_a = this._logger).trace.apply(_a, [msg].concat(categories));
        var _a;
    };
    Category.prototype.debug = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        this.loadCategoryLogger();
        (_a = this._logger).debug.apply(_a, [msg].concat(categories));
        var _a;
    };
    Category.prototype.info = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        this.loadCategoryLogger();
        (_a = this._logger).info.apply(_a, [msg].concat(categories));
        var _a;
    };
    Category.prototype.warn = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        this.loadCategoryLogger();
        (_a = this._logger).warn.apply(_a, [msg].concat(categories));
        var _a;
    };
    Category.prototype.error = function (msg, error) {
        var categories = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            categories[_i - 2] = arguments[_i];
        }
        this.loadCategoryLogger();
        (_a = this._logger).error.apply(_a, [msg, error].concat(categories));
        var _a;
    };
    Category.prototype.fatal = function (msg, error) {
        var categories = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            categories[_i - 2] = arguments[_i];
        }
        this.loadCategoryLogger();
        (_a = this._logger).fatal.apply(_a, [msg, error].concat(categories));
        var _a;
    };
    Category.prototype.resolved = function (msg, error) {
        var categories = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            categories[_i - 2] = arguments[_i];
        }
        this.loadCategoryLogger();
        (_a = this._logger).resolved.apply(_a, [msg, error].concat(categories));
        var _a;
    };
    Category.prototype.log = function (level, msg, error) {
        var categories = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            categories[_i - 3] = arguments[_i];
        }
        this.loadCategoryLogger();
        (_a = this._logger).log.apply(_a, [level, msg, error].concat(categories));
        var _a;
    };
    Category.prototype.getCategoryPath = function () {
        var result = this.name;
        var cat = this.parent;
        while (cat != null) {
            result = cat.name + "#" + result;
            cat = cat.parent;
        }
        return result;
    };
    Object.defineProperty(Category.prototype, "id", {
        /**
         * Returns the id for this category (this
         * is for internal purposes only).
         * @returns {number} Id
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Category.prototype.loadCategoryLogger = function () {
        if (!this._logger) {
            this._logger = CategoryService_1.CategoryServiceImpl.getInstance().getLogger(this);
        }
        if (typeof this._logger === "undefined" || this._logger === null) {
            throw new Error("Failed to load a logger for category (should not happen): " + this.name);
        }
    };
    Category.nextId = function () {
        return Category.currentId++;
    };
    Category.currentId = 1;
    return Category;
}());
exports.Category = Category;
//# sourceMappingURL=Category.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryConfiguration.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/CategoryConfiguration.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
/**
 * Default configuration, can be used to initially set a different default configuration
 * on the CategoryServiceFactory. This will be applied to all categories already registered (or
 * registered in the future). Can also be applied to one Category (and childs).
 */
var CategoryConfiguration = (function () {
    /**
     * Create a new instance
     * @param logLevel Log level for all loggers, default is LogLevel.Error
     * @param loggerType Where to log, default is LoggerType.Console
     * @param logFormat What logging format to use, use default instance, for default values see CategoryLogFormat.
     * @param callBackLogger Optional callback, if LoggerType.Custom is used as loggerType. In that case must return a new Logger instance.
     *            It is recommended to extend AbstractCategoryLogger to make your custom logger.
     */
    function CategoryConfiguration(logLevel, loggerType, logFormat, callBackLogger) {
        if (logLevel === void 0) { logLevel = LoggerOptions_1.LogLevel.Error; }
        if (loggerType === void 0) { loggerType = LoggerOptions_1.LoggerType.Console; }
        if (logFormat === void 0) { logFormat = new LoggerOptions_1.CategoryLogFormat(); }
        if (callBackLogger === void 0) { callBackLogger = null; }
        this._formatterLogMessage = null;
        this._logLevel = logLevel;
        this._loggerType = loggerType;
        this._logFormat = logFormat;
        this._callBackLogger = callBackLogger;
        if (this._loggerType === LoggerOptions_1.LoggerType.Custom && this.callBackLogger === null) {
            throw new Error("If you specify loggerType to be Custom, you must provide the callBackLogger argument");
        }
    }
    Object.defineProperty(CategoryConfiguration.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryConfiguration.prototype, "loggerType", {
        get: function () {
            return this._loggerType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryConfiguration.prototype, "logFormat", {
        get: function () {
            return this._logFormat;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryConfiguration.prototype, "callBackLogger", {
        get: function () {
            return this._callBackLogger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryConfiguration.prototype, "formatterLogMessage", {
        /**
         * Get the formatterLogMessage function, see comment on the setter.
         * @returns {((message:CategoryLogMessage)=>string)|null}
         */
        get: function () {
            return this._formatterLogMessage;
        },
        /**
         * Set the default formatterLogMessage function, if set it is applied to all type of loggers except for a custom logger.
         * By default this is null (not set). You can assign a function to allow custom formatting of a log message.
         * Each log message will call this function then and expects your function to format the message and return a string.
         * Will throw an error if you attempt to set a formatterLogMessage if the LoggerType is custom.
         * @param value The formatter function, or null to reset it.
         */
        set: function (value) {
            if (value !== null && this._loggerType === LoggerOptions_1.LoggerType.Custom) {
                throw new Error("You cannot specify a formatter for log messages if your loggerType is Custom");
            }
            this._formatterLogMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    CategoryConfiguration.prototype.copy = function () {
        var config = new CategoryConfiguration(this.logLevel, this.loggerType, this.logFormat.copy(), this.callBackLogger);
        config.formatterLogMessage = this.formatterLogMessage;
        return config;
    };
    return CategoryConfiguration;
}());
exports.CategoryConfiguration = CategoryConfiguration;
//# sourceMappingURL=CategoryConfiguration.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryConsoleLoggerImpl.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/CategoryConsoleLoggerImpl.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var AbstractCategoryLogger_1 = __webpack_require__(/*! ./AbstractCategoryLogger */ "./node_modules/typescript-logging/dist/commonjs/log/category/AbstractCategoryLogger.js");
/**
 * Simple logger, that logs to the console. If the console is unavailable will throw an exception.
 */
var CategoryConsoleLoggerImpl = (function (_super) {
    __extends(CategoryConsoleLoggerImpl, _super);
    function CategoryConsoleLoggerImpl(rootCategory, runtimeSettings) {
        return _super.call(this, rootCategory, runtimeSettings) || this;
    }
    CategoryConsoleLoggerImpl.prototype.doLog = function (msg) {
        if (console !== undefined) {
            var messageFormatter = this._getMessageFormatter();
            var fullMsg = void 0;
            if (messageFormatter === null) {
                fullMsg = this.createDefaultLogMessage(msg);
            }
            else {
                fullMsg = messageFormatter(msg);
            }
            var logged = false;
            /* tslint:disable:no-console */
            switch (msg.level) {
                case LoggerOptions_1.LogLevel.Trace:
                    // Don't try trace we don't want stacks
                    break;
                case LoggerOptions_1.LogLevel.Debug:
                    // Don't try, too much differences of consoles.
                    break;
                case LoggerOptions_1.LogLevel.Info:
                    if (console.info) {
                        console.info(fullMsg);
                        logged = true;
                    }
                    break;
                case LoggerOptions_1.LogLevel.Warn:
                    if (console.warn) {
                        console.warn(fullMsg);
                        logged = true;
                    }
                    break;
                case LoggerOptions_1.LogLevel.Error:
                case LoggerOptions_1.LogLevel.Fatal:
                    if (console.error) {
                        console.error(fullMsg);
                        logged = true;
                    }
                    break;
                default:
                    throw new Error("Unsupported level: " + msg.level);
            }
            if (!logged) {
                console.log(fullMsg);
            }
            /* tslint:enable:no-console */
        }
        else {
            throw new Error("Console is not defined, cannot log msg: " + msg.messageAsString);
        }
    };
    return CategoryConsoleLoggerImpl;
}(AbstractCategoryLogger_1.AbstractCategoryLogger));
exports.CategoryConsoleLoggerImpl = CategoryConsoleLoggerImpl;
//# sourceMappingURL=CategoryConsoleLoggerImpl.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryDelegateLoggerImpl.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/CategoryDelegateLoggerImpl.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Delegate logger, delegates logging to given logger (constructor).
 */
var CategoryDelegateLoggerImpl = (function () {
    function CategoryDelegateLoggerImpl(delegate) {
        this._delegate = delegate;
    }
    Object.defineProperty(CategoryDelegateLoggerImpl.prototype, "delegate", {
        get: function () {
            return this._delegate;
        },
        set: function (value) {
            this._delegate = value;
        },
        enumerable: true,
        configurable: true
    });
    CategoryDelegateLoggerImpl.prototype.trace = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        (_a = this._delegate).trace.apply(_a, [msg].concat(categories));
        var _a;
    };
    CategoryDelegateLoggerImpl.prototype.debug = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        (_a = this._delegate).debug.apply(_a, [msg].concat(categories));
        var _a;
    };
    CategoryDelegateLoggerImpl.prototype.info = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        (_a = this._delegate).info.apply(_a, [msg].concat(categories));
        var _a;
    };
    CategoryDelegateLoggerImpl.prototype.warn = function (msg) {
        var categories = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            categories[_i - 1] = arguments[_i];
        }
        (_a = this._delegate).warn.apply(_a, [msg].concat(categories));
        var _a;
    };
    CategoryDelegateLoggerImpl.prototype.error = function (msg, error) {
        var categories = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            categories[_i - 2] = arguments[_i];
        }
        (_a = this._delegate).error.apply(_a, [msg, error].concat(categories));
        var _a;
    };
    CategoryDelegateLoggerImpl.prototype.fatal = function (msg, error) {
        var categories = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            categories[_i - 2] = arguments[_i];
        }
        (_a = this._delegate).fatal.apply(_a, [msg, error].concat(categories));
        var _a;
    };
    CategoryDelegateLoggerImpl.prototype.resolved = function (msg, error) {
        var categories = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            categories[_i - 2] = arguments[_i];
        }
        (_a = this._delegate).resolved.apply(_a, [msg, error].concat(categories));
        var _a;
    };
    CategoryDelegateLoggerImpl.prototype.log = function (level, msg, error) {
        var categories = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            categories[_i - 3] = arguments[_i];
        }
        (_a = this._delegate).log.apply(_a, [level, msg, error].concat(categories));
        var _a;
    };
    return CategoryDelegateLoggerImpl;
}());
exports.CategoryDelegateLoggerImpl = CategoryDelegateLoggerImpl;
//# sourceMappingURL=CategoryDelegateLoggerImpl.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryExtensionLoggerImpl.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/CategoryExtensionLoggerImpl.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ExtensionHelper_1 = __webpack_require__(/*! ../../extension/ExtensionHelper */ "./node_modules/typescript-logging/dist/commonjs/extension/ExtensionHelper.js");
var AbstractCategoryLogger_1 = __webpack_require__(/*! ./AbstractCategoryLogger */ "./node_modules/typescript-logging/dist/commonjs/log/category/AbstractCategoryLogger.js");
/**
 * This class should not be used directly, it is used for communication with the extension only.
 */
var CategoryExtensionLoggerImpl = (function (_super) {
    __extends(CategoryExtensionLoggerImpl, _super);
    function CategoryExtensionLoggerImpl(rootCategory, runtimeSettings) {
        return _super.call(this, rootCategory, runtimeSettings) || this;
    }
    CategoryExtensionLoggerImpl.prototype.doLog = function (msg) {
        if (typeof window !== "undefined") {
            ExtensionHelper_1.ExtensionHelper.sendCategoryLogMessage(msg);
        }
        else {
            /* tslint:disable:no-console */
            console.log("window is not available, you must be running in a browser for this. Dropped message.");
            /* tslint:enable:no-console */
        }
    };
    return CategoryExtensionLoggerImpl;
}(AbstractCategoryLogger_1.AbstractCategoryLogger));
exports.CategoryExtensionLoggerImpl = CategoryExtensionLoggerImpl;
//# sourceMappingURL=CategoryExtensionLoggerImpl.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryMessageBufferImpl.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/CategoryMessageBufferImpl.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var AbstractCategoryLogger_1 = __webpack_require__(/*! ./AbstractCategoryLogger */ "./node_modules/typescript-logging/dist/commonjs/log/category/AbstractCategoryLogger.js");
/**
 * Logger which buffers all messages, use with care due to possible high memory footprint.
 * Can be convenient in some cases. Call toString() for full output, or cast to this class
 * and call getMessages() to do something with it yourself.
 */
var CategoryMessageBufferLoggerImpl = (function (_super) {
    __extends(CategoryMessageBufferLoggerImpl, _super);
    function CategoryMessageBufferLoggerImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messages = [];
        return _this;
    }
    CategoryMessageBufferLoggerImpl.prototype.getMessages = function () {
        return this.messages;
    };
    CategoryMessageBufferLoggerImpl.prototype.toString = function () {
        return this.messages.map(function (msg) {
            return msg;
        }).join("\n");
    };
    CategoryMessageBufferLoggerImpl.prototype.doLog = function (msg) {
        var messageFormatter = this._getMessageFormatter();
        var fullMsg;
        if (messageFormatter === null) {
            fullMsg = this.createDefaultLogMessage(msg);
        }
        else {
            fullMsg = messageFormatter(msg);
        }
        this.messages.push(fullMsg);
    };
    return CategoryMessageBufferLoggerImpl;
}(AbstractCategoryLogger_1.AbstractCategoryLogger));
exports.CategoryMessageBufferLoggerImpl = CategoryMessageBufferLoggerImpl;
//# sourceMappingURL=CategoryMessageBufferImpl.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryRuntimeSettings.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/CategoryRuntimeSettings.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
/**
 * RuntimeSettings for a category, at runtime these are associated to a category.
 */
var CategoryRuntimeSettings = (function () {
    function CategoryRuntimeSettings(category, logLevel, loggerType, logFormat, callBackLogger, formatterLogMessage) {
        if (logLevel === void 0) { logLevel = LoggerOptions_1.LogLevel.Error; }
        if (loggerType === void 0) { loggerType = LoggerOptions_1.LoggerType.Console; }
        if (logFormat === void 0) { logFormat = new LoggerOptions_1.CategoryLogFormat(); }
        if (callBackLogger === void 0) { callBackLogger = null; }
        if (formatterLogMessage === void 0) { formatterLogMessage = null; }
        this._formatterLogMessage = null;
        this._category = category;
        this._logLevel = logLevel;
        this._loggerType = loggerType;
        this._logFormat = logFormat;
        this._callBackLogger = callBackLogger;
        this._formatterLogMessage = formatterLogMessage;
    }
    Object.defineProperty(CategoryRuntimeSettings.prototype, "category", {
        get: function () {
            return this._category;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryRuntimeSettings.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        set: function (value) {
            this._logLevel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryRuntimeSettings.prototype, "loggerType", {
        get: function () {
            return this._loggerType;
        },
        set: function (value) {
            this._loggerType = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryRuntimeSettings.prototype, "logFormat", {
        get: function () {
            return this._logFormat;
        },
        set: function (value) {
            this._logFormat = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryRuntimeSettings.prototype, "callBackLogger", {
        get: function () {
            return this._callBackLogger;
        },
        set: function (value) {
            this._callBackLogger = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryRuntimeSettings.prototype, "formatterLogMessage", {
        get: function () {
            return this._formatterLogMessage;
        },
        set: function (value) {
            this._formatterLogMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    return CategoryRuntimeSettings;
}());
exports.CategoryRuntimeSettings = CategoryRuntimeSettings;
//# sourceMappingURL=CategoryRuntimeSettings.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryService.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/CategoryService.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var DataStructures_1 = __webpack_require__(/*! ../../utils/DataStructures */ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js");
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var CategoryConsoleLoggerImpl_1 = __webpack_require__(/*! ./CategoryConsoleLoggerImpl */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryConsoleLoggerImpl.js");
var CategoryDelegateLoggerImpl_1 = __webpack_require__(/*! ./CategoryDelegateLoggerImpl */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryDelegateLoggerImpl.js");
var CategoryExtensionLoggerImpl_1 = __webpack_require__(/*! ./CategoryExtensionLoggerImpl */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryExtensionLoggerImpl.js");
var CategoryMessageBufferImpl_1 = __webpack_require__(/*! ./CategoryMessageBufferImpl */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryMessageBufferImpl.js");
var ExtensionHelper_1 = __webpack_require__(/*! ../../extension/ExtensionHelper */ "./node_modules/typescript-logging/dist/commonjs/extension/ExtensionHelper.js");
var CategoryRuntimeSettings_1 = __webpack_require__(/*! ./CategoryRuntimeSettings */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryRuntimeSettings.js");
var CategoryConfiguration_1 = __webpack_require__(/*! ./CategoryConfiguration */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryConfiguration.js");
/**
 * The service (only available as singleton) for all category related stuff as
 * retrieving, registering a logger. You should normally NOT use this,
 * instead use CategoryServiceFactory which is meant for end users.
 */
var CategoryServiceImpl = (function () {
    function CategoryServiceImpl() {
        this._defaultConfig = new CategoryConfiguration_1.CategoryConfiguration();
        this._mapState = new DataStructures_1.SimpleMap();
        // Private constructor
        ExtensionHelper_1.ExtensionHelper.register();
    }
    CategoryServiceImpl.getInstance = function () {
        // Load on-demand, to assure webpack ordering of module usage doesn't screw things over
        // for us when we accidentally change the order.
        if (CategoryServiceImpl._INSTANCE === null) {
            CategoryServiceImpl._INSTANCE = new CategoryServiceImpl();
        }
        return CategoryServiceImpl._INSTANCE;
    };
    CategoryServiceImpl.prototype.getLogger = function (category) {
        return this.createOrGetCategoryState(category).logger;
    };
    /**
     * Clears everything, including a default configuration you may have set.
     * After this you need to re-register your categories etc.
     */
    CategoryServiceImpl.prototype.clear = function () {
        this._mapState.clear();
        this.setDefaultConfiguration(new CategoryConfiguration_1.CategoryConfiguration());
    };
    CategoryServiceImpl.prototype.getCategorySettings = function (category) {
        return this.createOrGetCategoryState(category).currentRuntimeSettings;
    };
    CategoryServiceImpl.prototype.getOriginalCategorySettings = function (category) {
        return this.createOrGetCategoryState(category).originalRuntimeSettings;
    };
    /**
     * Set the default configuration. New root loggers created get this
     * applied. If you want to reset all current loggers to have this
     * applied as well, pass in reset=true (the default is false). All
     * categories will be reset then as well.
     * @param config New config
     * @param reset Defaults to true. Set to true to reset all loggers and current runtimesettings.
     */
    CategoryServiceImpl.prototype.setDefaultConfiguration = function (config, reset) {
        if (reset === void 0) { reset = true; }
        this._defaultConfig = config;
        if (reset) {
            this._mapState.forEachValue(function (state) {
                state.updateSettings(config);
            });
        }
    };
    /**
     * Set new configuration settings for a category (and possibly its child categories)
     * @param config Config
     * @param category Category
     * @param applyChildren True to apply to child categories, defaults to false.
     */
    CategoryServiceImpl.prototype.setConfigurationCategory = function (config, category, applyChildren) {
        var _this = this;
        if (applyChildren === void 0) { applyChildren = false; }
        this.createOrGetCategoryState(category).updateSettings(config);
        // Apply the settings to children recursive if requested
        if (applyChildren) {
            category.children.forEach(function (child) {
                // False flag, a child cannot reset a rootlogger
                _this.setConfigurationCategory(config, child, applyChildren);
            });
        }
    };
    CategoryServiceImpl.prototype.registerCategory = function (category) {
        if (category === null || typeof category === "undefined") {
            throw new Error("Category CANNOT be null/undefined");
        }
        if (this._mapState.exists(CategoryServiceImpl.getCategoryKey(category))) {
            throw new Error("Cannot add this root category with name: " + category.name + ", it already exists (same name in hierarchy).");
        }
        this.createOrGetCategoryState(category);
    };
    /**
     * Used to enable integration with chrome extension. Do not use manually, the
     * extension and the logger framework deal with this.
     */
    CategoryServiceImpl.prototype.enableExtensionIntegration = function () {
        var _this = this;
        this._mapState.forEachValue(function (state) { return state.enableForExtension(_this); });
    };
    /**
     * Return all root categories currently registered.
     */
    CategoryServiceImpl.prototype.getRootCategories = function () {
        return this._mapState.values().filter(function (state) { return state.category.parent == null; }).map(function (state) { return state.category; });
    };
    /**
     * Return Category by id
     * @param id The id of the category to find
     * @returns {Category} or null if not found
     */
    CategoryServiceImpl.prototype.getCategoryById = function (id) {
        var result = this._mapState.values().filter(function (state) { return state.category.id === id; }).map(function (state) { return state.category; });
        if (result.length === 1) {
            return result[0];
        }
        return null;
    };
    CategoryServiceImpl.prototype.createOrGetCategoryState = function (category) {
        var key = CategoryServiceImpl.getCategoryKey(category);
        var state = this._mapState.get(key);
        if (typeof state !== "undefined") {
            return state;
        }
        var newState = this.createState(category);
        this._mapState.put(key, newState);
        return newState;
    };
    CategoryServiceImpl.prototype.createState = function (category) {
        var _this = this;
        return new CategoryState(category, function () { return _this._defaultConfig; }, function (config, cat) { return _this.createLogger(config, cat); });
    };
    CategoryServiceImpl.prototype.createLogger = function (config, category) {
        // Default is always a console logger
        switch (config.loggerType) {
            case LoggerOptions_1.LoggerType.Console:
                return new CategoryConsoleLoggerImpl_1.CategoryConsoleLoggerImpl(category, this);
            case LoggerOptions_1.LoggerType.MessageBuffer:
                return new CategoryMessageBufferImpl_1.CategoryMessageBufferLoggerImpl(category, this);
            case LoggerOptions_1.LoggerType.Custom:
                if (config.callBackLogger === null) {
                    throw new Error("Cannot create custom logger, custom callback is null");
                }
                else {
                    return config.callBackLogger(category, this);
                }
            default:
                throw new Error("Cannot create a Logger for LoggerType: " + config.loggerType);
        }
    };
    CategoryServiceImpl.getCategoryKey = function (category) {
        return category.getCategoryPath();
    };
    // Singleton category service, used by CategoryServiceFactory as well as Categories.
    // Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.
    CategoryServiceImpl._INSTANCE = null;
    return CategoryServiceImpl;
}());
exports.CategoryServiceImpl = CategoryServiceImpl;
var CategoryState = (function () {
    function CategoryState(category, defaultConfig, createLogger) {
        this._category = category;
        this._lazyState = new LazyState(category, defaultConfig, createLogger);
    }
    Object.defineProperty(CategoryState.prototype, "category", {
        get: function () {
            return this._category;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryState.prototype, "logger", {
        get: function () {
            return this._lazyState.getLogger();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryState.prototype, "originalRuntimeSettings", {
        get: function () {
            return this._lazyState.getOriginalRuntimeSettings();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryState.prototype, "currentRuntimeSettings", {
        get: function () {
            return this._lazyState.getCurrentRuntimeSettings();
        },
        enumerable: true,
        configurable: true
    });
    CategoryState.prototype.enableForExtension = function (runtimeSettings) {
        this._lazyState.enableForExtension(runtimeSettings);
    };
    CategoryState.prototype.updateSettings = function (config) {
        this._lazyState.updateSettings(config);
    };
    return CategoryState;
}());
var LazyState = (function () {
    function LazyState(category, defaultConfig, createLogger) {
        this._category = category;
        this._defaultConfig = defaultConfig;
        this._createLogger = createLogger;
    }
    LazyState.prototype.isLoaded = function () {
        return (typeof this._logger !== "undefined");
    };
    LazyState.prototype.getLogger = function () {
        this.loadLoggerOnDemand();
        return this._delegateLogger;
    };
    LazyState.prototype.getOriginalRuntimeSettings = function () {
        this.loadLoggerOnDemand();
        return this._originalRuntimeSettings;
    };
    LazyState.prototype.getCurrentRuntimeSettings = function () {
        this.loadLoggerOnDemand();
        return this._currentRuntimeSettings;
    };
    LazyState.prototype.enableForExtension = function (runtimeSettings) {
        this.loadLoggerOnDemand();
        if (!(this._wrappedLogger instanceof CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl)) {
            /* tslint:disable no-console */
            console.log("Reconfiguring logger for extension for category: " + this._category.name);
            /* tslint:enable no-console */
            this._wrappedLogger = new CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl(this._category, runtimeSettings);
            this._delegateLogger.delegate = this._wrappedLogger;
        }
    };
    LazyState.prototype.updateSettings = function (config) {
        if (this.isLoaded()) {
            this._currentRuntimeSettings.logLevel = config.logLevel;
            this._currentRuntimeSettings.loggerType = config.loggerType;
            this._currentRuntimeSettings.logFormat = config.logFormat;
            this._currentRuntimeSettings.callBackLogger = config.callBackLogger;
            this._currentRuntimeSettings.formatterLogMessage = config.formatterLogMessage;
            // Replace the real logger, it may have changed.
            this._logger = this._createLogger(config, this._category);
            if (!(this._wrappedLogger instanceof CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl)) {
                this._wrappedLogger = this._logger;
            }
            this._delegateLogger.delegate = this._wrappedLogger;
        }
        else {
            // Set this config, it may be for the category specific, the default is therefore not good enough.
            this._defaultConfig = function () { return config; };
        }
    };
    LazyState.prototype.loadLoggerOnDemand = function () {
        if (!this.isLoaded()) {
            this._logger = this._createLogger(this._defaultConfig(), this._category);
            this._wrappedLogger = this._logger;
            this._delegateLogger = new CategoryDelegateLoggerImpl_1.CategoryDelegateLoggerImpl(this._wrappedLogger);
            this._originalRuntimeSettings = this.initNewSettings();
            this._currentRuntimeSettings = this.initNewSettings();
        }
    };
    LazyState.prototype.initNewSettings = function () {
        var defSettings = this._defaultConfig().copy();
        return new CategoryRuntimeSettings_1.CategoryRuntimeSettings(this._category, defSettings.logLevel, defSettings.loggerType, defSettings.logFormat, defSettings.callBackLogger, defSettings.formatterLogMessage);
    };
    return LazyState;
}());
//# sourceMappingURL=CategoryService.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryServiceFactory.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/category/CategoryServiceFactory.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var CategoryService_1 = __webpack_require__(/*! ./CategoryService */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryService.js");
/**
 * Categorized service for logging, where logging is bound to categories which
 * can log horizontally through specific application logic (services, group(s) of components etc).
 * For the standard way of logging like most frameworks do these days, use LFService instead.
 * If you want fine grained control to divide sections of your application in
 * logical units to enable/disable logging for, this is the service you want to use instead.
 * Also for this type a browser plugin will be available.
 */
var CategoryServiceFactory = (function () {
    function CategoryServiceFactory() {
        // Private constructor.
    }
    /**
     * Return a CategoryLogger for given ROOT category (thus has no parent).
     * You can only retrieve loggers for their root, when logging
     * you specify to log for what (child)categories.
     * @param root Category root (has no parent)
     * @returns {CategoryLogger}
     */
    CategoryServiceFactory.getLogger = function (root) {
        return CategoryService_1.CategoryServiceImpl.getInstance().getLogger(root);
    };
    /**
     * Clears everything, any registered (root)categories and loggers
     * are discarded. Resets to default configuration.
     */
    CategoryServiceFactory.clear = function () {
        return CategoryService_1.CategoryServiceImpl.getInstance().clear();
    };
    /**
     * Set the default configuration. New root loggers created get this
     * applied. If you want to reset all current loggers to have this
     * applied as well, pass in reset=true (the default is false). All
     * categories runtimesettings will be reset then as well.
     * @param config The new default configuration
     * @param reset If true, will reset *all* runtimesettings for all loggers/categories to these. Default is true.
     */
    CategoryServiceFactory.setDefaultConfiguration = function (config, reset) {
        if (reset === void 0) { reset = true; }
        CategoryService_1.CategoryServiceImpl.getInstance().setDefaultConfiguration(config, reset);
    };
    /**
     * Set new configuration settings for a category (and possibly its child categories)
     * @param config Config
     * @param category Category
     * @param applyChildren True to apply to child categories, defaults to false.
     */
    CategoryServiceFactory.setConfigurationCategory = function (config, category, applyChildren) {
        if (applyChildren === void 0) { applyChildren = false; }
        CategoryService_1.CategoryServiceImpl.getInstance().setConfigurationCategory(config, category, applyChildren);
    };
    return CategoryServiceFactory;
}());
exports.CategoryServiceFactory = CategoryServiceFactory;
//# sourceMappingURL=CategoryServiceFactory.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/standard/AbstractLogger.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/standard/AbstractLogger.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var DataStructures_1 = __webpack_require__(/*! ../../utils/DataStructures */ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js");
var MessageUtils_1 = __webpack_require__(/*! ../../utils/MessageUtils */ "./node_modules/typescript-logging/dist/commonjs/utils/MessageUtils.js");
var LogMessageInternalImpl = (function () {
    function LogMessageInternalImpl(loggerName, message, errorAsStack, error, logGroupRule, date, level, ready) {
        this._errorAsStack = null;
        this._error = null;
        this._loggerName = loggerName;
        this._message = message;
        this._errorAsStack = errorAsStack;
        this._error = error;
        this._logGroupRule = logGroupRule;
        this._date = date;
        this._level = level;
        this._ready = ready;
    }
    Object.defineProperty(LogMessageInternalImpl.prototype, "loggerName", {
        get: function () {
            return this._loggerName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (value) {
            this._message = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "errorAsStack", {
        get: function () {
            return this._errorAsStack;
        },
        set: function (value) {
            this._errorAsStack = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "error", {
        get: function () {
            return this._error;
        },
        set: function (value) {
            this._error = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "logGroupRule", {
        get: function () {
            return this._logGroupRule;
        },
        set: function (value) {
            this._logGroupRule = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "date", {
        get: function () {
            return this._date;
        },
        set: function (value) {
            this._date = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "level", {
        get: function () {
            return this._level;
        },
        set: function (value) {
            this._level = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "isMessageLogData", {
        get: function () {
            return typeof (this._message) !== "string";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "ready", {
        get: function () {
            return this._ready;
        },
        set: function (value) {
            this._ready = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "messageAsString", {
        get: function () {
            if (typeof (this._message) === "string") {
                return this._message;
            }
            return this._message.msg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogMessageInternalImpl.prototype, "logData", {
        get: function () {
            var result = null;
            if (typeof (this._message) !== "string") {
                result = this.message;
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    return LogMessageInternalImpl;
}());
/**
 * Abstract base logger, extend to easily implement a custom logger that
 * logs wherever you want. You only need to implement doLog(msg: LogMessage) and
 * log that somewhere (it will contain format and everything else).
 */
var AbstractLogger = (function () {
    function AbstractLogger(name, logGroupRuntimeSettings) {
        this._allMessages = new DataStructures_1.LinkedList();
        this._open = true;
        this._name = name;
        this._logGroupRuntimeSettings = logGroupRuntimeSettings;
    }
    Object.defineProperty(AbstractLogger.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    AbstractLogger.prototype.trace = function (msg, error) {
        if (error === void 0) { error = null; }
        this._log(LoggerOptions_1.LogLevel.Trace, msg, error);
    };
    AbstractLogger.prototype.debug = function (msg, error) {
        if (error === void 0) { error = null; }
        this._log(LoggerOptions_1.LogLevel.Debug, msg, error);
    };
    AbstractLogger.prototype.info = function (msg, error) {
        if (error === void 0) { error = null; }
        this._log(LoggerOptions_1.LogLevel.Info, msg, error);
    };
    AbstractLogger.prototype.warn = function (msg, error) {
        if (error === void 0) { error = null; }
        this._log(LoggerOptions_1.LogLevel.Warn, msg, error);
    };
    AbstractLogger.prototype.error = function (msg, error) {
        if (error === void 0) { error = null; }
        this._log(LoggerOptions_1.LogLevel.Error, msg, error);
    };
    AbstractLogger.prototype.fatal = function (msg, error) {
        if (error === void 0) { error = null; }
        this._log(LoggerOptions_1.LogLevel.Fatal, msg, error);
    };
    AbstractLogger.prototype.isTraceEnabled = function () {
        return this._logGroupRuntimeSettings.level === LoggerOptions_1.LogLevel.Trace;
    };
    AbstractLogger.prototype.isDebugEnabled = function () {
        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Debug;
    };
    AbstractLogger.prototype.isInfoEnabled = function () {
        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Info;
    };
    AbstractLogger.prototype.isWarnEnabled = function () {
        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Warn;
    };
    AbstractLogger.prototype.isErrorEnabled = function () {
        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Error;
    };
    AbstractLogger.prototype.isFatalEnabled = function () {
        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Fatal;
    };
    AbstractLogger.prototype.getLogLevel = function () {
        return this._logGroupRuntimeSettings.level;
    };
    AbstractLogger.prototype.isOpen = function () {
        return this._open;
    };
    AbstractLogger.prototype.close = function () {
        this._open = false;
        this._allMessages.clear();
    };
    AbstractLogger.prototype.createDefaultLogMessage = function (msg) {
        return MessageUtils_1.MessageFormatUtils.renderDefaultLog4jMessage(msg, true);
    };
    /**
     * Return optional message formatter. All LoggerTypes (except custom) will see if
     * they have this, and if so use it to log.
     * @returns {((message:LogMessage)=>string)|null}
     */
    AbstractLogger.prototype._getMessageFormatter = function () {
        return this._logGroupRuntimeSettings.formatterLogMessage;
    };
    AbstractLogger.prototype._log = function (level, msg, error) {
        if (error === void 0) { error = null; }
        if (this._open && this._logGroupRuntimeSettings.level <= level) {
            var functionMessage = function () {
                if (typeof msg === "function") {
                    return msg();
                }
                return msg;
            };
            var functionError = function () {
                if (typeof error === "function") {
                    return error();
                }
                return error;
            };
            this._allMessages.addTail(this.createMessage(level, functionMessage, functionError, new Date()));
            this.processMessages();
        }
    };
    AbstractLogger.prototype.createMessage = function (level, msg, error, date) {
        var _this = this;
        var errorResult = error();
        if (errorResult !== null) {
            var message_1 = new LogMessageInternalImpl(this._name, msg(), null, errorResult, this._logGroupRuntimeSettings.logGroupRule, date, level, false);
            MessageUtils_1.MessageFormatUtils.renderError(errorResult).then(function (stack) {
                message_1.errorAsStack = stack;
                message_1.ready = true;
                _this.processMessages();
            }).catch(function () {
                message_1.errorAsStack = "<UNKNOWN> unable to get stack.";
                message_1.ready = true;
                _this.processMessages();
            });
            return message_1;
        }
        return new LogMessageInternalImpl(this._name, msg(), null, errorResult, this._logGroupRuntimeSettings.logGroupRule, date, level, true);
    };
    AbstractLogger.prototype.processMessages = function () {
        // Basically we wait until errors are resolved (those messages
        // may not be ready).
        var msgs = this._allMessages;
        if (msgs.getSize() > 0) {
            do {
                var msg = msgs.getHead();
                if (msg != null) {
                    if (!msg.ready) {
                        break;
                    }
                    msgs.removeHead();
                    // This can never be null normally, but strict null checking ...
                    if (msg.message !== null) {
                        this.doLog(msg);
                    }
                }
            } while (msgs.getSize() > 0);
        }
    };
    return AbstractLogger;
}());
exports.AbstractLogger = AbstractLogger;
//# sourceMappingURL=AbstractLogger.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/standard/ConsoleLoggerImpl.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/standard/ConsoleLoggerImpl.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var AbstractLogger_1 = __webpack_require__(/*! ./AbstractLogger */ "./node_modules/typescript-logging/dist/commonjs/log/standard/AbstractLogger.js");
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
/**
 * Simple logger, that logs to the console. If the console is unavailable will throw exception.
 */
var ConsoleLoggerImpl = (function (_super) {
    __extends(ConsoleLoggerImpl, _super);
    function ConsoleLoggerImpl(name, logGroupRuntimeSettings) {
        return _super.call(this, name, logGroupRuntimeSettings) || this;
    }
    ConsoleLoggerImpl.prototype.doLog = function (message) {
        if (console !== undefined) {
            var logged = false;
            var logLevel = message.level;
            var messageFormatter = this._getMessageFormatter();
            var msg = void 0;
            if (messageFormatter === null) {
                msg = this.createDefaultLogMessage(message);
            }
            else {
                msg = messageFormatter(message);
            }
            /* tslint:disable:no-console */
            switch (logLevel) {
                case LoggerOptions_1.LogLevel.Trace:
                    // Do not try trace we don't want a stack
                    break;
                case LoggerOptions_1.LogLevel.Debug:
                    // Don't try, too much differences of consoles.
                    break;
                case LoggerOptions_1.LogLevel.Info:
                    if (console.info) {
                        console.info(msg);
                        logged = true;
                    }
                    break;
                case LoggerOptions_1.LogLevel.Warn:
                    if (console.warn) {
                        console.warn(msg);
                        logged = true;
                    }
                    break;
                case LoggerOptions_1.LogLevel.Error:
                case LoggerOptions_1.LogLevel.Fatal:
                    if (console.error) {
                        console.error(msg);
                        logged = true;
                    }
                    break;
                default:
                    throw new Error("Log level not supported: " + logLevel);
            }
            if (!logged) {
                console.log(msg);
            }
            /* tslint:enable:no-console */
        }
        else {
            throw new Error("Console is not defined, cannot log msg: " + message.message);
        }
    };
    return ConsoleLoggerImpl;
}(AbstractLogger_1.AbstractLogger));
exports.ConsoleLoggerImpl = ConsoleLoggerImpl;
//# sourceMappingURL=ConsoleLoggerImpl.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/standard/LFService.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/standard/LFService.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var DataStructures_1 = __webpack_require__(/*! ../../utils/DataStructures */ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js");
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var LoggerFactoryImpl_1 = __webpack_require__(/*! ./LoggerFactoryImpl */ "./node_modules/typescript-logging/dist/commonjs/log/standard/LoggerFactoryImpl.js");
var ExtensionHelper_1 = __webpack_require__(/*! ../../extension/ExtensionHelper */ "./node_modules/typescript-logging/dist/commonjs/extension/ExtensionHelper.js");
var LogGroupRule_1 = __webpack_require__(/*! ./LogGroupRule */ "./node_modules/typescript-logging/dist/commonjs/log/standard/LogGroupRule.js");
var LoggerFactoryOptions_1 = __webpack_require__(/*! ./LoggerFactoryOptions */ "./node_modules/typescript-logging/dist/commonjs/log/standard/LoggerFactoryOptions.js");
var LFServiceImpl = (function () {
    function LFServiceImpl() {
        // Private constructor.
        this._nameCounter = 1;
        this._mapFactories = new DataStructures_1.SimpleMap();
        ExtensionHelper_1.ExtensionHelper.register();
    }
    LFServiceImpl.getInstance = function () {
        // Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.
        if (LFServiceImpl._INSTANCE === null) {
            LFServiceImpl._INSTANCE = new LFServiceImpl();
        }
        return LFServiceImpl._INSTANCE;
    };
    /**
     * Create a new LoggerFactory with given options (if any). If no options
     * are specified, the LoggerFactory, will accept any named logger and will
     * log on info level by default for, to the console.
     * @param options Options, optional.
     * @returns {LoggerFactory}
     */
    LFServiceImpl.prototype.createLoggerFactory = function (options) {
        if (options === void 0) { options = null; }
        var name = "LoggerFactory" + this._nameCounter++;
        return this.createNamedLoggerFactory(name, options);
    };
    /**
     * Create a new LoggerFactory using given name (used for console api/extension).
     * @param name Name Pick something short but distinguishable.
     * @param options Options, optional
     * @return {LoggerFactory}
     */
    LFServiceImpl.prototype.createNamedLoggerFactory = function (name, options) {
        if (options === void 0) { options = null; }
        if (this._mapFactories.exists(name)) {
            throw new Error("LoggerFactory with name " + name + " already exists.");
        }
        var factory;
        if (options !== null) {
            factory = new LoggerFactoryImpl_1.LoggerFactoryImpl(name, options);
        }
        else {
            factory = new LoggerFactoryImpl_1.LoggerFactoryImpl(name, LFServiceImpl.createDefaultOptions());
        }
        this._mapFactories.put(name, factory);
        return factory;
    };
    /**
     * Closes all Loggers for LoggerFactories that were created.
     * After this call, all previously fetched Loggers (from their
     * factories) are unusable. The factories remain as they were.
     */
    LFServiceImpl.prototype.closeLoggers = function () {
        this._mapFactories.values().forEach(function (factory) {
            factory.closeLoggers();
        });
        this._mapFactories.clear();
        this._nameCounter = 1;
    };
    LFServiceImpl.prototype.getRuntimeSettingsForLoggerFactories = function () {
        var result = [];
        this._mapFactories.forEachValue(function (factory) { return result.push(factory); });
        return result;
    };
    LFServiceImpl.prototype.getLogGroupSettings = function (nameLoggerFactory, idLogGroupRule) {
        var factory = this._mapFactories.get(nameLoggerFactory);
        if (typeof factory === "undefined") {
            return null;
        }
        return factory.getLogGroupRuntimeSettingsByIndex(idLogGroupRule);
    };
    LFServiceImpl.prototype.getLoggerFactoryRuntimeSettingsByName = function (nameLoggerFactory) {
        var result = this._mapFactories.get(nameLoggerFactory);
        if (typeof result === "undefined") {
            return null;
        }
        return result;
    };
    LFServiceImpl.createDefaultOptions = function () {
        return new LoggerFactoryOptions_1.LoggerFactoryOptions().addLogGroupRule(new LogGroupRule_1.LogGroupRule(new RegExp(".+"), LoggerOptions_1.LogLevel.Info));
    };
    // Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.
    LFServiceImpl._INSTANCE = null;
    return LFServiceImpl;
}());
/**
 * Create and configure your LoggerFactory from here.
 */
var LFService = (function () {
    function LFService() {
    }
    /**
     * Create a new LoggerFactory with given options (if any). If no options
     * are specified, the LoggerFactory, will accept any named logger and will
     * log on info level by default for, to the console.
     * @param options Options, optional.
     * @returns {LoggerFactory}
     */
    LFService.createLoggerFactory = function (options) {
        if (options === void 0) { options = null; }
        return LFService.INSTANCE_SERVICE.createLoggerFactory(options);
    };
    /**
     * Create a new LoggerFactory using given name (used for console api/extension).
     * @param name Name Pick something short but distinguishable. The word "DEFAULT" is reserved and cannot be taken, it is used
     * for the default LoggerFactory.
     * @param options Options, optional
     * @return {LoggerFactory}
     */
    LFService.createNamedLoggerFactory = function (name, options) {
        if (options === void 0) { options = null; }
        if (name === LFService.DEFAULT_LOGGER_FACTORY_NAME) {
            throw new Error("LoggerFactory name: " + LFService.DEFAULT_LOGGER_FACTORY_NAME + " is reserved and cannot be used.");
        }
        return LFService.INSTANCE_SERVICE.createNamedLoggerFactory(name, options);
    };
    /**
     * Closes all Loggers for LoggerFactories that were created.
     * After this call, all previously fetched Loggers (from their
     * factories) are unusable. The factories remain as they were.
     */
    LFService.closeLoggers = function () {
        return LFService.INSTANCE_SERVICE.closeLoggers();
    };
    /**
     * Return LFServiceRuntimeSettings to retrieve information loggerfactories
     * and their runtime settings.
     * @returns {LFServiceRuntimeSettings}
     */
    LFService.getRuntimeSettings = function () {
        return LFService.INSTANCE_SERVICE;
    };
    Object.defineProperty(LFService, "DEFAULT", {
        /**
         * This property returns the default LoggerFactory (if not yet initialized it is initialized).
         * This LoggerFactory can be used to share among multiple
         * applications/libraries - that way you can enable/change logging over everything from
         * your own application when required.
         * It is recommended to be used by library developers to make logging easily available for the
         * consumers of their libraries.
         * It is highly recommended to use Loggers from the LoggerFactory with unique grouping/names to prevent
         * clashes of Loggers between multiple projects.
         * @returns {LoggerFactory} Returns the default LoggerFactory
         */
        get: function () {
            return LFService.getDefault();
        },
        enumerable: true,
        configurable: true
    });
    LFService.getDefault = function () {
        if (LFService.DEFAULT_LOGGER_FACTORY === null) {
            LFService.DEFAULT_LOGGER_FACTORY = LFService.DEFAULT_LOGGER_FACTORY = LFService.INSTANCE_SERVICE.createNamedLoggerFactory(LFService.DEFAULT_LOGGER_FACTORY_NAME, new LoggerFactoryOptions_1.LoggerFactoryOptions().addLogGroupRule(new LogGroupRule_1.LogGroupRule(new RegExp(".+"), LoggerOptions_1.LogLevel.Error)));
        }
        return LFService.DEFAULT_LOGGER_FACTORY;
    };
    LFService.DEFAULT_LOGGER_FACTORY_NAME = "DEFAULT";
    LFService.INSTANCE_SERVICE = LFServiceImpl.getInstance();
    LFService.DEFAULT_LOGGER_FACTORY = null;
    return LFService;
}());
exports.LFService = LFService;
//# sourceMappingURL=LFService.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/standard/LogGroupRule.js":
/*!************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/standard/LogGroupRule.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
/**
 * Defines a LogGroupRule, this allows you to either have everything configured the same way
 * or for example loggers that start with name model. It allows you to group loggers together
 * to have a certain loglevel and other settings. You can configure this when creating the
 * LoggerFactory (which accepts multiple LogGroupRules).
 */
var LogGroupRule = (function () {
    /**
     * Create a LogGroupRule. Basically you define what logger name(s) match for this group, what level should be used what logger type (where to log)
     * and what format to write in. If the loggerType is custom, then the callBackLogger must be supplied as callback function to return a custom logger.
     * @param regExp Regular expression, what matches for your logger names for this group
     * @param level LogLevel
     * @param logFormat LogFormat
     * @param loggerType Type of logger, if Custom, make sure to implement callBackLogger and pass in, this will be called so you can return your own logger.
     * @param callBackLogger Callback function to return a new clean custom logger (yours!)
     */
    function LogGroupRule(regExp, level, logFormat, loggerType, callBackLogger) {
        if (logFormat === void 0) { logFormat = new LoggerOptions_1.LogFormat(); }
        if (loggerType === void 0) { loggerType = LoggerOptions_1.LoggerType.Console; }
        if (callBackLogger === void 0) { callBackLogger = null; }
        this._formatterLogMessage = null;
        this._regExp = regExp;
        this._level = level;
        this._logFormat = logFormat;
        this._loggerType = loggerType;
        this._callBackLogger = callBackLogger;
    }
    Object.defineProperty(LogGroupRule.prototype, "regExp", {
        get: function () {
            return this._regExp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRule.prototype, "level", {
        get: function () {
            return this._level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRule.prototype, "loggerType", {
        get: function () {
            return this._loggerType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRule.prototype, "logFormat", {
        get: function () {
            return this._logFormat;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRule.prototype, "callBackLogger", {
        get: function () {
            return this._callBackLogger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRule.prototype, "formatterLogMessage", {
        /**
         * Get the formatterLogMessage function, see comment on the setter.
         * @returns {((message:LogMessage)=>string)|null}
         */
        get: function () {
            return this._formatterLogMessage;
        },
        /**
         * Set the default formatterLogMessage function, if set it is applied to all type of loggers except for a custom logger.
         * By default this is null (not set). You can assign a function to allow custom formatting of a log message.
         * Each log message will call this function then and expects your function to format the message and return a string.
         * Will throw an error if you attempt to set a formatterLogMessage if the LoggerType is custom.
         * @param value The formatter function, or null to reset it.
         */
        set: function (value) {
            if (value !== null && this._loggerType === LoggerOptions_1.LoggerType.Custom) {
                throw new Error("You cannot specify a formatter for log messages if your loggerType is Custom");
            }
            this._formatterLogMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    return LogGroupRule;
}());
exports.LogGroupRule = LogGroupRule;
//# sourceMappingURL=LogGroupRule.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/standard/LogGroupRuntimeSettings.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/standard/LogGroupRuntimeSettings.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
/**
 * Represents the runtime settings for a LogGroup (LogGroupRule).
 */
var LogGroupRuntimeSettings = (function () {
    function LogGroupRuntimeSettings(logGroupRule) {
        this._formatterLogMessage = null;
        this._logGroupRule = logGroupRule;
        this._level = logGroupRule.level;
        this._loggerType = logGroupRule.loggerType;
        this._logFormat = new LoggerOptions_1.LogFormat(new LoggerOptions_1.DateFormat(logGroupRule.logFormat.dateFormat.formatEnum, logGroupRule.logFormat.dateFormat.dateSeparator), logGroupRule.logFormat.showTimeStamp, logGroupRule.logFormat.showLoggerName);
        this._callBackLogger = logGroupRule.callBackLogger;
        this._formatterLogMessage = logGroupRule.formatterLogMessage;
    }
    Object.defineProperty(LogGroupRuntimeSettings.prototype, "logGroupRule", {
        /**
         * Returns original LogGroupRule (so not runtime settings!)
         * @return {LogGroupRule}
         */
        get: function () {
            return this._logGroupRule;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRuntimeSettings.prototype, "level", {
        get: function () {
            return this._level;
        },
        set: function (value) {
            this._level = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRuntimeSettings.prototype, "loggerType", {
        get: function () {
            return this._loggerType;
        },
        set: function (value) {
            this._loggerType = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRuntimeSettings.prototype, "logFormat", {
        get: function () {
            return this._logFormat;
        },
        set: function (value) {
            this._logFormat = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRuntimeSettings.prototype, "callBackLogger", {
        get: function () {
            return this._callBackLogger;
        },
        set: function (value) {
            this._callBackLogger = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogGroupRuntimeSettings.prototype, "formatterLogMessage", {
        get: function () {
            return this._formatterLogMessage;
        },
        set: function (value) {
            this._formatterLogMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    return LogGroupRuntimeSettings;
}());
exports.LogGroupRuntimeSettings = LogGroupRuntimeSettings;
//# sourceMappingURL=LogGroupRuntimeSettings.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/standard/LoggerFactoryImpl.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/standard/LoggerFactoryImpl.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var DataStructures_1 = __webpack_require__(/*! ../../utils/DataStructures */ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js");
var LoggerOptions_1 = __webpack_require__(/*! ../LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var ConsoleLoggerImpl_1 = __webpack_require__(/*! ./ConsoleLoggerImpl */ "./node_modules/typescript-logging/dist/commonjs/log/standard/ConsoleLoggerImpl.js");
var MessageBufferLoggerImpl_1 = __webpack_require__(/*! ./MessageBufferLoggerImpl */ "./node_modules/typescript-logging/dist/commonjs/log/standard/MessageBufferLoggerImpl.js");
var AbstractLogger_1 = __webpack_require__(/*! ./AbstractLogger */ "./node_modules/typescript-logging/dist/commonjs/log/standard/AbstractLogger.js");
var LogGroupRuntimeSettings_1 = __webpack_require__(/*! ./LogGroupRuntimeSettings */ "./node_modules/typescript-logging/dist/commonjs/log/standard/LogGroupRuntimeSettings.js");
var LoggerFactoryImpl = (function () {
    function LoggerFactoryImpl(name, options) {
        this._loggers = new DataStructures_1.SimpleMap();
        this._logGroupRuntimeSettingsIndexed = [];
        this._loggerToLogGroupSettings = new DataStructures_1.SimpleMap();
        this._name = name;
        this.configure(options);
    }
    LoggerFactoryImpl.prototype.configure = function (options) {
        this._options = options;
        // Close any current open loggers.
        this.closeLoggers();
        this._loggerToLogGroupSettings.clear();
        this._logGroupRuntimeSettingsIndexed = [];
        var logGroupRules = this._options.logGroupRules;
        /* tslint:disable:prefer-for-of */
        for (var i = 0; i < logGroupRules.length; i++) {
            this._logGroupRuntimeSettingsIndexed.push(new LogGroupRuntimeSettings_1.LogGroupRuntimeSettings(logGroupRules[i]));
        }
        /* tslint:enable:prefer-for-of */
    };
    LoggerFactoryImpl.prototype.getLogger = function (named) {
        if (!this._options.enabled) {
            throw new Error("LoggerFactory is not enabled, please check your options passed in");
        }
        var logger = this._loggers.get(named);
        if (typeof logger !== "undefined") {
            return logger;
        }
        // Initialize logger with appropriate level
        logger = this.loadLogger(named);
        this._loggers.put(named, logger);
        return logger;
    };
    LoggerFactoryImpl.prototype.isEnabled = function () {
        return this._options.enabled;
    };
    LoggerFactoryImpl.prototype.closeLoggers = function () {
        this._loggers.forEachValue(function (logger) {
            // We can only close if AbstractLogger is used (our loggers, but user loggers may not extend it, even though unlikely).
            if (logger instanceof AbstractLogger_1.AbstractLogger) {
                logger.close();
            }
        });
        this._loggers.clear();
    };
    LoggerFactoryImpl.prototype.getName = function () {
        return this._name;
    };
    LoggerFactoryImpl.prototype.getLogGroupRuntimeSettingsByIndex = function (idx) {
        if (idx >= 0 && idx < this._logGroupRuntimeSettingsIndexed.length) {
            return this._logGroupRuntimeSettingsIndexed[idx];
        }
        return null;
    };
    LoggerFactoryImpl.prototype.getLogGroupRuntimeSettingsByLoggerName = function (nameLogger) {
        var result = this._loggerToLogGroupSettings.get(nameLogger);
        if (typeof result === "undefined") {
            return null;
        }
        return result;
    };
    LoggerFactoryImpl.prototype.getLogGroupRuntimeSettings = function () {
        return this._logGroupRuntimeSettingsIndexed.slice(0);
    };
    LoggerFactoryImpl.prototype.loadLogger = function (named) {
        var logGroupRules = this._options.logGroupRules;
        for (var i = 0; i < logGroupRules.length; i++) {
            var logGroupRule = logGroupRules[i];
            if (logGroupRule.regExp.test(named)) {
                var logGroupRuntimeSettings = this._logGroupRuntimeSettingsIndexed[i];
                var logger = void 0;
                switch (logGroupRule.loggerType) {
                    case LoggerOptions_1.LoggerType.Console:
                        logger = new ConsoleLoggerImpl_1.ConsoleLoggerImpl(named, logGroupRuntimeSettings);
                        break;
                    case LoggerOptions_1.LoggerType.MessageBuffer:
                        logger = new MessageBufferLoggerImpl_1.MessageBufferLoggerImpl(named, logGroupRuntimeSettings);
                        break;
                    case LoggerOptions_1.LoggerType.Custom:
                        if (logGroupRule.callBackLogger != null) {
                            logger = logGroupRule.callBackLogger(named, logGroupRuntimeSettings);
                        }
                        else {
                            throw new Error("Cannot create a custom logger, custom callback is null");
                        }
                        break;
                    default:
                        throw new Error("Cannot create a Logger for LoggerType: " + logGroupRule.loggerType);
                }
                // For a new logger map it by its name
                this._loggerToLogGroupSettings.put(named, logGroupRuntimeSettings);
                return logger;
            }
        }
        throw new Error("Failed to find a match to create a Logger for: " + named);
    };
    return LoggerFactoryImpl;
}());
exports.LoggerFactoryImpl = LoggerFactoryImpl;
//# sourceMappingURL=LoggerFactoryImpl.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/standard/LoggerFactoryOptions.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/standard/LoggerFactoryOptions.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Options object you can use to configure the LoggerFactory you create at LFService.
 */
var LoggerFactoryOptions = (function () {
    function LoggerFactoryOptions() {
        this._logGroupRules = [];
        this._enabled = true;
    }
    /**
     * Add LogGroupRule, see {LogGroupRule) for details
     * @param rule Rule to add
     * @returns {LoggerFactoryOptions} returns itself
     */
    LoggerFactoryOptions.prototype.addLogGroupRule = function (rule) {
        this._logGroupRules.push(rule);
        return this;
    };
    /**
     * Enable or disable logging completely for the LoggerFactory.
     * @param enabled True for enabled (default)
     * @returns {LoggerFactoryOptions} returns itself
     */
    LoggerFactoryOptions.prototype.setEnabled = function (enabled) {
        this._enabled = enabled;
        return this;
    };
    Object.defineProperty(LoggerFactoryOptions.prototype, "logGroupRules", {
        get: function () {
            return this._logGroupRules;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoggerFactoryOptions.prototype, "enabled", {
        get: function () {
            return this._enabled;
        },
        enumerable: true,
        configurable: true
    });
    return LoggerFactoryOptions;
}());
exports.LoggerFactoryOptions = LoggerFactoryOptions;
//# sourceMappingURL=LoggerFactoryOptions.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/log/standard/MessageBufferLoggerImpl.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/log/standard/MessageBufferLoggerImpl.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var AbstractLogger_1 = __webpack_require__(/*! ./AbstractLogger */ "./node_modules/typescript-logging/dist/commonjs/log/standard/AbstractLogger.js");
/**
 * Logger which buffers all messages, use with care due to possible high memory footprint.
 * Can be convenient in some cases. Call toString() for full output, or cast to this class
 * and call getMessages() to do something with it yourself.
 */
var MessageBufferLoggerImpl = (function (_super) {
    __extends(MessageBufferLoggerImpl, _super);
    function MessageBufferLoggerImpl(name, logGroupRuntimeSettings) {
        var _this = _super.call(this, name, logGroupRuntimeSettings) || this;
        _this.messages = [];
        return _this;
    }
    MessageBufferLoggerImpl.prototype.close = function () {
        this.messages = [];
        _super.prototype.close.call(this);
    };
    MessageBufferLoggerImpl.prototype.getMessages = function () {
        return this.messages;
    };
    MessageBufferLoggerImpl.prototype.toString = function () {
        return this.messages.map(function (msg) {
            return msg;
        }).join("\n");
    };
    MessageBufferLoggerImpl.prototype.doLog = function (message) {
        var messageFormatter = this._getMessageFormatter();
        var fullMsg;
        if (messageFormatter === null) {
            fullMsg = this.createDefaultLogMessage(message);
        }
        else {
            fullMsg = messageFormatter(message);
        }
        this.messages.push(fullMsg);
    };
    return MessageBufferLoggerImpl;
}(AbstractLogger_1.AbstractLogger));
exports.MessageBufferLoggerImpl = MessageBufferLoggerImpl;
//# sourceMappingURL=MessageBufferLoggerImpl.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/typescript-logging.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/typescript-logging.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
var LogGroupControl_1 = __webpack_require__(/*! ./control/LogGroupControl */ "./node_modules/typescript-logging/dist/commonjs/control/LogGroupControl.js");
var CategoryServiceControl_1 = __webpack_require__(/*! ./control/CategoryServiceControl */ "./node_modules/typescript-logging/dist/commonjs/control/CategoryServiceControl.js");
var ExtensionHelper_1 = __webpack_require__(/*! ./extension/ExtensionHelper */ "./node_modules/typescript-logging/dist/commonjs/extension/ExtensionHelper.js");
exports.ExtensionHelper = ExtensionHelper_1.ExtensionHelper;
// Category related
var AbstractCategoryLogger_1 = __webpack_require__(/*! ./log/category/AbstractCategoryLogger */ "./node_modules/typescript-logging/dist/commonjs/log/category/AbstractCategoryLogger.js");
exports.AbstractCategoryLogger = AbstractCategoryLogger_1.AbstractCategoryLogger;
var CategoryConsoleLoggerImpl_1 = __webpack_require__(/*! ./log/category/CategoryConsoleLoggerImpl */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryConsoleLoggerImpl.js");
exports.CategoryConsoleLoggerImpl = CategoryConsoleLoggerImpl_1.CategoryConsoleLoggerImpl;
var CategoryDelegateLoggerImpl_1 = __webpack_require__(/*! ./log/category/CategoryDelegateLoggerImpl */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryDelegateLoggerImpl.js");
exports.CategoryDelegateLoggerImpl = CategoryDelegateLoggerImpl_1.CategoryDelegateLoggerImpl;
var Category_1 = __webpack_require__(/*! ./log/category/Category */ "./node_modules/typescript-logging/dist/commonjs/log/category/Category.js");
exports.Category = Category_1.Category;
var CategoryRuntimeSettings_1 = __webpack_require__(/*! ./log/category/CategoryRuntimeSettings */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryRuntimeSettings.js");
exports.CategoryRuntimeSettings = CategoryRuntimeSettings_1.CategoryRuntimeSettings;
var CategoryConfiguration_1 = __webpack_require__(/*! ./log/category/CategoryConfiguration */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryConfiguration.js");
exports.CategoryConfiguration = CategoryConfiguration_1.CategoryConfiguration;
var CategoryMessageBufferImpl_1 = __webpack_require__(/*! ./log/category/CategoryMessageBufferImpl */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryMessageBufferImpl.js");
exports.CategoryMessageBufferLoggerImpl = CategoryMessageBufferImpl_1.CategoryMessageBufferLoggerImpl;
var CategoryServiceFactory_1 = __webpack_require__(/*! ./log/category/CategoryServiceFactory */ "./node_modules/typescript-logging/dist/commonjs/log/category/CategoryServiceFactory.js");
exports.CategoryServiceFactory = CategoryServiceFactory_1.CategoryServiceFactory;
var LoggerFactoryOptions_1 = __webpack_require__(/*! ./log/standard/LoggerFactoryOptions */ "./node_modules/typescript-logging/dist/commonjs/log/standard/LoggerFactoryOptions.js");
exports.LoggerFactoryOptions = LoggerFactoryOptions_1.LoggerFactoryOptions;
var LogGroupRule_1 = __webpack_require__(/*! ./log/standard/LogGroupRule */ "./node_modules/typescript-logging/dist/commonjs/log/standard/LogGroupRule.js");
exports.LogGroupRule = LogGroupRule_1.LogGroupRule;
var LFService_1 = __webpack_require__(/*! ./log/standard/LFService */ "./node_modules/typescript-logging/dist/commonjs/log/standard/LFService.js");
exports.LFService = LFService_1.LFService;
var AbstractLogger_1 = __webpack_require__(/*! ./log/standard/AbstractLogger */ "./node_modules/typescript-logging/dist/commonjs/log/standard/AbstractLogger.js");
exports.AbstractLogger = AbstractLogger_1.AbstractLogger;
var ConsoleLoggerImpl_1 = __webpack_require__(/*! ./log/standard/ConsoleLoggerImpl */ "./node_modules/typescript-logging/dist/commonjs/log/standard/ConsoleLoggerImpl.js");
exports.ConsoleLoggerImpl = ConsoleLoggerImpl_1.ConsoleLoggerImpl;
var MessageBufferLoggerImpl_1 = __webpack_require__(/*! ./log/standard/MessageBufferLoggerImpl */ "./node_modules/typescript-logging/dist/commonjs/log/standard/MessageBufferLoggerImpl.js");
exports.MessageBufferLoggerImpl = MessageBufferLoggerImpl_1.MessageBufferLoggerImpl;
var LoggerOptions_1 = __webpack_require__(/*! ./log/LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
exports.CategoryLogFormat = LoggerOptions_1.CategoryLogFormat;
exports.DateFormat = LoggerOptions_1.DateFormat;
exports.DateFormatEnum = LoggerOptions_1.DateFormatEnum;
exports.LogFormat = LoggerOptions_1.LogFormat;
exports.LoggerType = LoggerOptions_1.LoggerType;
exports.LogLevel = LoggerOptions_1.LogLevel;
// Utilities
var DataStructures_1 = __webpack_require__(/*! ./utils/DataStructures */ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js");
exports.SimpleMap = DataStructures_1.SimpleMap;
exports.LinkedList = DataStructures_1.LinkedList;
__export(__webpack_require__(/*! ./utils/JSONHelper */ "./node_modules/typescript-logging/dist/commonjs/utils/JSONHelper.js"));
var MessageUtils_1 = __webpack_require__(/*! ./utils/MessageUtils */ "./node_modules/typescript-logging/dist/commonjs/utils/MessageUtils.js");
exports.MessageFormatUtils = MessageUtils_1.MessageFormatUtils;
/*
 Functions to export on TSL libarary var.
*/
// Export help function
function help() {
    /* tslint:disable:no-console */
    console.log("help()\n   ** Shows this help\n\n getLogControl(): LoggerControl\n   ** Returns LoggerControl Object, use to dynamically change loglevels for log4j logging.\n   ** Call .help() on LoggerControl object for available options.\n\n getCategoryControl(): CategoryServiceControl\n   ** Returns CategoryServiceControl Object, use to dynamically change loglevels for category logging.\n   ** Call .help() on CategoryServiceControl object for available options.\n");
    /* tslint:enable:no-console */
}
exports.help = help;
// Export LogControl function (log4j)
function getLogControl() {
    return new LogGroupControl_1.LoggerControlImpl();
}
exports.getLogControl = getLogControl;
// Export CategoryControl function
function getCategoryControl() {
    return new CategoryServiceControl_1.CategoryServiceControlImpl();
}
exports.getCategoryControl = getCategoryControl;
//# sourceMappingURL=typescript-logging.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LinkedNode = (function () {
    function LinkedNode(value) {
        this._previous = null;
        this._next = null;
        this._value = value;
    }
    Object.defineProperty(LinkedNode.prototype, "previous", {
        get: function () {
            return this._previous;
        },
        set: function (value) {
            this._previous = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkedNode.prototype, "next", {
        get: function () {
            return this._next;
        },
        set: function (value) {
            this._next = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkedNode.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    return LinkedNode;
}());
/**
 * Double linkedlist implementation.
 */
var LinkedList = (function () {
    function LinkedList() {
        this.head = null;
        this.size = 0;
    }
    LinkedList.prototype.addHead = function (value) {
        if (!this.createHeadIfNeeded(value)) {
            if (this.head != null) {
                var nextNode = this.head.next;
                var newHeadNode = new LinkedNode(value);
                if (nextNode != null) {
                    nextNode.previous = newHeadNode;
                    newHeadNode.next = nextNode;
                }
                this.head = newHeadNode;
            }
            else {
                throw new Error("This should never happen, list implementation broken");
            }
        }
        this.size++;
    };
    LinkedList.prototype.addTail = function (value) {
        if (!this.createHeadIfNeeded(value)) {
            var oldTailNode = this.getTailNode();
            if (oldTailNode != null) {
                var newTailNode = new LinkedNode(value);
                oldTailNode.next = newTailNode;
                newTailNode.previous = oldTailNode;
            }
            else {
                throw new Error("List implementation broken");
            }
        }
        this.size++;
    };
    LinkedList.prototype.clear = function () {
        this.head = null;
        this.size = 0;
    };
    LinkedList.prototype.getHead = function () {
        if (this.head != null) {
            return this.head.value;
        }
        return null;
    };
    LinkedList.prototype.removeHead = function () {
        if (this.head != null) {
            var oldHead = this.head;
            var value = oldHead.value;
            this.head = oldHead.next;
            this.size--;
            return value;
        }
        return null;
    };
    LinkedList.prototype.getTail = function () {
        var node = this.getTailNode();
        if (node != null) {
            return node.value;
        }
        return null;
    };
    LinkedList.prototype.removeTail = function () {
        var node = this.getTailNode();
        if (node != null) {
            if (node === this.head) {
                this.head = null;
            }
            else {
                var previousNode = node.previous;
                if (previousNode != null) {
                    previousNode.next = null;
                }
                else {
                    throw new Error("List implementation is broken");
                }
            }
            this.size--;
            return node.value;
        }
        return null;
    };
    LinkedList.prototype.getSize = function () {
        return this.size;
    };
    LinkedList.prototype.filter = function (f) {
        var recurse = function (fn, node, values) {
            if (fn(node.value)) {
                values.push(node.value);
            }
            var nextNode = node.next;
            if (nextNode != null) {
                recurse(fn, nextNode, values);
            }
        };
        var result = [];
        var currentNode = this.head;
        if (currentNode != null) {
            recurse(f, currentNode, result);
        }
        return result;
    };
    LinkedList.prototype.createHeadIfNeeded = function (value) {
        if (this.head == null) {
            this.head = new LinkedNode(value);
            return true;
        }
        return false;
    };
    LinkedList.prototype.getTailNode = function () {
        if (this.head == null) {
            return null;
        }
        var node = this.head;
        while (node.next != null) {
            node = node.next;
        }
        return node;
    };
    return LinkedList;
}());
exports.LinkedList = LinkedList;
/**
 * Map implementation keyed by string (always).
 */
var SimpleMap = (function () {
    function SimpleMap() {
        this.array = {};
    }
    SimpleMap.prototype.put = function (key, value) {
        this.array[key] = value;
    };
    SimpleMap.prototype.get = function (key) {
        return this.array[key];
    };
    SimpleMap.prototype.exists = function (key) {
        var value = this.array[key];
        return (typeof value !== "undefined");
    };
    SimpleMap.prototype.remove = function (key) {
        var value = this.array[key];
        if (typeof value !== "undefined") {
            delete this.array[key];
        }
        return value;
    };
    SimpleMap.prototype.keys = function () {
        var keys = [];
        for (var key in this.array) {
            // To prevent random stuff to appear
            if (this.array.hasOwnProperty(key)) {
                keys.push(key);
            }
        }
        return keys;
    };
    SimpleMap.prototype.values = function () {
        var values = [];
        for (var key in this.array) {
            // To prevent random stuff to appear
            if (this.array.hasOwnProperty(key)) {
                values.push(this.get(key));
            }
        }
        return values;
    };
    SimpleMap.prototype.size = function () {
        return this.keys().length;
    };
    SimpleMap.prototype.isEmpty = function () {
        return this.size() === 0;
    };
    SimpleMap.prototype.clear = function () {
        this.array = {};
    };
    SimpleMap.prototype.forEach = function (cbFunction) {
        var count = 0;
        for (var key in this.array) {
            // To prevent random stuff to appear
            if (this.array.hasOwnProperty(key)) {
                var value = this.array[key];
                cbFunction(key, value, count);
                count++;
            }
        }
    };
    SimpleMap.prototype.forEachValue = function (cbFunction) {
        var count = 0;
        for (var key in this.array) {
            // To prevent random stuff to appear
            if (this.array.hasOwnProperty(key)) {
                var value = this.array[key];
                cbFunction(value, count);
                count++;
            }
        }
    };
    return SimpleMap;
}());
exports.SimpleMap = SimpleMap;
/**
 * Tuple to hold two values.
 */
var TuplePair = (function () {
    function TuplePair(x, y) {
        this._x = x;
        this._y = y;
    }
    Object.defineProperty(TuplePair.prototype, "x", {
        get: function () {
            return this._x;
        },
        set: function (value) {
            this._x = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TuplePair.prototype, "y", {
        get: function () {
            return this._y;
        },
        set: function (value) {
            this._y = value;
        },
        enumerable: true,
        configurable: true
    });
    return TuplePair;
}());
exports.TuplePair = TuplePair;
/**
 * Utility class to build up a string.
 */
var StringBuilder = (function () {
    function StringBuilder() {
        this.data = [];
    }
    StringBuilder.prototype.append = function (line) {
        if (line === undefined || line == null) {
            throw new Error("String must be set, cannot append null or undefined");
        }
        this.data.push(line);
        return this;
    };
    StringBuilder.prototype.appendLine = function (line) {
        this.data.push(line + "\n");
        return this;
    };
    StringBuilder.prototype.isEmpty = function () {
        return this.data.length === 0;
    };
    StringBuilder.prototype.clear = function () {
        this.data = [];
    };
    StringBuilder.prototype.toString = function (separator) {
        if (separator === void 0) { separator = ""; }
        return this.data.join(separator);
    };
    return StringBuilder;
}());
exports.StringBuilder = StringBuilder;
//# sourceMappingURL=DataStructures.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/utils/JSONHelper.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/utils/JSONHelper.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Module containing bunch of JSON related stuff.
 */
var LoggerOptions_1 = __webpack_require__(/*! ../log/LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
var DataStructures_1 = __webpack_require__(/*! ./DataStructures */ "./node_modules/typescript-logging/dist/commonjs/utils/DataStructures.js");
var JSONTypeImpl = (function () {
    function JSONTypeImpl(value) {
        this._value = value;
    }
    JSONTypeImpl.prototype.getValue = function () {
        return this._value;
    };
    JSONTypeImpl.prototype.toString = function () {
        var value = this.getValue();
        if (value != null) {
            return value.toString();
        }
        return "null";
    };
    return JSONTypeImpl;
}());
var JSONBooleanType = (function (_super) {
    __extends(JSONBooleanType, _super);
    function JSONBooleanType(value) {
        return _super.call(this, value) || this;
    }
    return JSONBooleanType;
}(JSONTypeImpl));
var JSONNumberType = (function (_super) {
    __extends(JSONNumberType, _super);
    function JSONNumberType(value) {
        return _super.call(this, value) || this;
    }
    return JSONNumberType;
}(JSONTypeImpl));
var JSONStringType = (function (_super) {
    __extends(JSONStringType, _super);
    function JSONStringType(value) {
        return _super.call(this, value) || this;
    }
    JSONStringType.prototype.toString = function () {
        var value = this.getValue();
        if (value != null) {
            return JSON.stringify(value.toString());
        }
        return "null";
    };
    return JSONStringType;
}(JSONTypeImpl));
var JSONObjectType = (function (_super) {
    __extends(JSONObjectType, _super);
    function JSONObjectType(value) {
        return _super.call(this, value) || this;
    }
    return JSONObjectType;
}(JSONTypeImpl));
var JSONArrayType = (function (_super) {
    __extends(JSONArrayType, _super);
    function JSONArrayType(value) {
        return _super.call(this, value) || this;
    }
    JSONArrayType.prototype.toString = function () {
        var value = this.getValue();
        if (value != null) {
            return value.toString();
        }
        return "null";
    };
    return JSONArrayType;
}(JSONTypeImpl));
var JSONNullType = (function (_super) {
    __extends(JSONNullType, _super);
    function JSONNullType() {
        return _super.call(this, null) || this;
    }
    JSONNullType.prototype.toString = function () {
        return "null";
    };
    return JSONNullType;
}(JSONTypeImpl));
var JSONTypeConverter = (function () {
    function JSONTypeConverter() {
    }
    JSONTypeConverter.toJSONType = function (value) {
        if (value === null) {
            return new JSONNullType();
        }
        if (typeof value === "string") {
            return new JSONStringType(value);
        }
        if (typeof value === "number") {
            return new JSONNumberType(value);
        }
        if (typeof value === "boolean") {
            return new JSONBooleanType(value);
        }
        if (value instanceof JSONObject) {
            return new JSONObjectType(value);
        }
        throw new Error("Type not supported for value: " + value);
    };
    return JSONTypeConverter;
}());
var JSONObject = (function () {
    function JSONObject() {
        this.values = new DataStructures_1.SimpleMap();
    }
    JSONObject.prototype.addBoolean = function (name, value) {
        this.checkName(name);
        JSONObject.checkValue(value);
        this.values.put(name, new JSONBooleanType(value));
        return this;
    };
    JSONObject.prototype.addNumber = function (name, value) {
        this.checkName(name);
        JSONObject.checkValue(value);
        this.values.put(name, new JSONNumberType(value));
        return this;
    };
    JSONObject.prototype.addString = function (name, value) {
        this.checkName(name);
        JSONObject.checkValue(value);
        this.values.put(name, new JSONStringType(value));
        return this;
    };
    JSONObject.prototype.addNull = function (name) {
        this.checkName(name);
        this.values.put(name, new JSONNullType());
        return this;
    };
    JSONObject.prototype.addArray = function (name, array) {
        this.checkName(name);
        JSONObject.checkValue(array);
        if (array == null) {
            throw new Error("Cannot add array as null");
        }
        this.values.put(name, new JSONArrayType(array));
        return this;
    };
    JSONObject.prototype.addObject = function (name, object) {
        this.checkName(name);
        JSONObject.checkValue(object);
        if (object == null) {
            throw new Error("Cannot add object as null");
        }
        this.values.put(name, new JSONObjectType(object));
        return this;
    };
    JSONObject.prototype.toString = function (pretty) {
        var _this = this;
        if (pretty === void 0) { pretty = false; }
        var comma = false;
        var buffer = new DataStructures_1.StringBuilder();
        buffer.append("{");
        this.values.keys().forEach(function (key) {
            var value = _this.values.get(key);
            if (value != null) {
                if (comma) {
                    buffer.append(",");
                }
                buffer.append('"').append(key).append('":').append(value.toString());
                comma = true;
            }
        });
        buffer.append("}");
        return buffer.toString();
    };
    JSONObject.prototype.checkName = function (name) {
        if (name == null || name === undefined) {
            throw new Error("Name is null or undefined");
        }
        if (this.values.exists(name)) {
            throw new Error("Name " + name + " is already present for this object");
        }
    };
    JSONObject.checkValue = function (value) {
        if (value === undefined) {
            throw new Error("Value is undefined");
        }
    };
    return JSONObject;
}());
exports.JSONObject = JSONObject;
var JSONArray = (function () {
    function JSONArray() {
        this.objects = [];
    }
    JSONArray.prototype.add = function (object) {
        if (object === undefined) {
            throw new Error("Object is not allowed to be undefined");
        }
        this.objects.push(JSONTypeConverter.toJSONType(object));
        return this;
    };
    JSONArray.prototype.toString = function (pretty) {
        if (pretty === void 0) { pretty = false; }
        var buffer = new DataStructures_1.StringBuilder();
        buffer.append("[");
        this.objects.forEach(function (value, index) {
            if (index > 0) {
                buffer.append(",");
            }
            buffer.append(value.toString());
        });
        buffer.append("]");
        return buffer.toString();
    };
    return JSONArray;
}());
exports.JSONArray = JSONArray;
/**
 * Utility class that helps us convert things to and from json (not for normal usage).
 */
var JSONHelper = (function () {
    function JSONHelper() {
    }
    JSONHelper.categoryToJSON = function (cat, recursive) {
        /*
         {
         "categories":
         [
         { id=1,
         name: "x",
         parent: null,
         logLevel: "Error"
         },
         { id=2,
         name: "y",
         parent: 1,
         logLevel: "Error"
         }
         ]
         }
         */
        var arr = new JSONArray();
        JSONHelper._categoryToJSON(cat, arr, recursive);
        var object = new JSONObject();
        object.addArray("categories", arr);
        return object;
    };
    JSONHelper._categoryToJSON = function (cat, arr, recursive) {
        var object = new JSONObject();
        object.addNumber("id", cat.id);
        object.addString("name", cat.name);
        object.addString("logLevel", LoggerOptions_1.LogLevel[cat.logLevel].toString());
        if (cat.parent != null) {
            object.addNumber("parent", cat.parent.id);
        }
        else {
            object.addNull("parent");
        }
        arr.add(object);
        if (recursive) {
            cat.children.forEach(function (child) {
                JSONHelper._categoryToJSON(child, arr, recursive);
            });
        }
    };
    return JSONHelper;
}());
exports.JSONHelper = JSONHelper;
//# sourceMappingURL=JSONHelper.js.map

/***/ }),

/***/ "./node_modules/typescript-logging/dist/commonjs/utils/MessageUtils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/typescript-logging/dist/commonjs/utils/MessageUtils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ST = __webpack_require__(/*! stacktrace-js */ "./node_modules/stacktrace-js/stacktrace.js");
var LoggerOptions_1 = __webpack_require__(/*! ../log/LoggerOptions */ "./node_modules/typescript-logging/dist/commonjs/log/LoggerOptions.js");
/**
 * Some utilities to format messages.
 */
var MessageFormatUtils = (function () {
    function MessageFormatUtils() {
    }
    /**
     * Render given date in given DateFormat and return as String.
     * @param date Date
     * @param dateFormat Format
     * @returns {string} Formatted date
     */
    MessageFormatUtils.renderDate = function (date, dateFormat) {
        var lpad = function (value, chars, padWith) {
            var howMany = chars - value.length;
            if (howMany > 0) {
                var res = "";
                for (var i = 0; i < howMany; i++) {
                    res += padWith;
                }
                res += value;
                return res;
            }
            return value;
        };
        var fullYear = function (d) {
            return lpad(d.getFullYear().toString(), 4, "0");
        };
        var month = function (d) {
            return lpad((d.getMonth() + 1).toString(), 2, "0");
        };
        var day = function (d) {
            return lpad(d.getDate().toString(), 2, "0");
        };
        var hours = function (d) {
            return lpad(d.getHours().toString(), 2, "0");
        };
        var minutes = function (d) {
            return lpad(d.getMinutes().toString(), 2, "0");
        };
        var seconds = function (d) {
            return lpad(d.getSeconds().toString(), 2, "0");
        };
        var millis = function (d) {
            return lpad(d.getMilliseconds().toString(), 3, "0");
        };
        var dateSeparator = dateFormat.dateSeparator;
        var ds = "";
        switch (dateFormat.formatEnum) {
            case LoggerOptions_1.DateFormatEnum.Default:
                // yyyy-mm-dd hh:mm:ss,m
                ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + " " +
                    hours(date) + ":" + minutes(date) + ":" + seconds(date) + "," + millis(date);
                break;
            case LoggerOptions_1.DateFormatEnum.YearMonthDayTime:
                ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + " " +
                    hours(date) + ":" + minutes(date) + ":" + seconds(date);
                break;
            case LoggerOptions_1.DateFormatEnum.YearDayMonthWithFullTime:
                ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + " " +
                    hours(date) + ":" + minutes(date) + ":" + seconds(date) + "," + millis(date);
                break;
            case LoggerOptions_1.DateFormatEnum.YearDayMonthTime:
                ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + " " +
                    hours(date) + ":" + minutes(date) + ":" + seconds(date);
                break;
            default:
                throw new Error("Unsupported date format enum: " + dateFormat.formatEnum);
        }
        return ds;
    };
    /**
     * Renders given category log message in default format.
     * @param msg Message to format
     * @param addStack If true adds the stack to the output, otherwise skips it
     * @returns {string} Formatted message
     */
    MessageFormatUtils.renderDefaultMessage = function (msg, addStack) {
        var result = "";
        var logFormat = msg.logFormat;
        if (logFormat.showTimeStamp) {
            result += MessageFormatUtils.renderDate(msg.date, logFormat.dateFormat) + " ";
        }
        result += LoggerOptions_1.LogLevel[msg.level].toUpperCase();
        if (msg.isResolvedErrorMessage) {
            result += " (resolved)";
        }
        result += " ";
        if (logFormat.showCategoryName) {
            result += "[";
            msg.categories.forEach(function (value, idx) {
                if (idx > 0) {
                    result += ", ";
                }
                result += value.name;
            });
            result += "]";
        }
        // Get the normal string message first
        var actualStringMsg = "";
        var dataString = "";
        var messageOrLogData = msg.message;
        if (typeof messageOrLogData === "string") {
            actualStringMsg = messageOrLogData;
        }
        else {
            var logData = messageOrLogData;
            actualStringMsg = logData.msg;
            // We do have data?
            if (logData.data) {
                dataString = " [data]: " + (logData.ds ? logData.ds(logData.data) : JSON.stringify(logData.data));
            }
        }
        result += " " + actualStringMsg + "" + dataString;
        if (addStack && msg.errorAsStack !== null) {
            result += "\n" + msg.errorAsStack;
        }
        return result;
    };
    /**
     * Renders given log4j log message in default format.
     * @param msg Message to format
     * @param addStack If true adds the stack to the output, otherwise skips it
     * @returns {string} Formatted message
     */
    MessageFormatUtils.renderDefaultLog4jMessage = function (msg, addStack) {
        var format = msg.logGroupRule.logFormat;
        var result = "";
        if (format.showTimeStamp) {
            result += MessageFormatUtils.renderDate(msg.date, format.dateFormat) + " ";
        }
        result += LoggerOptions_1.LogLevel[msg.level].toUpperCase() + " ";
        if (format.showLoggerName) {
            result += "[" + msg.loggerName + "]";
        }
        // Get the normal string message first
        var actualStringMsg = "";
        var dataString = "";
        if (typeof msg.message === "string") {
            actualStringMsg = msg.message;
        }
        else {
            var logData = msg.message;
            actualStringMsg = logData.msg;
            // We do have data?
            if (logData.data) {
                dataString = " [data]: " + (logData.ds ? logData.ds(logData.data) : JSON.stringify(logData.data));
            }
        }
        result += " " + actualStringMsg + "" + dataString;
        if (addStack && msg.errorAsStack !== null) {
            result += "\n" + msg.errorAsStack;
        }
        return result;
    };
    /**
     * Render error as stack
     * @param error Return error as Promise
     * @returns {Promise<string>|Promise} Promise for stack
     */
    MessageFormatUtils.renderError = function (error) {
        var result = error.name + ": " + error.message + "\n@";
        return new Promise(function (resolve) {
            // This one has a promise too
            ST.fromError(error, { offline: true }).then(function (frames) {
                var stackStr = (frames.map(function (frame) {
                    return frame.toString();
                })).join("\n  ");
                result += "\n" + stackStr;
                // This resolves our returned promise
                resolve(result);
            }).catch(function () {
                result = "Unexpected error object was passed in. ";
                try {
                    result += "Could not resolve it, stringified object: " + JSON.stringify(error);
                }
                catch (e) {
                    // Cannot stringify can only tell something was wrong.
                    result += "Could not resolve it or stringify it.";
                }
                resolve(result);
            });
        });
    };
    return MessageFormatUtils;
}());
exports.MessageFormatUtils = MessageFormatUtils;
//# sourceMappingURL=MessageUtils.js.map

/***/ }),

/***/ "./out/CoverageHandlers/SuiteCRMCoverageHandlerCreator.js":
/*!****************************************************************!*\
  !*** ./out/CoverageHandlers/SuiteCRMCoverageHandlerCreator.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const WebCoverageHandlerCreator_1 = __webpack_require__(/*! @jacada-jbot/web/include/CoverageHandlers/Web/WebCoverageHandlerCreator */ "./node_modules/@jacada-jbot/web/include/CoverageHandlers/Web/WebCoverageHandlerCreator.js");
const coveredApp_1 = __webpack_require__(/*! ../coveredApp */ "./out/coveredApp.js");
(0, WebCoverageHandlerCreator_1.createCoveredApp)(coveredApp_1.coveredApp);
//# sourceMappingURL=SuiteCRMCoverageHandlerCreator.js.map

/***/ }),

/***/ "./out/coveredApp.js":
/*!***************************!*\
  !*** ./out/coveredApp.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.coveredApp = void 0;
exports.coveredApp = {
    coverageHandlers: [],
};
//# sourceMappingURL=coveredApp.js.map

/***/ }),

/***/ "./node_modules/underscore/underscore-umd.js":
/*!***************************************************!*\
  !*** ./node_modules/underscore/underscore-umd.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

(function (global, factory) {
   true ? module.exports = factory() :
  0;
}(this, (function () {
  //     Underscore.js 1.13.4
  //     https://underscorejs.org
  //     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors
  //     Underscore may be freely distributed under the MIT license.

  // Current version.
  var VERSION = '1.13.4';

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self === self && self) ||
            (typeof __webpack_require__.g == 'object' && __webpack_require__.g.global === __webpack_require__.g && __webpack_require__.g) ||
            Function('return this')() ||
            {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // Modern feature detection.
  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',
      supportsDataView = typeof DataView !== 'undefined';

  // All **ECMAScript 5+** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create,
      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;

  // Create references to these builtin functions because we override them.
  var _isNaN = isNaN,
      _isFinite = isFinite;

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  // The largest integer that can be represented exactly.
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  function restArguments(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  }

  // Is a given variable an object?
  function isObject(obj) {
    var type = typeof obj;
    return type === 'function' || (type === 'object' && !!obj);
  }

  // Is a given value equal to null?
  function isNull(obj) {
    return obj === null;
  }

  // Is a given variable undefined?
  function isUndefined(obj) {
    return obj === void 0;
  }

  // Is a given value a boolean?
  function isBoolean(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  }

  // Is a given value a DOM element?
  function isElement(obj) {
    return !!(obj && obj.nodeType === 1);
  }

  // Internal function for creating a `toString`-based type tester.
  function tagTester(name) {
    var tag = '[object ' + name + ']';
    return function(obj) {
      return toString.call(obj) === tag;
    };
  }

  var isString = tagTester('String');

  var isNumber = tagTester('Number');

  var isDate = tagTester('Date');

  var isRegExp = tagTester('RegExp');

  var isError = tagTester('Error');

  var isSymbol = tagTester('Symbol');

  var isArrayBuffer = tagTester('ArrayBuffer');

  var isFunction = tagTester('Function');

  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old
  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if ( true && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  var isFunction$1 = isFunction;

  var hasObjectTag = tagTester('Object');

  // In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.
  // In IE 11, the most common among them, this problem also applies to
  // `Map`, `WeakMap` and `Set`.
  var hasStringTagBug = (
        supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))
      ),
      isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));

  var isDataView = tagTester('DataView');

  // In IE 10 - Edge 13, we need a different heuristic
  // to determine whether an object is a `DataView`.
  function ie10IsDataView(obj) {
    return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);
  }

  var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);

  // Is a given value an array?
  // Delegates to ECMA5's native `Array.isArray`.
  var isArray = nativeIsArray || tagTester('Array');

  // Internal function to check whether `key` is an own property name of `obj`.
  function has$1(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  }

  var isArguments = tagTester('Arguments');

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  (function() {
    if (!isArguments(arguments)) {
      isArguments = function(obj) {
        return has$1(obj, 'callee');
      };
    }
  }());

  var isArguments$1 = isArguments;

  // Is a given object a finite number?
  function isFinite$1(obj) {
    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
  }

  // Is the given value `NaN`?
  function isNaN$1(obj) {
    return isNumber(obj) && _isNaN(obj);
  }

  // Predicate-generating function. Often useful outside of Underscore.
  function constant(value) {
    return function() {
      return value;
    };
  }

  // Common internal logic for `isArrayLike` and `isBufferLike`.
  function createSizePropertyCheck(getSizeProperty) {
    return function(collection) {
      var sizeProperty = getSizeProperty(collection);
      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
    }
  }

  // Internal helper to generate a function to obtain property `key` from `obj`.
  function shallowProperty(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  }

  // Internal helper to obtain the `byteLength` property of an object.
  var getByteLength = shallowProperty('byteLength');

  // Internal helper to determine whether we should spend extensive checks against
  // `ArrayBuffer` et al.
  var isBufferLike = createSizePropertyCheck(getByteLength);

  // Is a given value a typed array?
  var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
  function isTypedArray(obj) {
    // `ArrayBuffer.isView` is the most future-proof, so use it when available.
    // Otherwise, fall back on the above regular expression.
    return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :
                  isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));
  }

  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);

  // Internal helper to obtain the `length` property of an object.
  var getLength = shallowProperty('length');

  // Internal helper to create a simple lookup structure.
  // `collectNonEnumProps` used to depend on `_.contains`, but this led to
  // circular imports. `emulatedSet` is a one-off solution that only works for
  // arrays of strings.
  function emulatedSet(keys) {
    var hash = {};
    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;
    return {
      contains: function(key) { return hash[key] === true; },
      push: function(key) {
        hash[key] = true;
        return keys.push(key);
      }
    };
  }

  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't
  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if
  // needed.
  function collectNonEnumProps(obj, keys) {
    keys = emulatedSet(keys);
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  function keys(obj) {
    if (!isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has$1(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  function isEmpty(obj) {
    if (obj == null) return true;
    // Skip the more expensive `toString`-based type checks if `obj` has no
    // `.length`.
    var length = getLength(obj);
    if (typeof length == 'number' && (
      isArray(obj) || isString(obj) || isArguments$1(obj)
    )) return length === 0;
    return getLength(keys(obj)) === 0;
  }

  // Returns whether an object has a given set of `key:value` pairs.
  function isMatch(object, attrs) {
    var _keys = keys(attrs), length = _keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = _keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  }

  // If Underscore is called as a function, it returns a wrapped object that can
  // be used OO-style. This wrapper holds altered versions of all functions added
  // through `_.mixin`. Wrapped objects may be chained.
  function _$1(obj) {
    if (obj instanceof _$1) return obj;
    if (!(this instanceof _$1)) return new _$1(obj);
    this._wrapped = obj;
  }

  _$1.VERSION = VERSION;

  // Extracts the result from a wrapped and chained object.
  _$1.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxies for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;

  _$1.prototype.toString = function() {
    return String(this._wrapped);
  };

  // Internal function to wrap or shallow-copy an ArrayBuffer,
  // typed array or DataView to a new view, reusing the buffer.
  function toBufferView(bufferSource) {
    return new Uint8Array(
      bufferSource.buffer || bufferSource,
      bufferSource.byteOffset || 0,
      getByteLength(bufferSource)
    );
  }

  // We use this string twice, so give it a name for minification.
  var tagDataView = '[object DataView]';

  // Internal recursive comparison function for `_.isEqual`.
  function eq(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  }

  // Internal recursive comparison function for `_.isEqual`.
  function deepEq(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _$1) a = a._wrapped;
    if (b instanceof _$1) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    // Work around a bug in IE 10 - Edge 13.
    if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {
      if (!isDataView$1(b)) return false;
      className = tagDataView;
    }
    switch (className) {
      // These types are compared by value.
      case '[object RegExp]':
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
      case '[object ArrayBuffer]':
      case tagDataView:
        // Coerce to typed array so we can fall through.
        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays && isTypedArray$1(a)) {
        var byteLength = getByteLength(a);
        if (byteLength !== getByteLength(b)) return false;
        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
        areArrays = true;
    }
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&
                               isFunction$1(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var _keys = keys(a), key;
      length = _keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = _keys[length];
        if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  }

  // Perform a deep comparison to check if two objects are equal.
  function isEqual(a, b) {
    return eq(a, b);
  }

  // Retrieve all the enumerable property names of an object.
  function allKeys(obj) {
    if (!isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }

  // Since the regular `Object.prototype.toString` type tests don't work for
  // some types in IE 11, we use a fingerprinting heuristic instead, based
  // on the methods. It's not great, but it's the best we got.
  // The fingerprint method lists are defined below.
  function ie11fingerprint(methods) {
    var length = getLength(methods);
    return function(obj) {
      if (obj == null) return false;
      // `Map`, `WeakMap` and `Set` have no enumerable keys.
      var keys = allKeys(obj);
      if (getLength(keys)) return false;
      for (var i = 0; i < length; i++) {
        if (!isFunction$1(obj[methods[i]])) return false;
      }
      // If we are testing against `WeakMap`, we need to ensure that
      // `obj` doesn't have a `forEach` method in order to distinguish
      // it from a regular `Map`.
      return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);
    };
  }

  // In the interest of compact minification, we write
  // each string in the fingerprints only once.
  var forEachName = 'forEach',
      hasName = 'has',
      commonInit = ['clear', 'delete'],
      mapTail = ['get', hasName, 'set'];

  // `Map`, `WeakMap` and `Set` each have slightly different
  // combinations of the above sublists.
  var mapMethods = commonInit.concat(forEachName, mapTail),
      weakMapMethods = commonInit.concat(mapTail),
      setMethods = ['add'].concat(commonInit, forEachName, hasName);

  var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');

  var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');

  var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');

  var isWeakSet = tagTester('WeakSet');

  // Retrieve the values of an object's properties.
  function values(obj) {
    var _keys = keys(obj);
    var length = _keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[_keys[i]];
    }
    return values;
  }

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of `_.object` with one argument.
  function pairs(obj) {
    var _keys = keys(obj);
    var length = _keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [_keys[i], obj[_keys[i]]];
    }
    return pairs;
  }

  // Invert the keys and values of an object. The values must be serializable.
  function invert(obj) {
    var result = {};
    var _keys = keys(obj);
    for (var i = 0, length = _keys.length; i < length; i++) {
      result[obj[_keys[i]]] = _keys[i];
    }
    return result;
  }

  // Return a sorted list of the function names available on the object.
  function functions(obj) {
    var names = [];
    for (var key in obj) {
      if (isFunction$1(obj[key])) names.push(key);
    }
    return names.sort();
  }

  // An internal function for creating assigner functions.
  function createAssigner(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  }

  // Extend a given object with all the properties in passed-in object(s).
  var extend = createAssigner(allKeys);

  // Assigns a given object with all the own properties in the passed-in
  // object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  var extendOwn = createAssigner(keys);

  // Fill in a given object with default properties.
  var defaults = createAssigner(allKeys, true);

  // Create a naked function reference for surrogate-prototype-swapping.
  function ctor() {
    return function(){};
  }

  // An internal function for creating a new object that inherits from another.
  function baseCreate(prototype) {
    if (!isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    var Ctor = ctor();
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  }

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  function create(prototype, props) {
    var result = baseCreate(prototype);
    if (props) extendOwn(result, props);
    return result;
  }

  // Create a (shallow-cloned) duplicate of an object.
  function clone(obj) {
    if (!isObject(obj)) return obj;
    return isArray(obj) ? obj.slice() : extend({}, obj);
  }

  // Invokes `interceptor` with the `obj` and then returns `obj`.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  function tap(obj, interceptor) {
    interceptor(obj);
    return obj;
  }

  // Normalize a (deep) property `path` to array.
  // Like `_.iteratee`, this function can be customized.
  function toPath$1(path) {
    return isArray(path) ? path : [path];
  }
  _$1.toPath = toPath$1;

  // Internal wrapper for `_.toPath` to enable minification.
  // Similar to `cb` for `_.iteratee`.
  function toPath(path) {
    return _$1.toPath(path);
  }

  // Internal function to obtain a nested property in `obj` along `path`.
  function deepGet(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  }

  // Get the value of the (deep) property on `path` from `object`.
  // If any property in `path` does not exist or if the value is
  // `undefined`, return `defaultValue` instead.
  // The `path` is normalized through `_.toPath`.
  function get(object, path, defaultValue) {
    var value = deepGet(object, toPath(path));
    return isUndefined(value) ? defaultValue : value;
  }

  // Shortcut function for checking if an object has a given property directly on
  // itself (in other words, not on a prototype). Unlike the internal `has`
  // function, this public version can also traverse nested properties.
  function has(obj, path) {
    path = toPath(path);
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (!has$1(obj, key)) return false;
      obj = obj[key];
    }
    return !!length;
  }

  // Keep the identity function around for default iteratees.
  function identity(value) {
    return value;
  }

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  function matcher(attrs) {
    attrs = extendOwn({}, attrs);
    return function(obj) {
      return isMatch(obj, attrs);
    };
  }

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indices.
  function property(path) {
    path = toPath(path);
    return function(obj) {
      return deepGet(obj, path);
    };
  }

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  function optimizeCb(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  }

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `_.identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  function baseIteratee(value, context, argCount) {
    if (value == null) return identity;
    if (isFunction$1(value)) return optimizeCb(value, context, argCount);
    if (isObject(value) && !isArray(value)) return matcher(value);
    return property(value);
  }

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only `argCount` argument.
  function iteratee(value, context) {
    return baseIteratee(value, context, Infinity);
  }
  _$1.iteratee = iteratee;

  // The function we call internally to generate a callback. It invokes
  // `_.iteratee` if overridden, otherwise `baseIteratee`.
  function cb(value, context, argCount) {
    if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);
    return baseIteratee(value, context, argCount);
  }

  // Returns the results of applying the `iteratee` to each element of `obj`.
  // In contrast to `_.map` it returns an object.
  function mapObject(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var _keys = keys(obj),
        length = _keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = _keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  }

  // Predicate-generating function. Often useful outside of Underscore.
  function noop(){}

  // Generates a function for a given object that returns a given property.
  function propertyOf(obj) {
    if (obj == null) return noop;
    return function(path) {
      return get(obj, path);
    };
  }

  // Run a function **n** times.
  function times(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  }

  // Return a random integer between `min` and `max` (inclusive).
  function random(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  }

  // A (possibly faster) way to get the current timestamp as an integer.
  var now = Date.now || function() {
    return new Date().getTime();
  };

  // Internal helper to generate functions for escaping and unescaping strings
  // to/from HTML interpolation.
  function createEscaper(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  }

  // Internal list of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };

  // Function for escaping strings to HTML interpolation.
  var _escape = createEscaper(escapeMap);

  // Internal list of HTML entities for unescaping.
  var unescapeMap = invert(escapeMap);

  // Function for unescaping strings from HTML interpolation.
  var _unescape = createEscaper(unescapeMap);

  // By default, Underscore uses ERB-style template delimiters. Change the
  // following template settings to use alternative delimiters.
  var templateSettings = _$1.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `_.templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  function escapeChar(match) {
    return '\\' + escapes[match];
  }

  // In order to prevent third-party code injection through
  // `_.templateSettings.variable`, we test it against the following regular
  // expression. It is intentionally a bit more liberal than just matching valid
  // identifiers, but still prevents possible loopholes through defaults or
  // destructuring assignment.
  var bareIdentifier = /^\s*(\w|\$)+\s*$/;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  function template(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = defaults({}, settings, _$1.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    var argument = settings.variable;
    if (argument) {
      // Insure against third-party code injection. (CVE-2021-23358)
      if (!bareIdentifier.test(argument)) throw new Error(
        'variable is not a bare identifier: ' + argument
      );
    } else {
      // If a variable is not specified, place data values in local scope.
      source = 'with(obj||{}){\n' + source + '}\n';
      argument = 'obj';
    }

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(argument, '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _$1);
    };

    // Provide the compiled source as a convenience for precompilation.
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  }

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  function result(obj, path, fallback) {
    path = toPath(path);
    var length = path.length;
    if (!length) {
      return isFunction$1(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = isFunction$1(prop) ? prop.call(obj) : prop;
    }
    return obj;
  }

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  function uniqueId(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  }

  // Start chaining a wrapped Underscore object.
  function chain(obj) {
    var instance = _$1(obj);
    instance._chain = true;
    return instance;
  }

  // Internal function to execute `sourceFunc` bound to `context` with optional
  // `args`. Determines whether to execute a function as a constructor or as a
  // normal function.
  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (isObject(result)) return result;
    return self;
  }

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. `_` acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  var partial = restArguments(function(func, boundArgs) {
    var placeholder = partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  partial.placeholder = _$1;

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally).
  var bind = restArguments(function(func, context, args) {
    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Internal helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var isArrayLike = createSizePropertyCheck(getLength);

  // Internal implementation of a recursive `flatten` function.
  function flatten$1(input, depth, strict, output) {
    output = output || [];
    if (!depth && depth !== 0) {
      depth = Infinity;
    } else if (depth <= 0) {
      return output.concat(input);
    }
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
        // Flatten current level of array or arguments object.
        if (depth > 1) {
          flatten$1(value, depth - 1, strict, output);
          idx = output.length;
        } else {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  }

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  var bindAll = restArguments(function(obj, keys) {
    keys = flatten$1(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = bind(obj[key], obj);
    }
    return obj;
  });

  // Memoize an expensive function by storing its results.
  function memoize(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  }

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  var delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  var defer = partial(delay, _$1, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  function throttle(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var _now = now();
      if (!previous && options.leading === false) previous = _now;
      var remaining = wait - (_now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = _now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  }

  // When a sequence of calls of the returned function ends, the argument
  // function is triggered. The end of a sequence is defined by the `wait`
  // parameter. If `immediate` is passed, the argument function will be
  // triggered at the beginning of the sequence instead of at the end.
  function debounce(func, wait, immediate) {
    var timeout, previous, args, result, context;

    var later = function() {
      var passed = now() - previous;
      if (wait > passed) {
        timeout = setTimeout(later, wait - passed);
      } else {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
        // This check is needed because `func` can recursively invoke `debounced`.
        if (!timeout) args = context = null;
      }
    };

    var debounced = restArguments(function(_args) {
      context = this;
      args = _args;
      previous = now();
      if (!timeout) {
        timeout = setTimeout(later, wait);
        if (immediate) result = func.apply(context, args);
      }
      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = args = context = null;
    };

    return debounced;
  }

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  function wrap(func, wrapper) {
    return partial(wrapper, func);
  }

  // Returns a negated version of the passed-in predicate.
  function negate(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  }

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  function compose() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  }

  // Returns a function that will only be executed on and after the Nth call.
  function after(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  }

  // Returns a function that will only be executed up to (but not including) the
  // Nth call.
  function before(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  }

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  var once = partial(before, 2);

  // Returns the first key on an object that passes a truth test.
  function findKey(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = keys(obj), key;
    for (var i = 0, length = _keys.length; i < length; i++) {
      key = _keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  }

  // Internal function to generate `_.findIndex` and `_.findLastIndex`.
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a truth test.
  var findIndex = createPredicateIndexFinder(1);

  // Returns the last index on an array-like that passes a truth test.
  var findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  function sortedIndex(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  }

  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), isNaN$1);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  var indexOf = createIndexFinder(1, findIndex, sortedIndex);

  // Return the position of the last occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  var lastIndexOf = createIndexFinder(-1, findLastIndex);

  // Return the first value which passes a truth test.
  function find(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? findIndex : findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  }

  // Convenience version of a common use case of `_.find`: getting the first
  // object containing specific `key:value` pairs.
  function findWhere(obj, attrs) {
    return find(obj, matcher(attrs));
  }

  // The cornerstone for collection functions, an `each`
  // implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  function each(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var _keys = keys(obj);
      for (i = 0, length = _keys.length; i < length; i++) {
        iteratee(obj[_keys[i]], _keys[i], obj);
      }
    }
    return obj;
  }

  // Return the results of applying the iteratee to each element.
  function map(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  }

  // Internal helper to create a reducing function, iterating left or right.
  function createReduce(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var _keys = !isArrayLike(obj) && keys(obj),
          length = (_keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[_keys ? _keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = _keys ? _keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  var reduce = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  var reduceRight = createReduce(-1);

  // Return all the elements that pass a truth test.
  function filter(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  }

  // Return all the elements for which a truth test fails.
  function reject(obj, predicate, context) {
    return filter(obj, negate(cb(predicate)), context);
  }

  // Determine whether all of the elements pass a truth test.
  function every(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  }

  // Determine if at least one element in the object passes a truth test.
  function some(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  }

  // Determine if the array or object contains a given item (using `===`).
  function contains(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return indexOf(obj, item, fromIndex) >= 0;
  }

  // Invoke a method (with arguments) on every item in a collection.
  var invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (isFunction$1(path)) {
      func = path;
    } else {
      path = toPath(path);
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `_.map`: fetching a property.
  function pluck(obj, key) {
    return map(obj, property(key));
  }

  // Convenience version of a common use case of `_.filter`: selecting only
  // objects containing specific `key:value` pairs.
  function where(obj, attrs) {
    return filter(obj, matcher(attrs));
  }

  // Return the maximum element (or element-based computation).
  function max(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
      obj = isArrayLike(obj) ? obj : values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  }

  // Return the minimum element (or element-based computation).
  function min(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
      obj = isArrayLike(obj) ? obj : values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || (computed === Infinity && result === Infinity)) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  }

  // Safely create a real, live array from anything iterable.
  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  function toArray(obj) {
    if (!obj) return [];
    if (isArray(obj)) return slice.call(obj);
    if (isString(obj)) {
      // Keep surrogate pair characters together.
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return map(obj, identity);
    return values(obj);
  }

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `_.map`.
  function sample(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = values(obj);
      return obj[random(obj.length - 1)];
    }
    var sample = toArray(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  }

  // Shuffle a collection.
  function shuffle(obj) {
    return sample(obj, Infinity);
  }

  // Sort the object's values by a criterion produced by an iteratee.
  function sortBy(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return pluck(map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  }

  // An internal function used for aggregate "group by" operations.
  function group(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  }

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  var groupBy = group(function(result, value, key) {
    if (has$1(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for
  // when you know that your index values will be unique.
  var indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  var countBy = group(function(result, value, key) {
    if (has$1(result, key)) result[key]++; else result[key] = 1;
  });

  // Split a collection into two arrays: one whose elements all pass the given
  // truth test, and one whose elements all do not pass the truth test.
  var partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Return the number of elements in a collection.
  function size(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : keys(obj).length;
  }

  // Internal `_.pick` helper function to determine whether `key` is an enumerable
  // property name of `obj`.
  function keyInObj(value, key, obj) {
    return key in obj;
  }

  // Return a copy of the object only containing the allowed properties.
  var pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (isFunction$1(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten$1(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the disallowed properties.
  var omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (isFunction$1(iteratee)) {
      iteratee = negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = map(flatten$1(keys, false, false), String);
      iteratee = function(value, key) {
        return !contains(keys, key);
      };
    }
    return pick(obj, iteratee, context);
  });

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  function initial(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  }

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. The **guard** check allows it to work with `_.map`.
  function first(array, n, guard) {
    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
    if (n == null || guard) return array[0];
    return initial(array, array.length - n);
  }

  // Returns everything but the first entry of the `array`. Especially useful on
  // the `arguments` object. Passing an **n** will return the rest N values in the
  // `array`.
  function rest(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  }

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  function last(array, n, guard) {
    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return rest(array, Math.max(0, array.length - n));
  }

  // Trim out all falsy values from an array.
  function compact(array) {
    return filter(array, Boolean);
  }

  // Flatten out an array, either recursively (by default), or up to `depth`.
  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.
  function flatten(array, depth) {
    return flatten$1(array, depth, false);
  }

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  var difference = restArguments(function(array, rest) {
    rest = flatten$1(rest, true, true);
    return filter(array, function(value){
      return !contains(rest, value);
    });
  });

  // Return a version of the array that does not contain the specified value(s).
  var without = restArguments(function(array, otherArrays) {
    return difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  function uniq(array, isSorted, iteratee, context) {
    if (!isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  }

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  var union = restArguments(function(arrays) {
    return uniq(flatten$1(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  function intersection(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  }

  // Complement of zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  function unzip(array) {
    var length = (array && max(array, getLength).length) || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = pluck(array, index);
    }
    return result;
  }

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  var zip = restArguments(unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.
  function object(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  }

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](https://docs.python.org/library/functions.html#range).
  function range(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  }

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  function chunk(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  }

  // Helper function to continue chaining intermediate results.
  function chainResult(instance, obj) {
    return instance._chain ? _$1(obj).chain() : obj;
  }

  // Add your own custom functions to the Underscore object.
  function mixin(obj) {
    each(functions(obj), function(name) {
      var func = _$1[name] = obj[name];
      _$1.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_$1, args));
      };
    });
    return _$1;
  }

  // Add all mutator `Array` functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _$1.prototype[name] = function() {
      var obj = this._wrapped;
      if (obj != null) {
        method.apply(obj, arguments);
        if ((name === 'shift' || name === 'splice') && obj.length === 0) {
          delete obj[0];
        }
      }
      return chainResult(this, obj);
    };
  });

  // Add all accessor `Array` functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _$1.prototype[name] = function() {
      var obj = this._wrapped;
      if (obj != null) obj = method.apply(obj, arguments);
      return chainResult(this, obj);
    };
  });

  // Named Exports

  var allExports = {
    __proto__: null,
    VERSION: VERSION,
    restArguments: restArguments,
    isObject: isObject,
    isNull: isNull,
    isUndefined: isUndefined,
    isBoolean: isBoolean,
    isElement: isElement,
    isString: isString,
    isNumber: isNumber,
    isDate: isDate,
    isRegExp: isRegExp,
    isError: isError,
    isSymbol: isSymbol,
    isArrayBuffer: isArrayBuffer,
    isDataView: isDataView$1,
    isArray: isArray,
    isFunction: isFunction$1,
    isArguments: isArguments$1,
    isFinite: isFinite$1,
    isNaN: isNaN$1,
    isTypedArray: isTypedArray$1,
    isEmpty: isEmpty,
    isMatch: isMatch,
    isEqual: isEqual,
    isMap: isMap,
    isWeakMap: isWeakMap,
    isSet: isSet,
    isWeakSet: isWeakSet,
    keys: keys,
    allKeys: allKeys,
    values: values,
    pairs: pairs,
    invert: invert,
    functions: functions,
    methods: functions,
    extend: extend,
    extendOwn: extendOwn,
    assign: extendOwn,
    defaults: defaults,
    create: create,
    clone: clone,
    tap: tap,
    get: get,
    has: has,
    mapObject: mapObject,
    identity: identity,
    constant: constant,
    noop: noop,
    toPath: toPath$1,
    property: property,
    propertyOf: propertyOf,
    matcher: matcher,
    matches: matcher,
    times: times,
    random: random,
    now: now,
    escape: _escape,
    unescape: _unescape,
    templateSettings: templateSettings,
    template: template,
    result: result,
    uniqueId: uniqueId,
    chain: chain,
    iteratee: iteratee,
    partial: partial,
    bind: bind,
    bindAll: bindAll,
    memoize: memoize,
    delay: delay,
    defer: defer,
    throttle: throttle,
    debounce: debounce,
    wrap: wrap,
    negate: negate,
    compose: compose,
    after: after,
    before: before,
    once: once,
    findKey: findKey,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    sortedIndex: sortedIndex,
    indexOf: indexOf,
    lastIndexOf: lastIndexOf,
    find: find,
    detect: find,
    findWhere: findWhere,
    each: each,
    forEach: each,
    map: map,
    collect: map,
    reduce: reduce,
    foldl: reduce,
    inject: reduce,
    reduceRight: reduceRight,
    foldr: reduceRight,
    filter: filter,
    select: filter,
    reject: reject,
    every: every,
    all: every,
    some: some,
    any: some,
    contains: contains,
    includes: contains,
    include: contains,
    invoke: invoke,
    pluck: pluck,
    where: where,
    max: max,
    min: min,
    shuffle: shuffle,
    sample: sample,
    sortBy: sortBy,
    groupBy: groupBy,
    indexBy: indexBy,
    countBy: countBy,
    partition: partition,
    toArray: toArray,
    size: size,
    pick: pick,
    omit: omit,
    first: first,
    head: first,
    take: first,
    initial: initial,
    last: last,
    rest: rest,
    tail: rest,
    drop: rest,
    compact: compact,
    flatten: flatten,
    without: without,
    uniq: uniq,
    unique: uniq,
    union: union,
    intersection: intersection,
    difference: difference,
    unzip: unzip,
    transpose: unzip,
    zip: zip,
    object: object,
    range: range,
    chunk: chunk,
    mixin: mixin,
    'default': _$1
  };

  // Default Export

  // Add all of the Underscore functions to the wrapper object.
  var _ = mixin(allExports);
  // Legacy Node.js API.
  _._ = _;

  return _;

})));
//# sourceMappingURL=underscore-umd.js.map


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__("./node_modules/@jacada-jbot/web/include/Utils/JQueryExtensions.js");
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./node_modules/core-js/stable/promise/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./out/CoverageHandlers/SuiteCRMCoverageHandlerCreator.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,