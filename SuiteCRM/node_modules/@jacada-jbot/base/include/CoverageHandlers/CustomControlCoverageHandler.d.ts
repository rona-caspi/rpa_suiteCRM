import { ListeningReporter, RecordingStepReporter } from "../Model/CustomSupportTypes";
import EventDetails from "../Model/EventDetails";
import LogicalAction from "../Model/LogicalAction";
import { BaseCustomControlCoverageHandler } from "./BaseCustomControlCoverageHandler";
export declare abstract class CustomControlCoverageHandler extends BaseCustomControlCoverageHandler {
    node: unknown;
    abstract readonly type: string;
    constructor(node: unknown, recordingStepReporter: RecordingStepReporter, listeningReporter: ListeningReporter);
    /**
     * This method indicates if the element is recordable.
     * @returns default value is true.
     */
    isRecordable(): boolean;
    /**
     * This method indicates whether we need to record on the controls' children.
     * @returns default value is false.
     */
    areChildrenRecordable(): boolean;
    /**
     * This method inserts the control to recording mode.
     * @remark Need to be inherited by specific element type and execute the relevant start recording
     * @returns
     */
    abstract startRecording(): boolean;
    /**
     * Register an event during recording process that will update JBot once event was fired with callback result
     * @param eventName The name of the event to subscribe
     * @param callback function that will be called whenever the specified event is delivered to the target
     */
    protected abstract recordEvent(eventName: string, callback: (event: unknown) => LogicalAction): void;
    /**
     * This method indicates whether we need to capture on the controls' children.
     * @returns default value is false.
     */
    areChildrenCapturable(): boolean;
    /**
     * This method indicates if the element is listenable.
     * @returns default value is true.
     */
    isListenable(): boolean;
    /**
     * Register an event during listening process that will update JBot once event was fired with callback result
     * @param eventName The name of the event to subscribe
     * @param callback function that will be called whenever the specified event is delivered to the target
     */
    protected abstract listenToEvent(eventName: string, callback: (event: unknown) => EventDetails): void;
}
