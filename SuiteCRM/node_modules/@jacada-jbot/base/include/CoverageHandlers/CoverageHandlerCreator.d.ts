import CoverageHandlerFactory from "./CoverageHandlerFactory";
import RepositoryHandler from "../Model/RepositoryHandler";
import PlatformDriver from "../PlatformDrivers/PlatformDriver";
import ApplicationCoverageHandler from "./ApplicationCoverageHandler";
/**
 * Collection of functions which are kept as their name in order to provide the Coverage Handler API to be called from JBot JS Engine.
 * We keep all the objects we create in temporary variables starting with __ .
 */
/**
 * This method sets the coverageHandler factory.
 * @param factory - the coverageHandlerFactory to set
 */
export declare function setCoverageHandlerFactory(factory: CoverageHandlerFactory): void;
/**
 * This method gets the coverageHandlerFactory.
 * @returns CoverageHandlerFactory
 */
export declare function getCoverageHandlerFactory(): CoverageHandlerFactory;
/**
 * This method gets the repositoryHandler.
 * @returns RepositoryHandler
 */
export declare function getRepositoryHandler(): RepositoryHandler;
/**
 * This method gets the platformDriver.
 * @returns PlatformDriver
 */
export declare function getPlatformDriver(): PlatformDriver;
/**
 * This method gets the applicationCoverageHandler
 */
export declare function getApplicationCoverageHandler(): ApplicationCoverageHandler;
/**
 * This method set logger for coverage handler.
 * @param logger
 * @param applicationName
 * @returns
 */
export declare function setLogger(logger: any, applicationName: string): boolean;
/**
 * This method creates a platformDriver.
 * @param platformDriverObj
 * @returns true if it succeeded
 */
export declare function createPlatformDriver(platformDriverObj: any): Boolean;
/**
 * This method creates the repositoryHandler
 * @param repositoryTreeJSON - a JSON representing the repository tree
 * @returns true if it succeeded
 */
export declare function createRepositoryHandler(repositoryTreeJSON: string): Boolean;
/**
 * This method creates an application data
 * @param applicationData
 * @returns true if it succeeded
 */
export declare function createApplicationData(applicationData: any): Boolean;
/**
 * This method creates the applicationCoverageHandler
 * @returns true if it succeeded
 */
export declare function createApplicationCoverageHandler(): Boolean;
