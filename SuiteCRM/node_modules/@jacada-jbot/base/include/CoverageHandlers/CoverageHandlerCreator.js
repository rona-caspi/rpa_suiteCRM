"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createApplicationCoverageHandler = exports.createApplicationData = exports.createRepositoryHandler = exports.createPlatformDriver = exports.setLogger = exports.getApplicationCoverageHandler = exports.getPlatformDriver = exports.getRepositoryHandler = exports.getCoverageHandlerFactory = exports.setCoverageHandlerFactory = void 0;
var ApplicationData_1 = require("../Model/ApplicationData");
var Log4jConfig_1 = require("../Utils/Log4jConfig");
var __jbotCoverageHandlerFactory;
var __jbotRepositoryHandlerObj;
var __jbotPlatformDriverObj;
var __jbotApplicationDataObj;
var __jbotApplicationCoverageHandlerObj;
var log = Log4jConfig_1.logFactory.getLogger("CoverageHandlerCreator");
/**
 * Collection of functions which are kept as their name in order to provide the Coverage Handler API to be called from JBot JS Engine.
 * We keep all the objects we create in temporary variables starting with __ .
 */
/**
 * This method sets the coverageHandler factory.
 * @param factory - the coverageHandlerFactory to set
 */
function setCoverageHandlerFactory(factory) {
    __jbotCoverageHandlerFactory = factory;
}
exports.setCoverageHandlerFactory = setCoverageHandlerFactory;
/**
 * This method gets the coverageHandlerFactory.
 * @returns CoverageHandlerFactory
 */
function getCoverageHandlerFactory() {
    return __jbotCoverageHandlerFactory;
}
exports.getCoverageHandlerFactory = getCoverageHandlerFactory;
/**
 * This method gets the repositoryHandler.
 * @returns RepositoryHandler
 */
function getRepositoryHandler() {
    return __jbotRepositoryHandlerObj;
}
exports.getRepositoryHandler = getRepositoryHandler;
/**
 * This method gets the platformDriver.
 * @returns PlatformDriver
 */
function getPlatformDriver() {
    return __jbotPlatformDriverObj;
}
exports.getPlatformDriver = getPlatformDriver;
/**
 * This method gets the applicationCoverageHandler
 */
function getApplicationCoverageHandler() {
    return __jbotApplicationCoverageHandlerObj;
}
exports.getApplicationCoverageHandler = getApplicationCoverageHandler;
/**
 * This method set logger for coverage handler.
 * @param logger
 * @param applicationName
 * @returns
 */
function setLogger(logger, applicationName) {
    var __logger = logger;
    Log4jConfig_1.CustomLogger.ourLogger = __logger; // Setting the logger to use the JBot logger
    Log4jConfig_1.CustomLogger.setApplicationName(applicationName);
    log.trace('In setLogger');
    try {
        Log4jConfig_1.CustomLogger.setLogLevel(logger.logLevel);
    }
    catch (error) {
        __logger.trace('typescript-logging write to console.log when we change log level but console does not exists in windows');
    }
    log.trace("Set log level to:" + logger.logLevel);
    return true;
}
exports.setLogger = setLogger;
/**
 * This method creates a platformDriver.
 * @param platformDriverObj
 * @returns true if it succeeded
 */
function createPlatformDriver(platformDriverObj) {
    __jbotPlatformDriverObj = __jbotCoverageHandlerFactory.createPlatformDriverOfObject(platformDriverObj);
    return __jbotPlatformDriverObj !== null;
}
exports.createPlatformDriver = createPlatformDriver;
/**
 * This method creates the repositoryHandler
 * @param repositoryTreeJSON - a JSON representing the repository tree
 * @returns true if it succeeded
 */
function createRepositoryHandler(repositoryTreeJSON) {
    var repositoryTree = JSON.parse(repositoryTreeJSON);
    if (!__jbotCoverageHandlerFactory)
        log.error("createRepositoryHandler Coverage Handler factory is null");
    __jbotRepositoryHandlerObj = __jbotCoverageHandlerFactory.createRepositoryHandler(repositoryTree);
    return __jbotRepositoryHandlerObj !== null;
}
exports.createRepositoryHandler = createRepositoryHandler;
/**
 * This method creates an application data
 * @param applicationData
 * @returns true if it succeeded
 */
function createApplicationData(applicationData) {
    var appDataObj = JSON.parse(applicationData);
    __jbotApplicationDataObj = new ApplicationData_1.default({}, appDataObj);
    return __jbotApplicationDataObj !== null;
}
exports.createApplicationData = createApplicationData;
/**
 * This method creates the applicationCoverageHandler
 * @returns true if it succeeded
 */
function createApplicationCoverageHandler() {
    __jbotApplicationCoverageHandlerObj = __jbotCoverageHandlerFactory.createApplicationCoverageHandler(__jbotPlatformDriverObj, __jbotRepositoryHandlerObj, __jbotApplicationDataObj, null, __jbotCoverageHandlerFactory);
    return __jbotApplicationCoverageHandlerObj !== null;
}
exports.createApplicationCoverageHandler = createApplicationCoverageHandler;
//# sourceMappingURL=CoverageHandlerCreator.js.map