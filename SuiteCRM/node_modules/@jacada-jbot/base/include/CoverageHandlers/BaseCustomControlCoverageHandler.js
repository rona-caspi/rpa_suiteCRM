"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCustomControlCoverageHandler = void 0;
var BaseCustomControlCoverageHandler = /** @class */ (function () {
    function BaseCustomControlCoverageHandler(node, recordingStepReporter, listeningReporter) {
        if (recordingStepReporter === void 0) { recordingStepReporter = null; }
        if (listeningReporter === void 0) { listeningReporter = null; }
    }
    /**
     * This method determines if a node matches the coverage handler.
     * @static
     * @param {*} node - the node to check
     * @return {*}  {boolean} - default is false
     * @memberof CustomControlCoverageHandler
     */
    BaseCustomControlCoverageHandler.isMatch = function (node) {
        return false;
    };
    /**
     * This method indicates if the element is capturable.
     * @returns default value is true.
     */
    BaseCustomControlCoverageHandler.prototype.isCapturable = function () {
        return true;
    };
    /**
     *  This method updates elementNode with the specific values in order to identify the element correctly
     * @param elementNode the element node to update
     */
    BaseCustomControlCoverageHandler.prototype.updateElementRepositoryNode = function (elementNode) { };
    Object.defineProperty(BaseCustomControlCoverageHandler.prototype, "isNodeToBeAddedToRepository", {
        /**
         * This property indicates whether we need to add this node the repository or not.
         * @returns Default value is true.
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    return BaseCustomControlCoverageHandler;
}());
exports.BaseCustomControlCoverageHandler = BaseCustomControlCoverageHandler;
//# sourceMappingURL=BaseCustomControlCoverageHandler.js.map