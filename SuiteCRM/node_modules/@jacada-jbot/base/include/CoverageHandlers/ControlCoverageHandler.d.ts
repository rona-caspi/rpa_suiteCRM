import CoverageHandler from "./CoverageHandler";
import Rect from "../Model/Rect";
import RepositoryHandler from "../Model/RepositoryHandler";
import { GenericResult } from "../Model/GenericResult";
import ElementPath from "../Model/ElementPath";
import ExecutionLogicalAction from "../Model/ExecutionLogicalAction";
import { BaseCustomControlCoverageHandler } from "./BaseCustomControlCoverageHandler";
export default class ControlCoverageHandler extends CoverageHandler {
    static ELEMENT_HIGHLIGHT_COLOR: string;
    static ELEMENT_SNAPSHOT_COLOR: string;
    static ELEMENT_NOT_FOUND: string;
    static CONFIG_BIND_NOT_FOUND: string;
    customCoverageHandler: BaseCustomControlCoverageHandler;
    /**
     * This method gets the bounding rectangle of the element.
     * @returns a rectangle that bounds the element
     */
    boundingRectangle(): Rect;
    /**
     * Perform the access to the element
     * @remark needs to be inherited
     * @returns a GenericResult struct with data that holds the element that was found
     */
    protected executeAccessNodeWithSelector(previousResult: any): GenericResult;
    /**
     * This method starts the process of recording for this element.
     * @returns a GenericResult struct
     */
    performStartRecording(): GenericResult;
    /**
     * This method performs the start recording process on the node it gets.
     * @param node - the element to perform start recording on
     * @returns true, if the process of start recording for this element succeeded, and false otherwise.
     */
    performStartRecordingOnNode(node: any): boolean;
    /**
     * This method performs the start capturing process on the node it gets.
     * @param node - the node to start capturing on
     * @returns false.
     */
    performStartCapturingOnNode(node: any): boolean;
    /**
     * This method inserts the control to capture mode.
     * @remark Need to be inherited by specific element type and execute the relevant start capturing
     * @returns default value is true.
     */
    executeStartCapturingOnNode(): boolean;
    /**
     *
     * @param elementDomNode
     * @returns the created selector
     */
    protected createRepositoryNodeSelector(elementDomNode: any): string;
    /**
     * This method concatenates selector.
     * @param anchorSelector
     * @param partialSelector
     * @returns
     */
    protected concatenateSelectorParts(anchorSelector: string, partialSelector: string): string;
    /**
     * This method creates a selector command that finds the element node on parent element.
     * @param parentNode
     * @param elementNode
     * @returns the created selector
     */
    createSelectorFromParentToChild(parentNode: any, elementNode: any): string;
    /**
     * This method adds our child repository node to our repository.
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns the unified repositoryHandler
     */
    addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode: any, childCoverageHandler: ControlCoverageHandler): RepositoryHandler;
    protected addChildRepositoryNodeToOurselves(childRepositoryNode: any, childCoverageHandler: ControlCoverageHandler): RepositoryHandler;
    /**
     * This method adds the received repository node to the closest parent of the node.
     * @param {*} repositoryNode - the node to add
     * @memberof ControlCoverageHandler
     */
    AddToClosestParentInRepository(repositoryNode: any): any;
    /**
     * This method starts the process of capturing for this element.
     * @returns a GenericResult struct
     */
    performStartCapturing(): GenericResult;
    /**
     * This method generates id for the control.
     * @param controlCoverageHandler
     * @param suffix
     * @returns a string representing the generated id.
     */
    protected generateId(controlCoverageHandler: ControlCoverageHandler, suffix: string): string;
    /**
     * In case this control has no unique id this method is called to auto generate prefix id.
     * @returns a string representing the generated id prefix
     */
    getAutoGeneratedIdPrefix(): string;
    /**
     * Find a free id in current repository
     * @param name Base name to search id
     * @returns a string representing the id.
     */
    protected findFreeId(name: string): string;
    /**
     * This method executes the action on the given path, in case it is the last element on the path.
     * @param elementPath - contains our current position in the path
     * @param lAction - a struct holding the action name and a value
     * @param validateOnly - indicates whether we just need the element or we need to execute the action
     * @returns a GenericResult struct with the action result inside the data, if there is one.
     */
    execLastNodeOnScreen(elementPath: ElementPath, lAction: ExecutionLogicalAction, validateOnly: boolean): GenericResult;
    protected executingAction(lAction: ExecutionLogicalAction, elementPath: ElementPath): GenericResult;
    /**
     * This method is digging down all the way to the requested element on the elementPath for execution.
     * @param elementPath
     * @param lAction
     * @param validateOnly
     * @returns a  GenericResult struct with the action result inside the data, if there is one.
     */
    protected execNextNodeOnScreen(elementPath: ElementPath, lAction: ExecutionLogicalAction, validateOnly: boolean): GenericResult;
    /**
     * This method is digging down all the way to the requested element on the elementPath for execution.
     * @param elementPath
     * @param lAction
     * @param validateOnly
     * @returns a  GenericResult struct with the action result inside the data, if there is one.
     */
    protected execNextNodeOnScreenAsync(elementPath: ElementPath, lAction: ExecutionLogicalAction, validateOnly: boolean): Promise<GenericResult>;
    /**
     * This method executes asynchronously the action on the given path, in case it is the last element on the path.
     * @param elementPath - contains our current position in the path
     * @param lAction - a struct holding the action name and a value
     * @param validateOnly - indicates whether we just need the element or we need to execute the action
     * @returns a GenericResult struct with the action result inside the data, if there is one.
     */
    execLastNodeOnScreenAsync(elementPath: ElementPath, lAction: ExecutionLogicalAction, validateOnly: boolean): Promise<GenericResult>;
}
