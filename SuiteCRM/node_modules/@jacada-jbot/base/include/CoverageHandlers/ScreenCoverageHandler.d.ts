import "../Model/RepositoryHandler";
import { GenericResult } from "../Model/GenericResult";
import RepositoryHandler from "../Model/RepositoryHandler";
import ControlCoverageHandler from "./ControlCoverageHandler";
import ElementPath from "../Model/ElementPath";
import ExecutionLogicalAction from "../Model/ExecutionLogicalAction";
/**
 * The Coverage Handler in the screen level.
 */
export default class ScreenCoverageHandler extends ControlCoverageHandler {
    uniqueId: string;
    protected type(): string;
    /**
     * This method starts the recording process on screen level.
     * @returns a GenericResult struct
     */
    startRecording(): GenericResult;
    /**
     * This method stops the recording process on screen level.
     * @returns a GenericResult struct
     */
    stopRecording(): GenericResult;
    /**
     * This method starts the capturing process on screen level.
     * @returns a GenericResult
     */
    startCapturing(): GenericResult;
    /**
     * This method stops the capturing process on screen.
     * @returns a GenericResult struct
     */
    stopCapturing(): GenericResult;
    /**
     * This method starts the listening process on screen.
     * @returns a GenericResult struct
     */
    startListening(): GenericResult;
    /**
     * This method stops the listening process on screen.
     * @returns a GenericResult struct
     */
    stopListening(): GenericResult;
    /**
     * This method validates if the screen exist
     * @returns a GenericResult struct
     */
    validateScreen(): GenericResult;
    /**
     * This method creates a repository node for the screen.
     * @returns the element node created.
     */
    createElementRepositoryNode(): any;
    /**
     * This method gets the screen title.
     * @returns the screen title.
     */
    protected screenTitle(): string;
    /**
     * This method adds our child repository node to our repository.
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns the unified repositoryHandler
     */
    addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode: any, childCoverageHandler: ControlCoverageHandler): RepositoryHandler;
    /**
     * Fire page opened event  if path id  is part of listening elements
     */
    pageOpened(): void;
    execLastNodeOnScreen(elementPath: ElementPath, lAction: ExecutionLogicalAction, validateOnly: boolean): GenericResult;
    execLastNodeOnScreenAsync(elementPath: ElementPath, lAction: ExecutionLogicalAction, validateOnly: boolean): Promise<GenericResult>;
}
