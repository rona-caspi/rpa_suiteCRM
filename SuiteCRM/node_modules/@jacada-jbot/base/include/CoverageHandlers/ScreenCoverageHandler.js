"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("../Model/RepositoryHandler");
var GenericResult_1 = require("../Model/GenericResult");
var ControlCoverageHandler_1 = require("./ControlCoverageHandler");
var Log4jConfig_1 = require("../Utils/Log4jConfig");
var Constants_1 = require("../Model/Constants");
var log = Log4jConfig_1.logFactory.getLogger("ScreenCoverageHandler");
/**
 * The Coverage Handler in the screen level.
 */
var ScreenCoverageHandler = /** @class */ (function (_super) {
    __extends(ScreenCoverageHandler, _super);
    function ScreenCoverageHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScreenCoverageHandler.prototype.type = function () {
        return "Screen";
    };
    /**
     * This method starts the recording process on screen level.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.startRecording = function () {
        // Starts a recording process in the platformDriver using the repositorySection
        return this.returnFailure("To be inherited by coverage");
    };
    /**
     * This method stops the recording process on screen level.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.stopRecording = function () {
        // Stops a recording process in the platformDriver using the repositorySection and returns the recordingResult
        return this.returnFailure("TBD");
    };
    /**
     * This method starts the capturing process on screen level.
     * @returns a GenericResult
     */
    ScreenCoverageHandler.prototype.startCapturing = function () {
        // Starts a capturing process in the platformDriver using the repositorySection
        // Executing the actual change to listen mode
        return this.returnFailure("To be inherited by coverage");
    };
    /**
     * This method stops the capturing process on screen.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.stopCapturing = function () {
        this.saveCoverageHandlerForUniqueId(this.uniqueId);
        // Stops a capturing process
        return this.returnFailure("TBD");
    };
    /**
     * This method starts the listening process on screen.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.startListening = function () {
        // Starts a listening process in the platformDriver using the repositorySection
        return this.returnFailure("TBD");
    };
    /**
     * This method stops the listening process on screen.
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.stopListening = function () {
        // Stops a listening process
        return this.returnFailure("TBD");
    };
    /**
     * This method validates if the screen exist
     * @returns a GenericResult struct
     */
    ScreenCoverageHandler.prototype.validateScreen = function () {
        // By default, checking that the unique id is the same
        if (this.uniqueId === this.repositoryHandler.id) {
            return this.returnSuccess("Same screen");
        }
        else {
            log.debug("Different screen: '" + this.uniqueId + "' <> " + this.repositoryHandler.id);
            return new GenericResult_1.GenericResult(false, "Different screen " + this.uniqueId, null);
        }
    };
    /**
     * This method creates a repository node for the screen.
     * @returns the element node created.
     */
    ScreenCoverageHandler.prototype.createElementRepositoryNode = function () {
        var elementNode = _super.prototype.createBasicElementRepositoryNode.call(this);
        elementNode.type = this.type();
        return elementNode;
    };
    /**
     * This method gets the screen title.
     * @returns the screen title.
     */
    ScreenCoverageHandler.prototype.screenTitle = function () {
        log.debug("This method needs to be inherited");
        return "";
    };
    /**
     * This method adds our child repository node to our repository.
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns the unified repositoryHandler
     */
    ScreenCoverageHandler.prototype.addChildRepositoryNodeToOurselvesRecursively = function (childRepositoryNode, childCoverageHandler) {
        log.debug("addChildRepositoryNodeToOurselvesRecursively");
        // Adding a node to coverage handler which is base (like table and body)
        // Make sure we have repository
        this.createRepositoryIfNotExists();
        // Adding this repository to ourselves
        childRepositoryNode = this.addChildRepositoryNodeToParent(childRepositoryNode);
        // In case the ID & Name haven't been set yet, we auto generate them
        if (childRepositoryNode.id === Constants_1.Constants.AUTO_GENERATE_ID_PREFIX) {
            childRepositoryNode.id = this.generateId(childCoverageHandler, "");
        }
        if (childRepositoryNode.name === Constants_1.Constants.AUTO_GENERATE_ID_PREFIX) {
            childRepositoryNode.name = childRepositoryNode.id;
        }
        // Create a repository handler where we are the current node.
        return this.createChildRepositoryHandler(childRepositoryNode);
    };
    /**
     * Fire page opened event  if path id  is part of listening elements
     */
    ScreenCoverageHandler.prototype.pageOpened = function () {
        if (!this.repositoryHandler) {
            return;
        }
        var listeningElement = this.applicationCoverageHandler.getListeningElement(this.repositoryHandler.pathId);
        if (listeningElement == null || listeningElement.triggers == null)
            return;
        if (listeningElement.triggers.find(function (trigger) { return trigger.name === "opened"; })) {
            this.platformDriver.reportTriggerFired(listeningElement.path, "opened");
        }
    };
    ScreenCoverageHandler.prototype.execLastNodeOnScreen = function (elementPath, lAction, validateOnly) {
        // If we reach the last one (the one needs actions on) go and execute. Otherwise, go deeper.
        // We are the element needed to execute on.
        // Lets get the element.
        var result = this.getNodeOnScreen();
        if (!result.success)
            return new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        // Need to execute on the element itself. We are also the coverage handler that knows the control
        var currentNode = result.data.accessResult;
        //save current node on its coverage handler
        this.setNode(currentNode);
        // Go deeper on the path: Continue to next node
        return this.execNextNodeOnScreen(elementPath, lAction, validateOnly);
    };
    ScreenCoverageHandler.prototype.execLastNodeOnScreenAsync = function (elementPath, lAction, validateOnly) {
        return __awaiter(this, void 0, void 0, function () {
            var result, currentNode;
            return __generator(this, function (_a) {
                result = this.getNodeOnScreen();
                if (!result.success)
                    return [2 /*return*/, new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION)];
                currentNode = result.data.accessResult;
                //save current node on its coverage handler
                this.setNode(currentNode);
                // Go deeper on the path: Continue to next node
                return [2 /*return*/, this.execNextNodeOnScreenAsync(elementPath, lAction, validateOnly)];
            });
        });
    };
    return ScreenCoverageHandler;
}(ControlCoverageHandler_1.default));
exports.default = ScreenCoverageHandler;
//# sourceMappingURL=ScreenCoverageHandler.js.map