"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var CoverageHandler_1 = require("./CoverageHandler");
var Constants_1 = require("../Model/Constants");
var Log4jConfig_1 = require("../Utils/Log4jConfig");
var GenericResult_1 = require("../Model/GenericResult");
var ScreenCoverageHandler_1 = require("./ScreenCoverageHandler");
var log = Log4jConfig_1.logFactory.getLogger("ControlCoverageHandler");
var ControlCoverageHandler = /** @class */ (function (_super) {
    __extends(ControlCoverageHandler, _super);
    function ControlCoverageHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This method gets the bounding rectangle of the element.
     * @returns a rectangle that bounds the element
     */
    ControlCoverageHandler.prototype.boundingRectangle = function () {
        return null; // Should be inherited
    };
    /**
     * Perform the access to the element
     * @remark needs to be inherited
     * @returns a GenericResult struct with data that holds the element that was found
     */
    ControlCoverageHandler.prototype.executeAccessNodeWithSelector = function (previousResult) {
        return this.returnFailure("Needs to be inherited");
    };
    /**
     * This method starts the process of recording for this element.
     * @returns a GenericResult struct
     */
    ControlCoverageHandler.prototype.performStartRecording = function () {
        return this.returnFailure("Must be inherited");
    };
    /**
     * This method performs the start recording process on the node it gets.
     * @param node - the element to perform start recording on
     * @returns true, if the process of start recording for this element succeeded, and false otherwise.
     */
    ControlCoverageHandler.prototype.performStartRecordingOnNode = function (node) {
        return false;
    };
    /**
     * This method performs the start capturing process on the node it gets.
     * @param node - the node to start capturing on
     * @returns false.
     */
    ControlCoverageHandler.prototype.performStartCapturingOnNode = function (node) {
        return false;
    };
    /**
     * This method inserts the control to capture mode.
     * @remark Need to be inherited by specific element type and execute the relevant start capturing
     * @returns default value is true.
     */
    ControlCoverageHandler.prototype.executeStartCapturingOnNode = function () {
        return true;
    };
    /**
     *
     * @param elementDomNode
     * @returns the created selector
     */
    ControlCoverageHandler.prototype.createRepositoryNodeSelector = function (elementDomNode) {
        log.debug("This method needs to be inherited");
        return "";
    };
    /**
     * This method concatenates selector.
     * @param anchorSelector
     * @param partialSelector
     * @returns
     */
    ControlCoverageHandler.prototype.concatenateSelectorParts = function (anchorSelector, partialSelector) {
        log.debug("This method needs to be inherited");
        return "";
    };
    /**
     * This method creates a selector command that finds the element node on parent element.
     * @param parentNode
     * @param elementNode
     * @returns the created selector
     */
    ControlCoverageHandler.prototype.createSelectorFromParentToChild = function (parentNode, elementNode) {
        log.debug("This method needs to be inherited");
        return "";
    };
    /**
     * This method adds our child repository node to our repository.
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns the unified repositoryHandler
     */
    ControlCoverageHandler.prototype.addChildRepositoryNodeToOurselvesRecursively = function (childRepositoryNode, childCoverageHandler) {
        if (!this.customCoverageHandler.isNodeToBeAddedToRepository) {
            return this.parentCoverageHandler.addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode, childCoverageHandler);
        }
        return this.addChildRepositoryNodeToOurselves(childRepositoryNode, childCoverageHandler);
    };
    ControlCoverageHandler.prototype.addChildRepositoryNodeToOurselves = function (childRepositoryNode, childCoverageHandler) {
        log.trace("addChildRepositoryNodeToOurselves");
        // Adding a node to coverage handler which is base (like table and body)
        // Make sure we have repository
        this.createRepositoryIfNotExists();
        // Adding this repository to ourselves
        childRepositoryNode = this.addChildRepositoryNodeToParent(childRepositoryNode);
        // In case the ID & Name haven't been set yet, we auto generate them
        if (childRepositoryNode.id === Constants_1.Constants.AUTO_GENERATE_ID_PREFIX) {
            childRepositoryNode.id = this.generateId(childCoverageHandler, "");
        }
        if (childRepositoryNode.name === Constants_1.Constants.AUTO_GENERATE_ID_PREFIX) {
            childRepositoryNode.name = childRepositoryNode.id;
        }
        // Create a repository handler where we are the current node.
        return this.createChildRepositoryHandler(childRepositoryNode);
    };
    /**
     * This method adds the received repository node to the closest parent of the node.
     * @param {*} repositoryNode - the node to add
     * @memberof ControlCoverageHandler
     */
    ControlCoverageHandler.prototype.AddToClosestParentInRepository = function (repositoryNode) {
        var _a;
        if (!(this.parentCoverageHandler instanceof ScreenCoverageHandler_1.default)) {
            if (!((_a = this.parentCoverageHandler.customCoverageHandler) === null || _a === void 0 ? void 0 : _a.isNodeToBeAddedToRepository)) {
                return this.parentCoverageHandler.AddToClosestParentInRepository(repositoryNode);
            }
        }
        this.parentCoverageHandler.repositoryHandler.addNodeToChildren(repositoryNode);
    };
    /**
     * This method starts the process of capturing for this element.
     * @returns a GenericResult struct
     */
    ControlCoverageHandler.prototype.performStartCapturing = function () {
        return this.returnFailure("Need to be inherited");
    };
    /**
     * This method generates id for the control.
     * @param controlCoverageHandler
     * @param suffix
     * @returns a string representing the generated id.
     */
    ControlCoverageHandler.prototype.generateId = function (controlCoverageHandler, suffix) {
        // Auto generate Id. We will do it by tag name and index it while finding free in parent
        var prefix = controlCoverageHandler.getAutoGeneratedIdPrefix();
        return this.findFreeId("" + prefix + suffix);
    };
    /**
     * In case this control has no unique id this method is called to auto generate prefix id.
     * @returns a string representing the generated id prefix
     */
    ControlCoverageHandler.prototype.getAutoGeneratedIdPrefix = function () {
        return this.customCoverageHandler.type;
    };
    /**
     * Find a free id in current repository
     * @param name Base name to search id
     * @returns a string representing the id.
     */
    ControlCoverageHandler.prototype.findFreeId = function (name) {
        // Find a free ID by attaching to the name
        var index = 1;
        // If name is not built for auto number, try to search it without a number (looks nicer than ending with '1')
        if (!name.endsWith("_")) {
            // Start by finding without number and if already exists, starts with number 2
            if (!this.findElementByIdInCurrent(name)) {
                return name;
            }
            index = 2;
        }
        // Loop of attaching index until finding a free name
        var id;
        do {
            id = "" + name + index;
            index++;
        } while (this.findElementByIdInCurrent(id));
        return id;
    };
    /**
     * This method executes the action on the given path, in case it is the last element on the path.
     * @param elementPath - contains our current position in the path
     * @param lAction - a struct holding the action name and a value
     * @param validateOnly - indicates whether we just need the element or we need to execute the action
     * @returns a GenericResult struct with the action result inside the data, if there is one.
     */
    ControlCoverageHandler.prototype.execLastNodeOnScreen = function (elementPath, lAction, validateOnly) {
        var result = this.getNodeOnScreen();
        if (!result.success) {
            if (lAction.actionName === "isExists") {
                return this.returnSuccess(false);
            }
            return new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        }
        var currentNode = result.data.accessResult;
        //save current node on its custom coverage handler
        this.customCoverageHandler.node = currentNode;
        if (elementPath.isLast()) {
            // validateOnly means we just needed to get the element but not to execute the action
            if (validateOnly)
                return this.returnSuccess(); // Found!
            //running the action
            return this.executingAction(lAction, elementPath);
        }
        else {
            // Go deeper on the path: Continue to next node
            return this.execNextNodeOnScreen(elementPath, lAction, validateOnly);
        }
    };
    ControlCoverageHandler.prototype.executingAction = function (lAction, elementPath) {
        if (this.customCoverageHandler[lAction.actionName]) {
            var parsedValue = JSON.parse(lAction.values);
            return this.customCoverageHandler[lAction.actionName].apply(this.customCoverageHandler, parsedValue);
        }
        log.error("Control coverage handler " + this.repositoryHandler.name + " does not implement action " + lAction.actionName);
        return new GenericResult_1.GenericResult(false, "Invalid action " + lAction.actionName + " on element " + elementPath._elementPathId, Constants_1.Constants.TYPE_MISMATCH_EXCEPTION);
    };
    /**
     * This method is digging down all the way to the requested element on the elementPath for execution.
     * @param elementPath
     * @param lAction
     * @param validateOnly
     * @returns a  GenericResult struct with the action result inside the data, if there is one.
     */
    ControlCoverageHandler.prototype.execNextNodeOnScreen = function (elementPath, lAction, validateOnly) {
        var result = this.getCoverageHandlerByNextPathInRepository(elementPath);
        if (!result.success)
            return result;
        var elementCoverageHandler = result.data.coverageHandler;
        // Deepening down using the element coverage handler
        return elementCoverageHandler.execLastNodeOnScreen(elementPath, lAction, validateOnly);
    };
    /**
     * This method is digging down all the way to the requested element on the elementPath for execution.
     * @param elementPath
     * @param lAction
     * @param validateOnly
     * @returns a  GenericResult struct with the action result inside the data, if there is one.
     */
    ControlCoverageHandler.prototype.execNextNodeOnScreenAsync = function (elementPath, lAction, validateOnly) {
        return __awaiter(this, void 0, void 0, function () {
            var result, elementRepositoryHandler, elementCoverageHandler;
            return __generator(this, function (_a) {
                result = this.getNextPathRepository(elementPath);
                if (!result.success)
                    return [2 /*return*/, new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION)];
                elementRepositoryHandler = result.data.repositoryHandler;
                // Get the element coverage handler
                result = this.getElementCoverageHandler(elementRepositoryHandler, this, this.coverageHandlerByType.bind(this));
                if (!result.success)
                    return [2 /*return*/, result];
                elementCoverageHandler = result.data.coverageHandler;
                // Deepening down using the element coverage handler
                return [2 /*return*/, elementCoverageHandler.execLastNodeOnScreenAsync(elementPath, lAction, validateOnly)];
            });
        });
    };
    /**
     * This method executes asynchronously the action on the given path, in case it is the last element on the path.
     * @param elementPath - contains our current position in the path
     * @param lAction - a struct holding the action name and a value
     * @param validateOnly - indicates whether we just need the element or we need to execute the action
     * @returns a GenericResult struct with the action result inside the data, if there is one.
     */
    ControlCoverageHandler.prototype.execLastNodeOnScreenAsync = function (elementPath, lAction, validateOnly) {
        return __awaiter(this, void 0, void 0, function () {
            var result, currentNode;
            return __generator(this, function (_a) {
                result = this.getNodeOnScreen();
                if (!result.success) {
                    if (lAction.actionName === "isExists") {
                        return [2 /*return*/, this.returnSuccess(false)];
                    }
                    return [2 /*return*/, new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION)];
                }
                currentNode = result.data.accessResult;
                //save current node on its custom coverage handler
                this.customCoverageHandler.node = currentNode;
                if (elementPath.isLast()) {
                    // validateOnly means we just needed to get the element but not to execute the action
                    if (validateOnly)
                        return [2 /*return*/, this.returnSuccess()]; // Found!
                    //running the action
                    return [2 /*return*/, this.executingAction(lAction, elementPath)];
                }
                else {
                    // Go deeper on the path: Continue to next node
                    return [2 /*return*/, this.execNextNodeOnScreenAsync(elementPath, lAction, validateOnly)];
                }
                return [2 /*return*/];
            });
        });
    };
    ControlCoverageHandler.ELEMENT_HIGHLIGHT_COLOR = "#202aa7";
    ControlCoverageHandler.ELEMENT_SNAPSHOT_COLOR = "#ff0000";
    ControlCoverageHandler.ELEMENT_NOT_FOUND = "Element not found";
    ControlCoverageHandler.CONFIG_BIND_NOT_FOUND = "No binding configuration was found for this element";
    return ControlCoverageHandler;
}(CoverageHandler_1.default));
exports.default = ControlCoverageHandler;
//# sourceMappingURL=ControlCoverageHandler.js.map