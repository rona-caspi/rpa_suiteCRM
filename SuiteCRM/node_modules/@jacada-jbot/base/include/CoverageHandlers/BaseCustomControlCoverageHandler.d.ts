import { ListeningReporter, RecordingStepReporter } from "../Model/CustomSupportTypes";
import { GenericResult } from "../Model/GenericResult";
export declare abstract class BaseCustomControlCoverageHandler {
    node: unknown;
    abstract readonly type: string;
    constructor(node: unknown, recordingStepReporter?: RecordingStepReporter, listeningReporter?: ListeningReporter);
    /**
     * This method determines if a node matches the coverage handler.
     * @static
     * @param {*} node - the node to check
     * @return {*}  {boolean} - default is false
     * @memberof CustomControlCoverageHandler
     */
    static isMatch(node: unknown): boolean;
    /**
     * This method indicates if the element is capturable.
     * @returns default value is true.
     */
    isCapturable(): boolean;
    abstract isExists(): GenericResult;
    /**
     *  This method updates elementNode with the specific values in order to identify the element correctly
     * @param elementNode the element node to update
     */
    updateElementRepositoryNode(elementNode: any): void;
    /**
     * This property indicates whether we need to add this node the repository or not.
     * @returns Default value is true.
     */
    get isNodeToBeAddedToRepository(): boolean;
}
