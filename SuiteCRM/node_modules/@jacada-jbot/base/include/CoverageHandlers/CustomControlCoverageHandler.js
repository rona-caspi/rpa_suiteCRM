"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomControlCoverageHandler = void 0;
var BaseCustomControlCoverageHandler_1 = require("./BaseCustomControlCoverageHandler");
var CustomControlCoverageHandler = /** @class */ (function (_super) {
    __extends(CustomControlCoverageHandler, _super);
    function CustomControlCoverageHandler(node, recordingStepReporter, listeningReporter) {
        return _super.call(this, node, recordingStepReporter, listeningReporter) || this;
    }
    /**
     * This method indicates if the element is recordable.
     * @returns default value is true.
     */
    CustomControlCoverageHandler.prototype.isRecordable = function () {
        return true;
    };
    /**
     * This method indicates whether we need to record on the controls' children.
     * @returns default value is false.
     */
    CustomControlCoverageHandler.prototype.areChildrenRecordable = function () {
        return false;
    };
    /**
     * This method indicates whether we need to capture on the controls' children.
     * @returns default value is false.
     */
    CustomControlCoverageHandler.prototype.areChildrenCapturable = function () {
        return false;
    };
    /**
     * This method indicates if the element is listenable.
     * @returns default value is true.
     */
    CustomControlCoverageHandler.prototype.isListenable = function () {
        return true;
    };
    return CustomControlCoverageHandler;
}(BaseCustomControlCoverageHandler_1.BaseCustomControlCoverageHandler));
exports.CustomControlCoverageHandler = CustomControlCoverageHandler;
//# sourceMappingURL=CustomControlCoverageHandler.js.map