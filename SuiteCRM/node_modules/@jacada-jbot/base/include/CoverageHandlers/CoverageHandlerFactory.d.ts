import PlatformDriver from "../PlatformDrivers/PlatformDriver";
import RepositoryHandler from "../Model/RepositoryHandler";
import CoverageHandler from "./CoverageHandler";
import ApplicationCoverageHandler from "./ApplicationCoverageHandler";
import ApplicationData from "../Model/ApplicationData";
import ControlCoverageHandler from "./ControlCoverageHandler";
import { applicationCoverageHandler } from "../Model/CoveredApplication";
import { CustomControlCoverageHandler } from "./CustomControlCoverageHandler";
import ScreenCoverageHandler from "./ScreenCoverageHandler";
import { ListeningReporter, RecordingStepReporter } from "../Model/CustomSupportTypes";
import { BaseCustomControlCoverageHandler } from "./BaseCustomControlCoverageHandler";
export default abstract class CoverageHandlerFactory {
    /**
     *
     */
    constructor();
    protected baseCoverageHandlers: Map<string, typeof BaseCustomControlCoverageHandler>;
    protected applicationCoverageHandlers: Map<string, typeof BaseCustomControlCoverageHandler>;
    /**
     * This method populates baseCoverageHandlers map
     */
    protected abstract populateBaseCoverageHandlerMap(): void;
    /**
     * This method gets a node and returns its type.
     * @param node - the node to get its type
     * @returns a string representing the node type.
     */
    protected abstract nodeToNodeType(node: any): string;
    protected abstract createControlCoverageHandler(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, factory: CoverageHandlerFactory, applicationCoverageHandler?: ApplicationCoverageHandler): ControlCoverageHandler;
    abstract createScreenCoverageHandler(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, factory: CoverageHandlerFactory, applicationCoverageHandler?: ApplicationCoverageHandler): ScreenCoverageHandler;
    /**
     * This method returns Default coverage handler according to derived class
     * @param platformDriver
     * @param repositoryHandler
     * @param applicationData
     * @param parentCoverageHandler
     * @param factory
     * @param applicationCoverageHandler
     */
    protected abstract getDefaultCoverageHandler(node: unknown, recordingStepReporter: RecordingStepReporter, listeningReporter: ListeningReporter): CustomControlCoverageHandler;
    addApplicationCoverageHandlers(coverageHandlers: applicationCoverageHandler[]): void;
    /**
     * This method creates the platformDriver.
     * @param platformDriverObj
     * @returns PlatformDriver
     */
    createPlatformDriverOfObject(platformDriverObj: any): PlatformDriver;
    /**
     * This method creates the repository.
     * @param tree - the repository tree
     * @returns Repository
     */
    private createRepository;
    /**
     * This method creates the repositoryHandler
     * @param tree - the repository tree
     * @returns RepositoryHandler
     */
    createRepositoryHandler(tree: any): RepositoryHandler;
    /**
     * This method creates applicationCoverageHandler.
     * @param platformDriver -
     * @param repositoryHandler
     * @param applicationData
     * @param parentCoverageHandler
     * @param factory
     * @returns ApplicationCoverageHandler
     */
    createApplicationCoverageHandler(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, factory: CoverageHandlerFactory): ApplicationCoverageHandler;
    /**
     * This method creates coverageHandler by the type of the node.
     * @param platformDriver
     * @param repositoryHandler
     * @param applicationData
     * @param parentCoverageHandler
     * @param controlType
     * @param applicationCoverageHandler
     * @returns CoverageHandler
     */
    createCoverageHandlerByType(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, factory: CoverageHandlerFactory, controlType: string, applicationCoverageHandler?: ApplicationCoverageHandler): CoverageHandler;
    createCoverageHandlerByNode(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, node: any, factory: CoverageHandlerFactory, applicationCoverageHandler?: ApplicationCoverageHandler): CoverageHandler;
    protected createNewCustomControlInstance(type: typeof BaseCustomControlCoverageHandler, node: unknown, controlCoverageHandler: ControlCoverageHandler): CustomControlCoverageHandler;
    /**
     * This method creates applicationData.
     * @param applicationData
     * @returns ApplicationData
     */
    createApplicationData(applicationData: any): ApplicationData;
    /**
     * @param derivedCtor
     * @param baseCtors
     */
    applyMixins(derivedCtor: any, baseCtors: any[]): void;
}
