"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PlatformDriver_1 = require("../PlatformDrivers/PlatformDriver");
var RepositoryHandler_1 = require("../Model/RepositoryHandler");
var Repository_1 = require("../Model/Repository");
var ApplicationCoverageHandler_1 = require("./ApplicationCoverageHandler");
var ApplicationData_1 = require("../Model/ApplicationData");
var Log4jConfig_1 = require("../Utils/Log4jConfig");
var log = Log4jConfig_1.logFactory.getLogger("CoverageHandlerFactory");
var CoverageHandlerFactory = /** @class */ (function () {
    /**
     *
     */
    function CoverageHandlerFactory() {
        this.baseCoverageHandlers = new Map();
        this.applicationCoverageHandlers = new Map();
        this.populateBaseCoverageHandlerMap();
    }
    CoverageHandlerFactory.prototype.addApplicationCoverageHandlers = function (coverageHandlers) {
        var _this = this;
        coverageHandlers.forEach(function (applicationCoverageHandler) { return _this.applicationCoverageHandlers.set(applicationCoverageHandler.type, applicationCoverageHandler.class); });
    };
    /**
     * This method creates the platformDriver.
     * @param platformDriverObj
     * @returns PlatformDriver
     */
    CoverageHandlerFactory.prototype.createPlatformDriverOfObject = function (platformDriverObj) {
        return new PlatformDriver_1.default();
    };
    /**
     * This method creates the repository.
     * @param tree - the repository tree
     * @returns Repository
     */
    CoverageHandlerFactory.prototype.createRepository = function (tree) {
        return new Repository_1.Repository(tree);
    };
    /**
     * This method creates the repositoryHandler
     * @param tree - the repository tree
     * @returns RepositoryHandler
     */
    CoverageHandlerFactory.prototype.createRepositoryHandler = function (tree) {
        var repository = new Repository_1.Repository(tree);
        return new RepositoryHandler_1.default(repository, tree, null);
    };
    /**
     * This method creates applicationCoverageHandler.
     * @param platformDriver -
     * @param repositoryHandler
     * @param applicationData
     * @param parentCoverageHandler
     * @param factory
     * @returns ApplicationCoverageHandler
     */
    CoverageHandlerFactory.prototype.createApplicationCoverageHandler = function (platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory) {
        return new ApplicationCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory);
    };
    /**
     * This method creates coverageHandler by the type of the node.
     * @param platformDriver
     * @param repositoryHandler
     * @param applicationData
     * @param parentCoverageHandler
     * @param controlType
     * @param applicationCoverageHandler
     * @returns CoverageHandler
     */
    CoverageHandlerFactory.prototype.createCoverageHandlerByType = function (platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, controlType, applicationCoverageHandler) {
        log.trace("createCoverageHandlerByType.controlType =" + controlType);
        var controlCoverageHandler = this.createControlCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
        var customControlCoverageHandlerType = undefined;
        if (this.applicationCoverageHandlers.has(controlType)) {
            log.trace("control type " + controlType + " is part of application coverage handlers");
            customControlCoverageHandlerType = this.applicationCoverageHandlers.get(controlType);
        }
        else if (this.baseCoverageHandlers.has(controlType)) {
            log.trace("control type " + controlType + " is part of base coverage handlers");
            customControlCoverageHandlerType = this.baseCoverageHandlers.get(controlType);
        }
        var result = controlCoverageHandler.getNodeOnScreen();
        var node = result.success ? result.data.accessResult : null;
        var customCoverageHandler = this.createNewCustomControlInstance(customControlCoverageHandlerType, node, controlCoverageHandler);
        controlCoverageHandler.customCoverageHandler = customCoverageHandler;
        return controlCoverageHandler;
    };
    CoverageHandlerFactory.prototype.createCoverageHandlerByNode = function (platformDriver, repositoryHandler, applicationData, parentCoverageHandler, node, factory, applicationCoverageHandler) {
        var _this = this;
        log.trace("In createCoverageHandlerByNode for node: " + node);
        log.trace("applicationCoverageHandlers length is: " + this.applicationCoverageHandlers.size);
        log.trace("baseCH length is: " + this.baseCoverageHandlers.size);
        var controlCoverageHandler = this.createControlCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
        var foundCustomCoverageHandler = null;
        this.applicationCoverageHandlers.forEach(function (customCoverageHandler) {
            log.trace("looking for match in customCoverageHandlers");
            if (customCoverageHandler.isMatch(node)) {
                foundCustomCoverageHandler = _this.createNewCustomControlInstance(customCoverageHandler, node, controlCoverageHandler);
                return;
            }
            log.trace("couldn't find match, continue to next CH");
        });
        if (!foundCustomCoverageHandler) {
            var nodeType = this.nodeToNodeType(node);
            log.trace("nodeToNodeType returned " + nodeType);
            var coverageHandlerBase = this.baseCoverageHandlers.get(nodeType);
            if (coverageHandlerBase) {
                log.trace("Found CHBase");
                foundCustomCoverageHandler = this.createNewCustomControlInstance(coverageHandlerBase, node, controlCoverageHandler);
            }
            else {
                log.trace("Couldn't find any matching CH, creating default..");
                foundCustomCoverageHandler = this.getDefaultCoverageHandler(node, controlCoverageHandler.executeRecordedStep.bind(controlCoverageHandler), controlCoverageHandler.reportChangedElement.bind(controlCoverageHandler));
            }
        }
        controlCoverageHandler.customCoverageHandler = foundCustomCoverageHandler;
        return controlCoverageHandler;
    };
    CoverageHandlerFactory.prototype.createNewCustomControlInstance = function (type, node, controlCoverageHandler) {
        var customCoverageHandlerObject = Object.create(type.prototype);
        var customCoverageHandlerInstance = new customCoverageHandlerObject.constructor(node, controlCoverageHandler.executeRecordedStep.bind(controlCoverageHandler), controlCoverageHandler.reportChangedElement.bind(controlCoverageHandler));
        return customCoverageHandlerInstance;
    };
    /**
     * This method creates applicationData.
     * @param applicationData
     * @returns ApplicationData
     */
    CoverageHandlerFactory.prototype.createApplicationData = function (applicationData) {
        return new ApplicationData_1.default({}, applicationData);
    };
    /**
     * @param derivedCtor
     * @param baseCtors
     */
    CoverageHandlerFactory.prototype.applyMixins = function (derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
                if (name !== "constructor") {
                    derivedCtor.prototype[name] = baseCtor.prototype[name];
                }
            });
        });
    };
    return CoverageHandlerFactory;
}());
exports.default = CoverageHandlerFactory;
//# sourceMappingURL=CoverageHandlerFactory.js.map