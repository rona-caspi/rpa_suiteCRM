"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("../Model/RepositoryHandler");
var CoverageHandler_1 = require("./CoverageHandler");
var GenericResult_1 = require("../Model/GenericResult");
var ScreenCoverageHandler_1 = require("./ScreenCoverageHandler");
var RepositoryHandler_1 = require("../Model/RepositoryHandler");
var ElementPath_1 = require("../Model/ElementPath");
var Log4jConfig_1 = require("../Utils/Log4jConfig");
var ListeningElement_1 = require("../Model/ListeningElement");
var Constants_1 = require("../Model/Constants");
var log = Log4jConfig_1.logFactory.getLogger("ApplicationCoverageHandler");
/**
 * The Coverage Handler in the application level. When initiated, it is given the platformDriver which is connected to the current coverageHandler
 *  of this application (such as the IE tab) and given the repository from this
 */
var ApplicationCoverageHandler = /** @class */ (function (_super) {
    __extends(ApplicationCoverageHandler, _super);
    function ApplicationCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) {
        if (applicationCoverageHandler === void 0) { applicationCoverageHandler = null; }
        var _this = _super.call(this, platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) || this;
        _this.listeningElements = {};
        return _this;
    }
    /**
    * This method executes the action received on the related element.
    * @param lElementPathId - the path to the element
    * @param lAction - a struct holding the action name and a list of values, when needed
    * @returns a GenericResult struct with the action result in the data
    */
    ApplicationCoverageHandler.prototype.executeAction = function (lElementPathId, lAction) {
        log.info("executeAction: element path- " + lElementPathId + ", action- " + lAction.actionName);
        var elementPath = new ElementPath_1.default(lElementPathId);
        // TBD: Incase application doesn't exist, execute the lifecycle
        // The first element is 'us' (the application). 
        var applicationId = elementPath.next();
        if (applicationId === null)
            return this.returnFailure("Empty element path id");
        // If we are last, the action should be on the application
        if (elementPath.isLast()) {
            // Execute the action on application level
            return this[lAction.actionName](lAction.values);
        }
        else {
            // Second element is the screen. Get it and its repository
            var result = this.getNextPathRepository(elementPath);
            if (!result.success)
                return new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
            var screenRepositoryHandler = result.data.repositoryHandler;
            log.debug("executeAction: screen repository handler id is " + screenRepositoryHandler.id + " and path is " + screenRepositoryHandler.pathId);
            // get the screen coverage handler
            result = this.getElementCoverageHandler(screenRepositoryHandler, this, this.getDefaultScreenCoverageHandler.bind(this));
            if (!result.success)
                return result;
            var screenCoverageHandler = result.data.coverageHandler;
            // Execute using the screen handler
            return screenCoverageHandler.execLastNodeOnScreen(elementPath, lAction, false);
        }
    };
    /**
    * This method executes asynchronously the action received on the related element.
    * @param lElementPathId - the path to the element
    * @param lAction - a struct holding the action name and a list of values, when needed
    * @returns a GenericResult struct with the action result in the data
    */
    ApplicationCoverageHandler.prototype.executeActionAsync = function (lElementPathId, lAction) {
        return __awaiter(this, void 0, void 0, function () {
            var elementPath, applicationId, result, screenRepositoryHandler, screenCoverageHandler;
            return __generator(this, function (_a) {
                log.info("executeActionAsync: element path- " + lElementPathId + ", action- " + lAction.actionName);
                elementPath = new ElementPath_1.default(lElementPathId);
                applicationId = elementPath.next();
                if (applicationId === null)
                    return [2 /*return*/, this.returnFailure("Empty element path id")];
                // If we are last, the action should be on the application
                if (elementPath.isLast()) {
                    // Execute the action on application level
                    return [2 /*return*/, this[lAction.actionName](lAction.values)];
                }
                else {
                    result = this.getNextPathRepository(elementPath);
                    if (!result.success)
                        return [2 /*return*/, new GenericResult_1.GenericResult(false, "Could not find element " + elementPath._elementPathId, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION)];
                    screenRepositoryHandler = result.data.repositoryHandler;
                    log.debug("executeActionAsync: screen repository handler id is " + screenRepositoryHandler.id + " and path is " + screenRepositoryHandler.pathId);
                    // get the screen coverage handler
                    result = this.getElementCoverageHandler(screenRepositoryHandler, this, this.getDefaultScreenCoverageHandler.bind(this));
                    if (!result.success)
                        return [2 /*return*/, result];
                    screenCoverageHandler = result.data.coverageHandler;
                    // Execute using the screen handler
                    return [2 /*return*/, screenCoverageHandler.execLastNodeOnScreenAsync(elementPath, lAction, false)];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * This method creates a default screenCoverageHandler, in case there isn't a specific one yet.
     * @param applicationCoverageHandler - the applicationCoverageHandler
     * @param screenRepositoryHandler - the applicationRepositoryHandler
     * @returns a new ScreenCoverageHandler
     */
    ApplicationCoverageHandler.prototype.getDefaultScreenCoverageHandler = function (applicationCoverageHandler, screenRepositoryHandler) {
        return new ScreenCoverageHandler_1.default(applicationCoverageHandler.platformDriver, screenRepositoryHandler, applicationCoverageHandler.applicationData, applicationCoverageHandler, applicationCoverageHandler.factory, this);
    };
    /**
     * This method starts the recording process for all the application.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.startRecording = function () {
        log.info('Starting recording process');
        // Starts a recording process in the platformDriver using the repositorySection
        // If we were called, it means there is an application/screen open.
        // We might have already a repository or not and we should return this repository updated.
        // Get the screen coverage handler for the current screen.
        var result = this.getScreenCoverageHandlerForCurrent();
        if (!result.success)
            return result;
        this.currentScreenCoverageHandler = result.data.coverageHandler;
        // We move the logic to the screen coverage handler as we are in a screen.
        return this.currentScreenCoverageHandler.startRecording();
    };
    /**
     * This method stops the recording process for all the application.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.stopRecording = function () {
        return this.returnFailure("TBD");
    };
    /**
     * This method starts the capturing process for all the application.
     * @returns a GenericResult
     */
    ApplicationCoverageHandler.prototype.startCapturing = function () {
        log.info('Starting capturing process');
        // Starts a capturing process in the platformDriver using the repositorySection
        // If we were called, it means there is an application/screen open.
        // We might have already a repository or not and we should return this repository updated.
        // Get the screen coverage handler for the current screen.
        var result = this.getScreenCoverageHandlerForCurrent();
        if (!result.success)
            return result;
        this.currentScreenCoverageHandler = result.data.coverageHandler;
        // We move the logic to the screen coverage handler as we are in a screen.
        return this.currentScreenCoverageHandler.startCapturing();
    };
    /**
     * This method gets the screen coverageHandler for the current screen.
     * @returns a GenericResult with the screen coverageHandler inside the data
     */
    ApplicationCoverageHandler.prototype.getScreenCoverageHandlerForCurrent = function () {
        // Need to have the right screen handler and from it the id. We then might need to change to another coverage handler.
        // So we start from the default for this screen
        var defaultScreenCoverageHandler = this.getDefaultScreenCoverageHandlerForCurrent();
        // Getting the screen Id. the default screen coverage should get it.
        var screenId = defaultScreenCoverageHandler.uniqueId;
        // check if it was stored in the application data
        var coverageHandler = defaultScreenCoverageHandler.fetchCoverageHandlerFromUniqueId(screenId);
        if (coverageHandler) {
            log.debug("Screen coverage handler retrieved from memory");
            return this.returnSuccess({ coverageHandler: coverageHandler });
        }
        // Look for it in the repository
        var screenElement = this.repositoryHandler.findElementByIdInCurrent(screenId);
        if (screenElement) {
            // We are in the repository!
            // Do we already have coverage handler? If yes, it should be stored in the Element Data
            var pathId = this.repositoryHandler.getPathWithElement(screenId);
            var elementData = this.pathIdToTemporaryElementData(pathId);
            if (elementData.coverageHandler) {
                log.debug("coverageHandler returned from pathIdToTemporaryElementData: " + elementData.coverageHandler.constructor.name);
                // already exists! we can return the one we have
                return this.returnSuccess({ coverageHandler: elementData.coverageHandler });
            }
            // No coverage handler. Let's create the repository handler and then the coverage handler
            var screenRepositoryHandler = new RepositoryHandler_1.default(this.repositoryHandler.repository, screenElement, this.repositoryHandler);
            // Now lets get the coverage handler from the repository handler.
            var result = this.getElementCoverageHandler(screenRepositoryHandler, this, this.getDefaultScreenCoverageHandlerForCurrent.bind(this));
            if (!result.success)
                return result;
            if (result.data.coverageHandler) {
                result.data.coverageHandler.saveCoverageHandlerForUniqueId(screenId);
                return result;
            }
        }
        // No indication in the repository -> return the default. We don't have yet a repositoryHandler for it and we expect it to create it and add it
        defaultScreenCoverageHandler.saveCoverageHandlerForUniqueId(screenId);
        return this.returnSuccess({ coverageHandler: defaultScreenCoverageHandler });
    };
    /**
     * This method gets the default screen coverageHandler for the current screen.
     * @returns a new ScreenCoverageHandler
     */
    ApplicationCoverageHandler.prototype.getDefaultScreenCoverageHandlerForCurrent = function () {
        // is the default screen coverage indicated in the repository?
        var screenCoverageHandler;
        if (this.repositoryHandler) {
            screenCoverageHandler = this.factory.createScreenCoverageHandler(this.platformDriver, null, this.applicationData, this, this.factory, this);
        }
        if (screenCoverageHandler) {
            return screenCoverageHandler;
        }
        else {
            return this.createDefaultScreenCoverageHandler();
        }
    };
    /**
     * This method gets the repository for the application - application level should always have repository, even if empty
     * @returns the RepositoryHandler
     */
    ApplicationCoverageHandler.prototype.createRepositoryIfNotExists = function () {
        return this.repositoryHandler; // Application level should always have repository, even if empty
    };
    /**
     * This method creates a default screen coverageHandler.
     * @returns a new ScreenCoverageHandler
     */
    ApplicationCoverageHandler.prototype.createDefaultScreenCoverageHandler = function () {
        // Need to be inherited if not indicated in the repository
        return new ScreenCoverageHandler_1.default(this.platformDriver, null, this.applicationData, this, this.factory, this);
    };
    /**
     * This method stops the capturing process for all the application.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.stopCapturing = function () {
        // Stops a capturing process
        return this.returnFailure("TBD");
    };
    /**
     * This method starts the listening process.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.startListening = function () {
        log.info('Starting listening process');
        // Starts a listening process
        // If we were called, it means there is an application/screen open.
        for (var path in this.listeningElements) {
            var listeningElement = this.listeningElements[path];
            this.startListeningOnElement(listeningElement);
        }
        return this.returnSuccess("");
    };
    /**
     * This method starts listening on each element from ListeningElements
     * @param listeningElement the listeningElement to listen to
     */
    ApplicationCoverageHandler.prototype.startListeningOnElement = function (listeningElement) {
        log.debug("startListening: pathId is: " + listeningElement.path);
        var elementPath = new ElementPath_1.default(listeningElement.path);
        // The first element is 'us' (the application). 
        var applicationId = elementPath.next();
        if (applicationId === null)
            return;
        // Second element is the screen. Get it and its repository
        var result = this.getNextPathRepository(elementPath);
        if (!result.success)
            return;
        var screenRepositoryHandler = result.data.repositoryHandler;
        log.debug("startListening: screen repository handler id is " + screenRepositoryHandler.id + " and path is " + screenRepositoryHandler.pathId);
        // get the screen coverage handler
        result = this.getElementCoverageHandler(screenRepositoryHandler, this, this.getDefaultScreenCoverageHandler.bind(this));
        if (!result.success)
            return;
        var screenCoverageHandler = result.data.coverageHandler;
        // Validate that we are in the screen needed to be listening to
        result = screenCoverageHandler.validateScreen();
        if (!result.success)
            return;
        // Listening using the screen handler
        screenCoverageHandler.listenLastNodeOnScreen(elementPath, listeningElement);
    };
    /**
     * This method sets the listeningElements list.
     * @param listeningInfos
     */
    ApplicationCoverageHandler.prototype.setListeningInfo = function (listeningInfos) {
        log.debug("In setListeningInfo");
        // Creating the listening elements map
        this.listeningElements = {};
        this.addListeningInfos(listeningInfos);
    };
    /**
     * This method adds the listeningInfos received to the listeningElements.
     * @param listeningInfos
     */
    ApplicationCoverageHandler.prototype.addListeningInfos = function (listeningInfos) {
        for (var _i = 0, listeningInfos_1 = listeningInfos; _i < listeningInfos_1.length; _i++) {
            var listeningInfo = listeningInfos_1[_i];
            this.addListeningInfo(listeningInfo);
        }
    };
    /**
     * This method adds a single listeningInfo to the listeningElements.
     */
    ApplicationCoverageHandler.prototype.addListeningInfo = function (listeningInfo) {
        var path = listeningInfo.path;
        if (path && path.length > 0) {
            var listeningElement = new ListeningElement_1.default(listeningInfo.path, listeningInfo.attributes, listeningInfo.triggers);
            this.listeningElements[path] = listeningElement;
            return listeningElement;
        }
        else {
            return null;
        }
    };
    /**
     * This method gets a listeningElement, given the pathId.
     * @param path - the path to search
     * @returns the appropriate ListeningElement
     */
    ApplicationCoverageHandler.prototype.getListeningElement = function (path) {
        return this.listeningElements[path];
    };
    /**
     * This method stops the listening process for all the application.
     * @returns a GenericResult struct
     */
    ApplicationCoverageHandler.prototype.stopListening = function () {
        // Stops a listening process
        return this.returnFailure("TBD");
    };
    /**
     * Get current screen and notify it that a page was opened
     */
    ApplicationCoverageHandler.prototype.pageOpened = function () {
        // Get the screen coverage handler for the current screen.
        var result = this.getScreenCoverageHandlerForCurrent();
        if (!result.success)
            return;
        this.currentScreenCoverageHandler = result.data.coverageHandler;
        this.currentScreenCoverageHandler.pageOpened();
    };
    return ApplicationCoverageHandler;
}(CoverageHandler_1.default));
exports.default = ApplicationCoverageHandler;
//# sourceMappingURL=ApplicationCoverageHandler.js.map