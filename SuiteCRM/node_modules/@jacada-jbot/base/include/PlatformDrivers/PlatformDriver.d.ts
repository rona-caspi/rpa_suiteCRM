import RepositoryHandler from "../Model/RepositoryHandler";
import LogicalAction from "../Model/LogicalAction";
export default class PlatformDriver {
    /**
     * This method reports the repository tree changed back to the platform.
     * @param repositoryHandler - the changed repository
     */
    reportTreeChanged(repositoryHandler: RepositoryHandler): void;
    /**
     * This method reports the recorded step back to the platform.
     * @param lAction - a struct that holds the action name and value that was recorded
     * @param pathId
     * @param snapshot
     * @param coordinates
     */
    reportRecordedStep(lAction: LogicalAction, pathId: string, snapshot?: string, coordinates?: number[]): void;
    /**
     * This method reports the captured element to the platform.
     * @param pathId
     * @param snapshot
     * @param coordinates
     * @returns true
     */
    reportCapturedElement(pathId: string, snapshot?: string, coordinates?: number[]): boolean;
    reportCapturedTable(pathId: string, fieldsPathIds: string[], snapshot?: string, coordinates?: number[]): void;
    /**
     * This method reports the changed element (while listening) to the platform.
     * @param pathId
     * @param attribute
     * @param newValue
     * @returns true
     */
    reportChangedElement(pathId: string, attribute: string, newValue: any): boolean;
    /**
     * This method reports the trigger fired to the platform.
     * @param pathId
     * @param trigger
     * @returns true
     */
    reportTriggerFired(pathId: string, trigger: string): boolean;
    /**
     * This method creates the relevant exception and "throws" it to the platform.
     * @param error
     * @param exceptionType
     */
    throwException(error: any, exceptionType: string): void;
}
