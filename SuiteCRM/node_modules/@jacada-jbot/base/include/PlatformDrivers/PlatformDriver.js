"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Log4jConfig_1 = require("../Utils/Log4jConfig");
var log = Log4jConfig_1.logFactory.getLogger("PlatformDriver");
var PlatformDriver = /** @class */ (function () {
    function PlatformDriver() {
    }
    /**
     * This method reports the repository tree changed back to the platform.
     * @param repositoryHandler - the changed repository
     */
    PlatformDriver.prototype.reportTreeChanged = function (repositoryHandler) {
        // Should be inherited by platform
    };
    /**
     * This method reports the recorded step back to the platform.
     * @param lAction - a struct that holds the action name and value that was recorded
     * @param pathId
     * @param snapshot
     * @param coordinates
     */
    PlatformDriver.prototype.reportRecordedStep = function (lAction, pathId, snapshot, coordinates) {
        // Should be inherited by platform
    };
    /**
     * This method reports the captured element to the platform.
     * @param pathId
     * @param snapshot
     * @param coordinates
     * @returns true
     */
    PlatformDriver.prototype.reportCapturedElement = function (pathId, snapshot, coordinates) {
        // Should be inherited by platform    
        return true;
    };
    PlatformDriver.prototype.reportCapturedTable = function (pathId, fieldsPathIds, snapshot, coordinates) {
    };
    /**
     * This method reports the changed element (while listening) to the platform.
     * @param pathId
     * @param attribute
     * @param newValue
     * @returns true
     */
    PlatformDriver.prototype.reportChangedElement = function (pathId, attribute, newValue) {
        // Should be inherited by platform
        return true;
    };
    /**
     * This method reports the trigger fired to the platform.
     * @param pathId
     * @param trigger
     * @returns true
     */
    PlatformDriver.prototype.reportTriggerFired = function (pathId, trigger) {
        // Should be inherited by platform
        return true;
    };
    /**
     * This method creates the relevant exception and "throws" it to the platform.
     * @param error
     * @param exceptionType
     */
    PlatformDriver.prototype.throwException = function (error, exceptionType) {
        // Should be inherited by platform
    };
    return PlatformDriver;
}());
exports.default = PlatformDriver;
//# sourceMappingURL=PlatformDriver.js.map