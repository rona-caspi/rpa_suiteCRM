"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = require("./Constants");
/**
 * This class is responsible for actions on elementPath of an element.
 */
var ElementPath = /** @class */ (function () {
    function ElementPath(elementPathId) {
        this._currentIndex = 0;
        this._elementPathId = elementPathId;
    }
    Object.defineProperty(ElementPath.prototype, "currentIndex", {
        /**
         * This field holds the current index on the path
         */
        get: function () { return this._currentIndex; },
        set: function (index) { this._currentIndex = index; },
        enumerable: false,
        configurable: true
    });
    /**
     * This method gets the next element on the path.
     * @returns the next element
     */
    ElementPath.prototype.next = function () {
        if (this.isLast())
            return null;
        var nextSep = this._elementPathId.indexOf(Constants_1.Constants.ELEMENT_PATH_IDS, this._currentIndex);
        if (nextSep < 0) {
            var nextElement = this._elementPathId.substring(this._currentIndex);
            this._currentIndex = this._elementPathId.length;
            return nextElement;
        }
        else {
            var nextElement = this._elementPathId.substring(this._currentIndex, nextSep);
            this._currentIndex = nextSep + 1;
            return nextElement;
        }
    };
    /**
     * This method gets the rest of the path from the currentIndex.
     * @returns
     */
    ElementPath.prototype.restPathId = function () {
        return this._elementPathId.substring(this._currentIndex);
    };
    /**
     * This method gets the full path of the element, starting from the currentIndex.
     * @returns
     */
    ElementPath.prototype.currentFullPathId = function () {
        if (this._currentIndex <= 0)
            return "";
        if (this.isLast())
            return this._elementPathId;
        return this._elementPathId.substring(0, this._currentIndex - 1);
    };
    /**
     * This method checks if the element is last on the path.
     * @returns true if it is, false otherwise.
     */
    ElementPath.prototype.isLast = function () {
        return this._currentIndex >= this._elementPathId.length;
    };
    /**
     * This method resets the path of the element, to point to the beginning.
     */
    ElementPath.prototype.reset = function () { this._currentIndex = 0; };
    return ElementPath;
}());
exports.default = ElementPath;
//# sourceMappingURL=ElementPath.js.map