import { Repository } from "./Repository";
import { GenericResult } from "./GenericResult";
/**
 * This class represents the repository handler
 */
export default class RepositoryHandler {
    _repository: Repository;
    _currentNode: any;
    _pathId: string;
    _parentHandler: RepositoryHandler;
    constructor(repository: Repository, currentNode: any, parentHandler: RepositoryHandler);
    /**
     * Points to the repository
     */
    get repository(): Repository;
    get repositoryTree(): any;
    /**
     * Points to the current node in the repository
     */
    set currentNode(node: any);
    get currentNode(): any;
    /**
     * Points to the path id of the element
     */
    set pathId(id: string);
    get pathId(): string;
    set parentHandler(parentHandler: RepositoryHandler);
    get parentHandler(): RepositoryHandler;
    set name(name: any);
    get name(): any;
    set id(id: any);
    get id(): any;
    /**
     * This method gets the id of the node.
     * @param node
     * @returns
     */
    getNodeId(node: any): string;
    set coverageHandlerName(coverageHandler: string);
    get coverageHandlerName(): string;
    /**
     * The type of the node
     */
    set type(type: any);
    get type(): any;
    /**
     * Points to the children of the node
     */
    set children(children: any);
    get children(): any;
    /**
     * The config section
     */
    set config(config: any);
    get config(): any;
    /**
     * This method finds an element in the repository by its id.
     * @param lElelementId
     * @returns the element found
     */
    findElementByIdInCurrent(lElelementId: string): any;
    /**
     * This method finds an element in the repository by the config section.
     * @param lConfig
     * @returns the element found
     */
    findElementByConfigInCurrent(lConfig: any): any;
    /**
     * Points to the application on the repository
     * @returns
     */
    applicationHandler(): RepositoryHandler;
    /**
     * This method get all the sub nodes of the current element.
     * @returns
     */
    getSubNodesOfCurrent(): any[];
    /**
     * This method adds the given node the children in the repository.
     * @param subNode
     */
    addNodeToChildren(subNode: any): void;
    /**
     * This method removes the given node from the children in the repository
     * @param {*} subNode - the node to remove
     * @memberof RepositoryHandler
     */
    removeNodeFromChildren(subNode: any): void;
    /**
     * TODO RONA: why is it here? should we remove it?
     * @param errorMessage
     * @returns
     */
    returnFailure(errorMessage: string): GenericResult;
    /**
     * TODO RONA: why is it here? should we remove it?
     * @param data
     * @returns
     */
    returnSuccess(data: any): GenericResult;
    /**
     * This method creates a path to the element
     * @param basePath
     * @param elementName
     * @returns a string representing the path to the element
     */
    createPath(basePath: string, elementName: string): string;
    /**
     * This method merges two paths together.
     * @param path1
     * @param path2
     * @returns the merged path
     */
    mergePaths(path1: string, path2: string): string;
    /**
     * This method gets the path of the element concatenated with its name.
     * @param elementName
     * @returns the concatenated string
     */
    getPathWithElement(elementName: string): string;
}
