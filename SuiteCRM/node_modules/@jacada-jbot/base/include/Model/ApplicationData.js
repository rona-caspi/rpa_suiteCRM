"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Log4jConfig_1 = require("../Utils/Log4jConfig");
var log = Log4jConfig_1.logFactory.getLogger("ApplicationData");
/**
 * This class stores data on application level.
 */
var ApplicationData = /** @class */ (function () {
    function ApplicationData(screenData, application) {
        this.screen = screenData;
        this.application = application;
        this._saveScreenFunction = function () { };
    }
    Object.defineProperty(ApplicationData.prototype, "application", {
        get: function () { return this._application; },
        /**
         * This field stores the dynamicAttributes we entered on the manifest.json
         */
        set: function (data) { this._application = data; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApplicationData.prototype, "screen", {
        get: function () { return this._screen; },
        /**
         * This field holds the elementData class by topic and key
         */
        set: function (data) { this._screen = data; },
        enumerable: false,
        configurable: true
    });
    ApplicationData.prototype.clearScreenData = function () {
        this.screen = {};
        this._saveScreenFunction(this.screen);
    };
    ApplicationData.prototype.getScreenData = function (key) {
        return this.screen[key];
    };
    ApplicationData.prototype.setScreenData = function (key, value) {
        this.screen[key] = value;
        this._saveScreenFunction(this.screen);
    };
    /**
     * This method gets the elementData stored by the topic and key
     * @param topic
     * @param key
     * @returns the elementData
     */
    ApplicationData.prototype.getScreenTopicData = function (topic, key) {
        log.trace("getScreenTopicData topic:" + topic + " key " + key);
        if (!this.screen[topic])
            return null;
        return this.screen[topic][key];
    };
    /**
     * This method sets the elementData by the topic and key
     * @param topic
     * @param key
     * @param value - the object to set
     */
    ApplicationData.prototype.setScreenTopicData = function (topic, key, value) {
        log.trace("setScreenTopicData topic:" + topic + " key " + key);
        if (!this.screen[topic])
            this.screen[topic] = {};
        this.screen[topic][key] = value;
        this._saveScreenFunction(this.screen);
    };
    /**
     * This method deletes all the data stored on the given topic.
     * @param topic
     */
    ApplicationData.prototype.deleteScreenTopic = function (topic) {
        if (this.screen[topic])
            delete this.screen[topic];
    };
    /**
     * This method deleted the data stored on the given topic and key.
     * @param topic
     * @param key
     */
    ApplicationData.prototype.deleteScreenTopicData = function (topic, key) {
        if (this.screen[topic] && this.screen[topic][key])
            delete this.screen[topic][key];
    };
    return ApplicationData;
}());
exports.default = ApplicationData;
//# sourceMappingURL=ApplicationData.js.map