"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Repository = void 0;
/*
     * The Repository has fixed parts and dynamic parts. Here are he fixed parts of each node.
     * id - Unique Id in this level of the tree. The PathId is calculated as the combination of all the id's from the tree root to the node.
     * name - displayed name (to be visible in the designer)
     * children - array of other nodes.
     * type - the type of node. It's behavior will be defined according to the type in a separate document.
     * config - data to be saved by the coverage handler to be able to execute the actions.
     * image
     *
     *
     * Optional:
     * coverageHandler
     * defaultCoverageHandlerName[elementType] - element per screen/control type, a name of a coverage handler. Will always be on the application but can also be on lower levels.
     * waitForScreenInMilli - Amount of milli seconds to wait until the element appears on screen
     * waitForScreenIntervalInMilli - When waiting on the above, check every this interval.
     *
     * */
var Repository = /** @class */ (function (_super) {
    __extends(Repository, _super);
    function Repository(tree) {
        var _this = _super.call(this) || this;
        _this.tree = tree;
        return _this;
    }
    return Repository;
}(Object));
exports.Repository = Repository;
//# sourceMappingURL=Repository.js.map