const fs = require('fs');
const AdmZip = require('adm-zip');
const CURR_DIR = process.cwd();

const exportFolder = `${CURR_DIR}/export`;
if (!fs.existsSync(exportFolder)){
	// If it's not an application, we will not have export folder
	return;
}

// Update export\subApplications if needed.
const subApplicationsFolder = `${CURR_DIR}/subApplications`;
if (fs.existsSync(subApplicationsFolder)){
	// Do we have sub applications ?
	const subApplicationNames  = fs.readdirSync(subApplicationsFolder);
	if (subApplicationNames.length > 0){
		const exportSubApplicationsFolder = `${CURR_DIR}/export/subApplications`;
		if (fs.existsSync(exportSubApplicationsFolder)){
			// remove if exists
			deleteAllFiles(exportSubApplicationsFolder);
			fs.rmdirSync(exportSubApplicationsFolder);
		}
		// Create the export sub applications folder
		fs.mkdirSync(exportSubApplicationsFolder);

		// Loop on sub applications and add their zip file content
		subApplicationNames.forEach(subApplicationName => {
			subApplicationZipFile = `${subApplicationsFolder}/${subApplicationName}/coverage.zip`;
			if (fs.existsSync(subApplicationZipFile)){
				// copy to the export
				const writePath = `${exportSubApplicationsFolder}/${subApplicationName}`;
				openZipIntoFolder(subApplicationZipFile, writePath);
			}
		});
	}
} 

// Create the zip file
console.log("Prepare export folder");
console.log("Zip export folder");

const zipFileName = `${CURR_DIR}/coverage.zip`;
if (fs.existsSync(zipFileName)){
	fs.unlinkSync(zipFileName);
}

// creating archive
try {
	var zip = new AdmZip();
	// Add all files and folders in export

	const exportFiles  = fs.readdirSync(exportFolder);

	exportFiles.forEach(file => {
		const filePath = `${exportFolder}/${file}`;
		
		// get stats about the current file
		const stats = fs.statSync(filePath);
		if (stats.isFile()) {
			zip.addLocalFile(filePath);
		} else if (stats.isDirectory()) {
			zip.addLocalFolder(filePath, file);
		}
	});
	zip.writeZip(zipFileName);
} catch (e){
	console.log("Exception while zipping files in " + exportFolder, e);
}


function deleteAllFiles (path) {
    try {
        const filesToDelete  = fs.readdirSync(path);
  
        filesToDelete.forEach(file => {
          const origFilePath = `${path}/${file}`;
          
          // get stats about the current file
          const stats = fs.statSync(origFilePath);
      
          if (stats.isFile()) {
            fs.unlinkSync(origFilePath);
          } else if (stats.isDirectory()) {
            // recursive call
            deleteAllFiles(origFilePath);
            fs.rmdirSync(origFilePath);
          }
        });
    } catch (e){
        console.log("Exception while deleting files in " + path, e);
    }
}

function openZipIntoFolder(subApplicationZipFile, writePath){
	var zip = new AdmZip(subApplicationZipFile);
	var zipEntries = zip.getEntries(); // an array of ZipEntry records
    zipEntries.forEach(function(zipEntry) {
		zip.extractEntryTo(zipEntry.entryName, writePath, true, true);
    });
}