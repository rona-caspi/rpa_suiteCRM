/* Jquery extensions  Begin*/
var JQueryExtensionCallbackFunctions = {};

(function ($) {
    $.fn.onNative = function (event_name, id, callback) {
        var $elements = this;
        if (!id){
            id = this.getUniqueId(event_name);
        }
        var iElement;
        for (iElement = 0 ; iElement < $elements.length ; iElement++){
            var elem = $elements[iElement];
            if (elem){
                // console.log("In onNative for event " + event_name);

                var key = id.toString() + "_" + event_name;
                var prevCallback = JQueryExtensionCallbackFunctions[key];
                if (prevCallback) {
                    if (elem.removeEventListener) {
                        elem.removeEventListener(event_name, prevCallback);
                    }
                    else {
                        elem.detachEvent("on" + event_name, prevCallback);
                    }
                }

                JQueryExtensionCallbackFunctions[key] = callback;
                if (elem.addEventListener) {
                    elem.addEventListener(event_name, callback);
                }
                else {
                    elem.attachEvent("on" + event_name, callback);
                }
            }
        }

        return id;
    };
    $.fn.getUniqueId = function(event_name) {
        var id;
        do {
            if (!event_name) event_name = "generic";
            id = Math.random().toString(36).replace(/[^a-z]+/g, '');
        } while (JQueryExtensionCallbackFunctions[id.toString() + "_" + event_name]);
        return id;
    }
}(jQuery));
(function ($) {
    $.fn.offNativeById = function (id) {
        var $elements = this;
        var iElement;
        var keyPrefix = id.toString() + "_";
        for (iElement = 0 ; iElement < $elements.length ; iElement++){
            var elem = $elements[iElement];
            if (elem){
                for (key in JQueryExtensionCallbackFunctions){
                    if (key.startsWith(keyPrefix)){
                        var callback = JQueryExtensionCallbackFunctions[key];
                        var event_name = key.substring (keyPrefix.length);
                        if (elem.removeEventListener) {
                            elem.removeEventListener(event_name, callback);
                        }
                        else {
                            elem.detachEvent("on" + event_name, callback);
                        }
                    }
                }
            }
        }

        // Remove from mapping
        var keysToRemove = [];
        for (key in JQueryExtensionCallbackFunctions){
            if (key.startsWith(keyPrefix)){
                keysToRemove.push(key);
            }
        }
        var iKey = 0;
        for (iKey = 0 ; iKey < keysToRemove.length ; iKey++){
            key = keysToRemove[iKey];
            delete JQueryExtensionCallbackFunctions[key];
        }

    };
    $.fn.offNative = function (event_name, id) {
        var $elements = this;
        var iElement;
        var callback = JQueryExtensionCallbackFunctions[id.toString() + "_" + event_name];
        for (iElement = 0 ; iElement < $elements.length ; iElement++){
            var elem = $elements[iElement];
            if (elem){
                if (elem.removeEventListener) {
                    elem.removeEventListener(event_name, callback);
                }
                else {
                    elem.detachEvent("on" + event_name, callback);
                }
            }
        }
        delete JQueryExtensionCallbackFunctions[id.toString() + "_" + event_name];
    };
    $.fn.hasNative = function (event_name, id) {
        var callback = JQueryExtensionCallbackFunctions[id.toString() + "_" + event_name];
        if (callback){
            return true;
        } else {
            return false;
        }
    };
}(jQuery));

/* Jquery extensions end */
