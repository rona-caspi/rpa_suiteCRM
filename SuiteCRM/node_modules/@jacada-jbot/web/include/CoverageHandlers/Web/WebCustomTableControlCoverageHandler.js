"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseCustomControlCoverageHandler_1 = require("@jacada-jbot/base/include/CoverageHandlers/BaseCustomControlCoverageHandler");
const GenericResult_1 = require("@jacada-jbot/base/include/Model/GenericResult");
const Constants_1 = require("../../Model/Constants");
class WebCustomTableControlCoverageHandler extends BaseCustomControlCoverageHandler_1.BaseCustomControlCoverageHandler {
    constructor(node) {
        super(node);
        this.type = "Table";
        this.tableType = WebCustomTableControlCoverageHandler.TABLE_TYPE_SINGLE_SELECTION;
        this.node = $(node);
        this.node.data(Constants_1.Constants.JBOT_UNIQUE_ID_KEY, this.node.getUniqueId());
    }
    /**
     * This method gets all the rows of the table, that are inside the "body" of the table
     * @returns
     */
    getTableRows() {
        if (this.node.children("tbody").length > 0) {
            return this.node.children("tbody").children("tr");
        }
        else {
            return this.node.children("tr");
        }
    }
    /**
     * This method gets the header row of the table
     * @returns
     */
    getTableHeader() {
        const $trs = this.node.children("thead").children("tr");
        return $trs[0];
    }
    /**
     * This method gets a node, and returns its' column name
     * @param node
     * @returns
     */
    getColumnName(node) {
        return $(node).text();
    }
    /**
     * This method gets the name of the field that is identified by column name and number
     * @param columnName
     * @param columnNumber
     * @returns
     */
    getFieldName(columnName, columnNumber) {
        return columnName;
    }
    /**
     * This method gets the cell that is under the given node
     * @param node
     * @returns
     */
    getCell(node) {
        return node;
    }
    /**
     *  This method updates elementNode with the specific values in order to identify the element correctly
     * @param elementNode the element node to update
     */
    updateElementRepositoryNode(elementNode) { }
    /**
     * This method indicates if this table is capturable, default value is true.
     * @returns
     */
    isCapturable() {
        if (this.tableType === WebCustomTableControlCoverageHandler.TABLE_TYPE_SINGLE_SELECTION && this.node.children("tbody").children().length > 0) {
            return true;
        }
        return false;
    }
    /**
     * Getter of attribute isExits
     * @returns true - always
     */
    isExists() {
        return new GenericResult_1.GenericResult(true, null, true);
    }
}
exports.default = WebCustomTableControlCoverageHandler;
WebCustomTableControlCoverageHandler.TABLE_TYPE_UNKNOWN = 0;
WebCustomTableControlCoverageHandler.TABLE_TYPE_GRID = 1;
WebCustomTableControlCoverageHandler.TABLE_TYPE_SINGLE_SELECTION = 2;
//# sourceMappingURL=WebCustomTableControlCoverageHandler.js.map