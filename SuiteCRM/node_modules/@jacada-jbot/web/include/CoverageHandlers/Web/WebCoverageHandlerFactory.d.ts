import CoverageHandler from "@jacada-jbot/base/include/CoverageHandlers/CoverageHandler";
import ApplicationCoverageHandler from "@jacada-jbot/base/include/CoverageHandlers/ApplicationCoverageHandler";
import CoverageHandlerFactory from "@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerFactory";
import WebApplicationCoverageHandler from "./WebApplicationCoverageHandler";
import RepositoryHandler from "@jacada-jbot/base/include/Model/RepositoryHandler";
import PlatformDriver from "@jacada-jbot/base/include/PlatformDrivers/PlatformDriver";
import ApplicationData from "@jacada-jbot/base/include/Model/ApplicationData";
import ApplicationContext from "../../Model/ApplicationContext";
import ControlCoverageHandler from "@jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler";
import { CustomControlCoverageHandler } from "@jacada-jbot/base/include/CoverageHandlers/CustomControlCoverageHandler";
import ScreenCoverageHandler from "@jacada-jbot/base/include/CoverageHandlers/ScreenCoverageHandler";
import { ListeningReporter, RecordingStepReporter } from "@jacada-jbot/base/include/Model/CustomSupportTypes";
/**
 * Factory to instantiate:
 *
 * Coverage handlers
 *
 * Repository
 *
 * PlatformDriver
 */
export default class WebCoverageHandlerFactory extends CoverageHandlerFactory {
    private tableCoverageHandlers;
    protected createControlCoverageHandler(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, factory: CoverageHandlerFactory, applicationCoverageHandler?: ApplicationCoverageHandler): ControlCoverageHandler;
    createApplicationCoverageHandler(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, factory: CoverageHandlerFactory): WebApplicationCoverageHandler;
    createScreenCoverageHandler(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, factory: CoverageHandlerFactory, applicationCoverageHandler?: ApplicationCoverageHandler): ScreenCoverageHandler;
    createCoverageHandlerByType(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, factory: CoverageHandlerFactory, controlType: string, applicationCoverageHandler?: ApplicationCoverageHandler): CoverageHandler;
    createCoverageHandlerByNode(platformDriver: PlatformDriver, repositoryHandler: RepositoryHandler, applicationData: ApplicationData, parentCoverageHandler: CoverageHandler, node: any, factory: CoverageHandlerFactory, applicationCoverageHandler?: ApplicationCoverageHandler): CoverageHandler;
    private createNewTableCustomControlInstance;
    protected populateBaseCoverageHandlerMap(): void;
    /**
     * Create a platform driver
     * @param ApplicationContext
     * @returns ChromePlatformDriver by default
     */
    createPlatformDriverOfObject(ApplicationContext: ApplicationContext): PlatformDriver;
    nodeNameToType: {
        resetInput: string;
        imageInput: string;
        button: string;
        a: string;
        ul: string;
        ol: string;
        img: string;
        div: string;
        textarea: string;
        label: string;
        input: string;
        select: string;
        table: string;
        td: string;
        form: string;
        iframe: string;
        frame: string;
        "#text": string;
    };
    inputNameToType: {
        text: string;
        button: string;
        checkbox: string;
        color: string;
        date: string;
        "datetime-local": string;
        email: string;
        file: string;
        hidden: string;
        image: string;
        month: string;
        number: string;
        password: string;
        radio: string;
        range: string;
        reset: string;
        search: string;
        submit: string;
        tel: string;
        time: string;
        url: string;
        week: string;
    };
    /**
     * Convert HTML element to our repository node type
     * @param node HTML element
     * @returns
     */
    protected nodeToNodeType(node: HTMLElement): string;
    protected getDefaultCoverageHandler(node: HTMLElement, recordingStepReporter: RecordingStepReporter, listeningReporter: ListeningReporter): CustomControlCoverageHandler;
}
