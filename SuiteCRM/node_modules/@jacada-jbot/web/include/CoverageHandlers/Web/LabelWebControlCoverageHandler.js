"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WebCustomControlCoverageHandler_1 = require("./WebCustomControlCoverageHandler");
/**
 * Coverage handler for a label
 * Label is an interesting control - It is always part of another control and connected to it either through 'for' or as its parent
 */
class LabelWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Label";
        // /**
        //  * This method creates a selector from this coverage handler to childDomNode
        //  * @param childDomNode
        //  * @param useExistingSelector
        //  * @returns a selector
        //  */
        // public createSelectorToChild(childDomNode : HTMLElement, useExistingSelector : boolean) : string {
        //     // Get our JQuery path from this element to the given child node
        //     let partialSelector : string = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        //     // As we will find ourselves, this partial selector is enough
        //     return partialSelector;
        // }
    }
    startRecording() {
        throw new Error("Method not implemented.");
    }
    areChildrenCapturable() {
        return true;
    }
    areChildrenRecordable() {
        return true;
    }
    isCapturable() {
        return false;
    }
    isRecordable() {
        return false;
    }
    isListenable() {
        return false;
    }
    updateElementRepositoryNode(elementNode) {
        const contentsText = this.getContentsText();
        //If we have content text use it otherwise leave it with value that came from web control
        if (contentsText.length > 0) {
            elementNode.name = `${this.type}_${contentsText}`;
        }
        elementNode.id = this.getId();
    }
    /**
     * This method gets our text as name for the control we label for.
     */
    getNameForPointed() {
        // Getting our text as name for the control we label for.
        // Try to see if we have text. If not, go to parent
        const contentsText = this.getContentsText();
        if (contentsText.length > 0)
            return contentsText;
        return "";
    }
    getContentsText() {
        return this.node
            .contents()
            .filter(function () {
            return this.nodeType === Node.TEXT_NODE;
        })
            .text();
    }
    getId() {
        const id = this.getContentsText();
        if (id.length > 0) {
            return id;
        }
        return this.type;
    }
}
exports.default = LabelWebControlCoverageHandler;
//# sourceMappingURL=LabelWebControlCoverageHandler.js.map