"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WebControlCoverageHandler_1 = require("./WebControlCoverageHandler");
const TableRowWebControlCoverageHandler_1 = require("./TableRowWebControlCoverageHandler");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const Constants_1 = require("@jacada-jbot/base/include/Model/Constants");
const log = Log4jConfig_1.logFactory.getLogger("TableCellWebControlCoverageHandler");
class TableCellWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    constructor() {
        super(...arguments);
        this.type = "WebTableCellControl";
    }
    /**
     * This method creates a selector from this coverage handler to childDomNode
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        let partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // As we will find ourselves, this partial selector is enough
        return partialSelector;
    }
    createElementRepositoryNode() {
        let elementNode = this.createBasicElementRepositoryNode();
        elementNode.type = this.type;
        const selectorField = elementNode.config.fields[0];
        selectorField.selector = this.createSelectorFromParentToChild(this.domNode.parentElement, this.domNode); // We need table cells' selector to be itself only, without concatenating its' parents
        this.standardizeRepositoryNodeFields(elementNode);
        elementNode.config.nodeName = this.domNode.nodeName;
        let span = 1;
        let scope;
        if (this.domNode.hasAttribute("scope")) {
            scope = this.domNode.getAttribute("scope");
        }
        if (this.domNode.hasAttribute("span")) {
            span = parseInt(this.domNode.getAttribute("span"));
        }
        else if (this.domNode.hasAttribute("colspan")) {
            span = parseInt(this.domNode.getAttribute("colspan"));
            scope = "col";
        }
        else if (this.domNode.hasAttribute("rowspan")) {
            span = parseInt(this.domNode.getAttribute("rowspan"));
            scope = "row";
        }
        elementNode.config.span = span;
        if (scope)
            elementNode.scope = scope;
        // Try getting name from the column header (if exists) <tableid>/columnname/elementId
        if (this.parentCoverageHandler instanceof TableRowWebControlCoverageHandler_1.default) {
            let tableRowCoverageHandler = this.parentCoverageHandler;
            let columnNumber = tableRowCoverageHandler.findColumnNumber(this.domNode);
            if (columnNumber >= 0) {
                elementNode.config.columnNumber = columnNumber;
                let columnName = tableRowCoverageHandler.getColumnName(columnNumber);
                if (columnName && columnName.length > 0) {
                    elementNode.name = columnName;
                    // If we have name, lets update the id as with name it will be much better to read for the user
                    let id = this.cleanId(columnName);
                    elementNode.id = this.findFreeId(id);
                }
            }
        }
        return elementNode;
    }
    getName(repositoryNode) {
        if (this.$currentNode[0].hasAttribute && this.$currentNode[0].hasAttribute("name")) {
            return this.$currentNode.attr("name");
        }
        let name = this.ownText(this.$currentNode);
        if (name.length > 0)
            return name;
        // If we have label attached, take it.
        name = this.getNameFromLabel();
        if (name.length > 0)
            return name;
        // Try to retrieve the name of an element by looking for text of the parent. This is the default. Might be different in other elements
        name = this.getNameFromParent();
        if (name.length > 0)
            return name;
        // Before giving up, try to take the id if it's already given (notice that we check explicity for Constants.AUTO_GENERATE_ID_PREFIX and not startsWith)
        if (repositoryNode.id && repositoryNode.id.length > 0 && repositoryNode.id !== Constants_1.Constants.AUTO_GENERATE_ID_PREFIX)
            return repositoryNode.id;
        return this.nodeNoName();
    }
    getParentNode() {
        return this.$currentNode.parent();
    }
    getAutoGeneratedIdPrefix() {
        return this.type;
    }
}
exports.default = TableCellWebControlCoverageHandler;
//# sourceMappingURL=TableCellWebControlCoverageHandler.js.map