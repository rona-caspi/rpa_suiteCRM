"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CoverageHandlerFactory_1 = require("@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerFactory");
const WebApplicationCoverageHandler_1 = require("./WebApplicationCoverageHandler");
const WebScreenCoverageHandler_1 = require("./WebScreenCoverageHandler");
const WebControlCoverageHandler_1 = require("./WebControlCoverageHandler");
const DivWebControlCoverageHandler_1 = require("./DivWebControlCoverageHandler");
const TextAreaWebControlCoverageHandler_1 = require("./TextAreaWebControlCoverageHandler");
const TextInputWebControlCoverageHandler_1 = require("./TextInputWebControlCoverageHandler");
const SelectWebControlCoverageHandler_1 = require("./SelectWebControlCoverageHandler");
const ButtonWebControlCoverageHandler_1 = require("./ButtonWebControlCoverageHandler");
const CheckBoxWebControlCoverageHandler_1 = require("./CheckBoxWebControlCoverageHandler");
const LabelWebControlCoverageHandler_1 = require("./LabelWebControlCoverageHandler");
const ImageButtonWebControlCoverageHandler_1 = require("./ImageButtonWebControlCoverageHandler");
const LinkWebControlCoverageHandler_1 = require("./LinkWebControlCoverageHandler");
const RadioButtonWebControlCoverageHandler_1 = require("./RadioButtonWebControlCoverageHandler");
const TableWebControlCoverageHandler_1 = require("./TableWebControlCoverageHandler");
const TableBodyCellWebControlCoverageHandler_1 = require("./TableBodyCellWebControlCoverageHandler");
const FrameWebControlCoverageHandler_1 = require("./FrameWebControlCoverageHandler");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const ChromePlatformDriver_1 = require("../../PlatformDrivers/ChromePlatformDriver");
const DefaultWebCoverageHandler_1 = require("./DefaultWebCoverageHandler");
const TextOutputWebControlCoverageHandler_1 = require("./TextOutputWebControlCoverageHandler");
const FormWebControlCoverageHandler_1 = require("./FormWebControlCoverageHandler");
const WebCustomTableControlCoverageHandler_1 = require("./WebCustomTableControlCoverageHandler");
const log = Log4jConfig_1.logFactory.getLogger("WebCoverageHandlerFactory");
/**
 * Factory to instantiate:
 *
 * Coverage handlers
 *
 * Repository
 *
 * PlatformDriver
 */
class WebCoverageHandlerFactory extends CoverageHandlerFactory_1.default {
    constructor() {
        super(...arguments);
        this.nodeNameToType = {
            resetInput: "Button",
            imageInput: "ImageButton",
            button: "Button",
            a: "Link",
            ul: "List",
            ol: "List",
            img: "Image",
            div: "Div",
            textarea: "TextArea",
            label: "Label",
            input: "TextInput",
            select: "Select",
            table: "Table",
            td: "TableBodyCell",
            form: "Form",
            iframe: "Frame",
            frame: "Frame",
            "#text": "TextOutput",
        };
        this.inputNameToType = {
            text: "TextInput",
            button: "Button",
            checkbox: "CheckBox",
            color: "ColorInput",
            date: "Date",
            "datetime-local": "Date",
            email: "TextInput",
            file: "FileInput",
            hidden: "Hidden",
            image: "ImageButton",
            month: "MonthInput",
            number: "NumberInput",
            password: "TextInput",
            radio: "RadioButton",
            range: "RangeInput",
            reset: "Button",
            search: "TextInput",
            submit: "Button",
            tel: "TelInput",
            time: "TimeInput",
            url: "TextInput",
            week: "WeekInput",
        };
    }
    createControlCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) {
        return new WebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
    }
    createApplicationCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory) {
        return new WebApplicationCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory);
    }
    createScreenCoverageHandler(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler) {
        return new WebScreenCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
    }
    createCoverageHandlerByType(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, controlType, applicationCoverageHandler) {
        log.trace("createCoverageHandlerByType.controlType =" + controlType);
        if (controlType == "Frame") {
            const frameCoverageHandler = new FrameWebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
            return frameCoverageHandler;
        }
        let customControlCoverageHandlerType = undefined;
        if (this.tableCoverageHandlers.has(controlType)) {
            let tableCoverageHandler;
            if (controlType == "Table") {
                //If it's a table we want to create it's customTableControl
                tableCoverageHandler = new TableWebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
                if (this.applicationCoverageHandlers.has(controlType)) {
                    log.trace(`control type ${controlType} is part of application coverage handlers`);
                    customControlCoverageHandlerType = this.applicationCoverageHandlers.get(controlType);
                }
                else if (this.baseCoverageHandlers.has(controlType)) {
                    log.trace(`control type ${controlType} is part of base coverage handlers`);
                    customControlCoverageHandlerType = this.baseCoverageHandlers.get(controlType);
                }
                const result = tableCoverageHandler.getNodeOnScreen();
                const node = result.success ? result.data.accessResult : null;
                tableCoverageHandler.setNode(node);
                const customTableCoverageHandler = this.createNewTableCustomControlInstance(customControlCoverageHandlerType, node);
                tableCoverageHandler.customCoverageHandler = customTableCoverageHandler;
                return tableCoverageHandler;
            }
            //If we are here, we can only create TableBodyCell
            return new TableBodyCellWebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
        }
        return super.createCoverageHandlerByType(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, controlType, applicationCoverageHandler);
    }
    createCoverageHandlerByNode(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, node, factory, applicationCoverageHandler) {
        const nodeType = this.nodeToNodeType(node);
        if (nodeType == "Frame") {
            const frameCoverageHandler = new FrameWebControlCoverageHandler_1.default(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
            return frameCoverageHandler;
        }
        else if (nodeType == "Table") {
            let foundCustomCoverageHandler = null;
            this.applicationCoverageHandlers.forEach((customCoverageHandler) => {
                log.trace(`looking for match in customCoverageHandlers`);
                if (customCoverageHandler.isMatch(node)) {
                    foundCustomCoverageHandler = this.createNewTableCustomControlInstance(customCoverageHandler, $(node));
                    return;
                }
                log.trace(`couldn't find match, continue to next CH`);
            });
            if (!foundCustomCoverageHandler) {
                let coverageHandlerBase = this.baseCoverageHandlers.get(nodeType);
                if (coverageHandlerBase) {
                    log.trace(`Found CHBase`);
                    foundCustomCoverageHandler = this.createNewTableCustomControlInstance(coverageHandlerBase, $(node));
                }
            }
            const tableCoverageHandlerType = this.tableCoverageHandlers.get(nodeType);
            const tableCoverageHandler = new tableCoverageHandlerType(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, factory, applicationCoverageHandler);
            tableCoverageHandler.customCoverageHandler = foundCustomCoverageHandler;
            return tableCoverageHandler;
        }
        else {
            return super.createCoverageHandlerByNode(platformDriver, repositoryHandler, applicationData, parentCoverageHandler, node, factory, applicationCoverageHandler);
        }
    }
    createNewTableCustomControlInstance(type, node) {
        const customCoverageHandlerObject = Object.create(type.prototype);
        const customCoverageHandlerInstance = new customCoverageHandlerObject.constructor(node);
        return customCoverageHandlerInstance;
    }
    populateBaseCoverageHandlerMap() {
        //The base map
        this.baseCoverageHandlers.set("Button", ButtonWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("CheckBox", CheckBoxWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Div", DivWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("TextArea", TextAreaWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Label", LabelWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("TextInput", TextInputWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Select", SelectWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("ImageButton", ImageButtonWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("RadioButton", RadioButtonWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Link", LinkWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("TextOutput", TextOutputWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Form", FormWebControlCoverageHandler_1.default);
        this.baseCoverageHandlers.set("Table", WebCustomTableControlCoverageHandler_1.default);
        this.tableCoverageHandlers = new Map();
        //TODO: Handle Table's coverage handlers
        this.tableCoverageHandlers.set("Table", TableWebControlCoverageHandler_1.default);
        this.tableCoverageHandlers.set("TableBodyCell", TableBodyCellWebControlCoverageHandler_1.default);
    }
    /**
     * Create a platform driver
     * @param ApplicationContext
     * @returns ChromePlatformDriver by default
     */
    createPlatformDriverOfObject(ApplicationContext) {
        return new ChromePlatformDriver_1.default(ApplicationContext);
    }
    /**
     * Convert HTML element to our repository node type
     * @param node HTML element
     * @returns
     */
    nodeToNodeType(node) {
        let lcName = node.nodeName.toLowerCase();
        if (lcName === "input") {
            let lcType = node.getAttribute("type");
            if (lcType)
                lcType = lcType.toLowerCase();
            return this.inputNameToType[lcType] || "TextInput";
        }
        else {
            return this.nodeNameToType[lcName] || node.nodeName;
        }
    }
    getDefaultCoverageHandler(node, recordingStepReporter, listeningReporter) {
        return new DefaultWebCoverageHandler_1.default(node, recordingStepReporter, listeningReporter);
    }
}
exports.default = WebCoverageHandlerFactory;
//# sourceMappingURL=WebCoverageHandlerFactory.js.map