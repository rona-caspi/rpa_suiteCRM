"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WebControlCoverageHandler_1 = require("./WebControlCoverageHandler");
class TableHeaderWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    canAccessDirectly() {
        // Depends on the parent (table)...
        return this.parentCoverageHandler.canAccessDirectly();
    }
    /**
     * This method creates a selector from this coverage handler to childDomNode
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        let partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // As we will find ourselves, this partial selector is enough
        return partialSelector;
    }
    getColumnName(columnNumber) {
        // Loop until we reach the element which covers this column
        let lastElement = null;
        let ourColumnNumber = 0;
        this.walkOnChildren(this.domNode, function (node) {
            let span = 1;
            if (ourColumnNumber > columnNumber) {
                return false; // Stop looping
            }
            else {
                if (node.hasAttribute("span")) {
                    span = parseInt(node.getAttribute("span"));
                }
                else if (node.hasAttribute("colspan")) {
                    span = parseInt(node.getAttribute("colspan"));
                }
                ourColumnNumber += span;
                // Saving this column as the last one that matched
                lastElement = node;
                // Continue indication
                return true;
            }
        });
        // This can happen if there are no columns?
        if (lastElement === null)
            return null;
        // lastElement now contains the element with the text. Let's get it's content
        return this.getColumnElementText(lastElement);
    }
    // public getColumnIndex(columnName : string) : number {
    //     // Loop until we reach the element which covers this column
    //     let result : number = -1;
    //     let ourColumnNumber : number = 0;
    //     let self = this;
    //     this.walkOnChildren(this.domNode, function (node : HTMLElement) {
    //         if (self.getColumnElementText(node) === columnName){
    //             result = ourColumnNumber;
    //             return false;       // Stop the loop
    //         }
    //         let span : number = 1 ;
    //         if (node.nodeType !== 3 && node.hasAttribute('span')){
    //             span = parseInt(node.getAttribute('span'));
    //         } else if (node.nodeType !== 3 && node.hasAttribute('colspan')){
    //             span = parseInt(node.getAttribute('colspan'));
    //         }
    //         ourColumnNumber += span;
    //         return true; // continue the loop
    //     }, true)â€‹;
    //     return result;
    // }
    getColumnElementText(nodeElement) {
        return this.customCoverageHandler.getColumnName(nodeElement);
    }
}
exports.default = TableHeaderWebControlCoverageHandler;
//# sourceMappingURL=TableHeaderWebControlCoverageHandler.js.map