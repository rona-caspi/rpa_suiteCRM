"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WebControlCoverageHandler_1 = require("./WebControlCoverageHandler");
/**
 * Coverage handler for a option element
 */
class OptionWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    type() {
        return "WebOptionControl";
    }
    /**
     * Continue to start record inner elements
     * @returns true by default
     */
    executeStartRecordingOnNode() {
        // Do not record 
        return true;
    }
    /**
      * This method creates a selector from this coverage handler to childDomNode
      * @param childDomNode
      * @param useExistingSelector
      * @returns a selector
      */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        let partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // As we will find ourselves, this partial selector is enough
        return partialSelector;
    }
    createElementRepositoryNode() {
        let elementNode = super.createElementRepositoryNode();
        elementNode.config.nodeName = this.domNode.nodeName;
        return elementNode;
    }
    /**
     * @param $elem current DOM node
     * @returns If the button has value attribute, it's the text of the button
     */
    ownText($elem) {
        return this.ownDeepText($elem);
    }
    getAutoGeneratedIdPrefix() {
        // Try to make the ID meaningful by having the right prefix when id is auto generated
        // Try to see if we have text. If not, go to parent
        let id = this.cleanId(this.ownText(this.$currentNode));
        if (id.length > 0) {
            return id;
        }
        return "Option";
    }
}
exports.default = OptionWebControlCoverageHandler;
//# sourceMappingURL=OptionWebControlCoverageHandler.js.map