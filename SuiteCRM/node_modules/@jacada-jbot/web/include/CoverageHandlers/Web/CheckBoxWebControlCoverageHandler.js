"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventDetails_1 = require("@jacada-jbot/base/include/Model/EventDetails");
const GenericResult_1 = require("@jacada-jbot/base/include/Model/GenericResult");
const LogicalAction_1 = require("@jacada-jbot/base/include/Model/LogicalAction");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const WebCustomControlCoverageHandler_1 = require("./WebCustomControlCoverageHandler");
const log = Log4jConfig_1.logFactory.getLogger("CheckBoxWebControlCoverageHandler");
/**
 * Coverage handler for a checkbox
 */
class CheckBoxWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "CheckBox";
    }
    startRecording() {
        this.recordEvent("change", (event) => {
            let lAction = new LogicalAction_1.default(this.setChecked.name, event.target.checked);
            return lAction;
        });
        return true;
    }
    subscribeToCheckedChanged() {
        this.listenToEvent("change", (event) => {
            return new EventDetails_1.default("checkedChanged", event.target.checked);
        });
    }
    /**
     * This method sets the checkbox with the given value by dispatching change event on the node
     * @param isChecked - if true the check-box will be checked otherwise unchecked
     * @returns a GenericResult struct
     */
    setChecked(isChecked) {
        this.node.prop("checked", isChecked);
        this.node[0].dispatchEvent(new Event("change"));
        return new GenericResult_1.GenericResult(true, null, null);
    }
    /**
     * This method gets the property checked of the node.
     * @returns a GenericResult struct
     */
    getChecked() {
        let isChecked = this.node.prop("checked");
        return new GenericResult_1.GenericResult(true, null, isChecked);
    }
}
exports.default = CheckBoxWebControlCoverageHandler;
//# sourceMappingURL=CheckBoxWebControlCoverageHandler.js.map