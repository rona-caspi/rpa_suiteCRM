"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventDetails_1 = require("@jacada-jbot/base/include/Model/EventDetails");
const GenericResult_1 = require("@jacada-jbot/base/include/Model/GenericResult");
const LogicalAction_1 = require("@jacada-jbot/base/include/Model/LogicalAction");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const WebCustomControlCoverageHandler_1 = require("./WebCustomControlCoverageHandler");
const log = Log4jConfig_1.logFactory.getLogger("SelectWebControlCoverageHandler");
/**
 * Coverage handler for a select
 */
class SelectWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Select";
    }
    startRecording() {
        this.recordEvent("change", (event) => {
            // Notify action in recording
            const selectedOptions = event.target.selectedOptions;
            const lAction = new LogicalAction_1.default(this.setSelectedItem.name, selectedOptions && selectedOptions.length > 0 ? selectedOptions[0].text : null);
            return lAction;
        });
        return true;
    }
    subscribeToSelectionChanged() {
        this.listenToEvent("change", (event) => {
            const selectedOptions = event.target.selectedOptions;
            return new EventDetails_1.default("selectionChanged", selectedOptions && selectedOptions.length > 0 ? selectedOptions[0].text : null);
        });
    }
    /**
     * This method sets the selected item with the given value by first using filter function to find the item, then sets the property selected
     * and in the end, dispatching change event on the node.
     * @param item - the item to select
     * @returns a GenericResult struct
     */
    setSelectedItem(item) {
        this.node
            .find("option")
            .filter(function () {
            //may want to use $.trim in here
            return $(this).text() == item;
        })
            .prop("selected", true);
        this.node[0].dispatchEvent(new Event("change"));
        return new GenericResult_1.GenericResult(true, null, item);
    }
    /**
     * This method gets the property selectedIndex of the node.
     * @returns a GenericResult struct
     */
    getSelectedIndex() {
        let index = this.node.prop("selectedIndex");
        return new GenericResult_1.GenericResult(true, null, index);
    }
    getItems() {
        const items = this.node.prop("options");
        var values = $.map(items, function (option) {
            return option.text;
        });
        return new GenericResult_1.GenericResult(true, null, values);
    }
    /**
     * This method sets the property selectedIndex with the given index.
     * @param index - the index number to set
     * @returns a GenericResult struct
     */
    setSelectedIndex(index) {
        this.node.prop("selectedIndex", index);
        return new GenericResult_1.GenericResult(true, null, null);
    }
    /**
     * This method gets the value of the node.
     * @returns a GenericResult struct
     */
    getSelectedItem() {
        let item = this.node.find("option:selected").text();
        return new GenericResult_1.GenericResult(true, null, item);
    }
}
exports.default = SelectWebControlCoverageHandler;
//# sourceMappingURL=SelectWebControlCoverageHandler.js.map