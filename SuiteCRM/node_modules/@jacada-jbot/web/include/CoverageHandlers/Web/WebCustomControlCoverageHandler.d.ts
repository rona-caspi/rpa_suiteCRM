import { CustomControlCoverageHandler } from "@jacada-jbot/base/include/CoverageHandlers/CustomControlCoverageHandler";
import LogicalAction from "@jacada-jbot/base/include/Model/LogicalAction";
import { ListeningReporter, RecordingStepReporter } from "@jacada-jbot/base/include/Model/CustomSupportTypes";
import { GenericResult } from "@jacada-jbot/base/include/Model/GenericResult";
import EventDetails from "@jacada-jbot/base/include/Model/EventDetails";
export declare abstract class WebCustomControlCoverageHandler extends CustomControlCoverageHandler {
    private recordingStepReporter;
    private listeningReporter;
    node: JQuery;
    /**
     *
     */
    constructor(node: HTMLElement, recordingStepReporter: RecordingStepReporter, listeningReporter: ListeningReporter);
    protected recordEvent<K extends keyof HTMLElementEventMap>(eventName: K, callback: (event: HTMLElementEventMap[K]) => LogicalAction): void;
    /**
     * Registers to overlayClicked event during the recording process.
     * The event will be fired when a user performs a mouse click on top of the element, preventing default action from occurring.
     * @param callback function that will be called whenever the specified event is delivered to the target
     * @param postRecordEventCallback  function that will be called right after we update JBot with callback result, coverage writer should perform the original action ( click / set text )
     */
    protected recordOverlayClickedEvent(callback: (event: Event) => LogicalAction, postRecordEventCallback: (event: Event) => void): void;
    protected listenToEvent<K extends keyof HTMLElementEventMap>(eventName: K, callback: (event: HTMLElementEventMap[K]) => EventDetails): void;
    subscribeToExistsChanged(): void;
    subsribeToDisabledChanged(): void;
    /**
     * Getter of attribute isExits
     * @returns true - always
     */
    isExists(): GenericResult;
    /**
     * Getter of attribute isDisabled
     * @returns true if the node is disabled, false otherwise
     */
    isDisabled(): GenericResult;
}
