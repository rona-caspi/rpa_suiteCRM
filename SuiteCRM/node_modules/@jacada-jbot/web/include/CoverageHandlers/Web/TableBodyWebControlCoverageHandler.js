"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WebControlCoverageHandler_1 = require("./WebControlCoverageHandler");
class TableBodyWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    type() {
        return "WebTableBodyControl";
    }
    getNodeOnScreen() {
        // If we can find ourself without relative to the previous result, great. If not,
        // ask our parent to get itself.
        // As a body, we are part of the table which is always our parent
        // Get the body row
        let tableCoverageHandler = this.parentCoverageHandler;
        let result = tableCoverageHandler.getSelectedBodyRowOnScreen();
        if (!result.success) {
            return result; // We failed to access parents path
        }
        return result;
    }
    executeStartRecordingOnNode() {
        // The body elements will do the work
        return true;
    }
    executeStartCapturingOnNode() {
        // All the headers can't be selected.
        return true;
    }
    performCapturingOnChildren() {
        return true;
    }
    createRepositoryHandler() {
        this.parentCoverageHandler.createRepositoryIfNotExists(); // Make sure the table is created as we are the child of it and relative to it.
        return super.createRepositoryHandler();
    }
    createElementRepositoryNode() {
        let elementNode = {
            id: "Body",
            name: "Body",
            type: "WebTableBodyControl",
            children: [],
            config: {}
        };
        return elementNode;
    }
    /**
     * This method creates a selector from this coverage handler to childDomNode
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        let partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // As we will find ourselves, this partial selector is enough
        return partialSelector;
    }
    findColumnNumber(elementDomNode) {
        // Find the index of the element in the list
        let columnNumber = 0;
        this.walkOnChildren(this.domNode, function (node) {
            let span = 1;
            if (node === elementDomNode) {
                return false; // Stop looping
            }
            else {
                if (node.hasAttribute('span')) {
                    span = parseInt(node.getAttribute('span'));
                }
                else if (node.hasAttribute('colspan')) {
                    span = parseInt(node.getAttribute('colspan'));
                }
                columnNumber += span;
                // Continue indication
                return true;
            }
        });
        return columnNumber;
    }
    getColumnName(columnNumber) {
        // We need to go up for the table to execute it.
        let tableCoverageHandler = this.parentCoverageHandler;
        return tableCoverageHandler.getColumnName(columnNumber);
    }
}
exports.default = TableBodyWebControlCoverageHandler;
//# sourceMappingURL=TableBodyWebControlCoverageHandler.js.map