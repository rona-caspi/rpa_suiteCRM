"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventDetails_1 = require("@jacada-jbot/base/include/Model/EventDetails");
const GenericResult_1 = require("@jacada-jbot/base/include/Model/GenericResult");
const LogicalAction_1 = require("@jacada-jbot/base/include/Model/LogicalAction");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const WebCustomControlCoverageHandler_1 = require("./WebCustomControlCoverageHandler");
const log = Log4jConfig_1.logFactory.getLogger("RadioButtonWebControlCoverageHandler");
/**
 * Coverage handler for a radio button
 */
class RadioButtonWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "RadioButton";
    }
    startRecording() {
        this.recordEvent("change", (event) => {
            let lAction = new LogicalAction_1.default(this.setChecked.name, event.target.checked);
            return lAction;
        });
        return true;
    }
    subscribeToCheckedChanged() {
        this.listenToEvent("change", (event) => {
            return new EventDetails_1.default("checkedChanged", event.target.checked);
        });
    }
    /**
     *  This method sets the radioButton  by dispatching change event on the node
     * @param isChecked if true the check-box will be checked otherwise unchecked
     * @returns a GenericResult struct
     */
    setChecked(isChecked) {
        log.debug(`Set radio button value to ${isChecked}`);
        this.node.prop("checked", isChecked);
        this.node[0].dispatchEvent(new Event("change"));
        return new GenericResult_1.GenericResult(true, null, null);
    }
    /**
     * This method gets the property checked of the node.
     * @returns a GenericResult struct
     */
    getChecked() {
        let isChecked = this.node.prop("checked");
        log.debug(`Get radio button value to ${isChecked}`);
        return new GenericResult_1.GenericResult(true, null, isChecked);
    }
    updateElementRepositoryNode(elementNode) {
        const domNode = this.node[0];
        if (domNode.hasAttribute("name")) {
            elementNode.groupName = domNode.getAttribute("name");
        }
        if (domNode.hasAttribute("value")) {
            let rbValue = domNode.getAttribute("value");
            elementNode.selectedValue = rbValue;
            elementNode.name = domNode.hasAttribute("name") ? `${domNode.getAttribute("name")}_${rbValue}` : rbValue;
        }
    }
}
exports.default = RadioButtonWebControlCoverageHandler;
//# sourceMappingURL=RadioButtonWebControlCoverageHandler.js.map