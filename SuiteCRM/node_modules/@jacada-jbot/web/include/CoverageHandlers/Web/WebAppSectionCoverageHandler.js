"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WebScreenCoverageHandler_1 = require("./WebScreenCoverageHandler");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const $ = require("jquery");
const log = Log4jConfig_1.logFactory.getLogger("WebAppSectionCoverageHandler");
/**
 * App Section is a container which is common to multiple screens.
 * App section is somewhere in the middle between screen and control however because it can be under the application (an app section which is common to all
 * screens), it must be defined as a screen.
 * As the app section is not specific to a screen, in the repository it will be under teh app or under screen-group. Therefore, it will hold
 * a property pointing to the screen it currently part of.
 * Please note that the parentCoverageHandler is NOT the screen it part of but either the App or the screen group. Therefore all calls to parent
 * go to it
 */
class WebAppSectionCoverageHandler extends WebScreenCoverageHandler_1.default {
    type() {
        return "AppSection";
    }
    createElementRepositoryNode() {
        let elementNode = super.createElementRepositoryNode();
        elementNode.id = this.sectionName;
        elementNode.config = {};
        elementNode.config.selector = this.sectionSelector; // Must be unique and not relative
        elementNode.name = this.sectionName;
        return elementNode;
    }
    isAppSectionAppear() {
        log.debug(`Searching for app section ${this.sectionSelector}`);
        if ($) {
            let $appSection = eval("$" + this.sectionSelector);
            return ($appSection.length > 0);
        }
        else {
            log.error("No JQuery found");
        }
    }
    performStartCapturing() {
        let $appSection = eval("$" + this.sectionSelector);
        if ($appSection.length > 0) {
            this.performStartCapturingOnNode($appSection[0]);
        }
        return this.returnSuccess(`App section started capturing`);
    }
    performStartRecording() {
        let $appSection = eval("$" + this.sectionSelector);
        if ($appSection.length > 0) {
            this.performStartRecordingOnNode($appSection[0]);
        }
        return this.returnSuccess('');
    }
    registerControlForHighlight(controlCoverageHandler, $elem, functionHandler) {
        // The current screen handles the highlight
        this.mainScreen.registerControlForHighlight(controlCoverageHandler, $elem, functionHandler);
    }
    /**
     * Check if this app section is same as the given repository
     */
    validateAppSection(repositoryHandler) {
        if (this.isAppSectionAppear()) {
            // By default, checking that the unique id is the same
            if (this.sectionName === repositoryHandler.id) {
                return this.returnSuccess(`Same app section ${this.screenName}`);
            }
        }
        return this.returnFailure(`Not an app section ${this.screenName}`);
    }
}
exports.default = WebAppSectionCoverageHandler;
//# sourceMappingURL=WebAppSectionCoverageHandler.js.map