"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventDetails_1 = require("@jacada-jbot/base/include/Model/EventDetails");
const GenericResult_1 = require("@jacada-jbot/base/include/Model/GenericResult");
const LogicalAction_1 = require("@jacada-jbot/base/include/Model/LogicalAction");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const WebCustomControlCoverageHandler_1 = require("./WebCustomControlCoverageHandler");
const log = Log4jConfig_1.logFactory.getLogger("TextInputWebControlCoverageHandler");
/**
 * Coverage handler for a text input
 */
class TextInputWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "TextInput";
    }
    startRecording() {
        this.recordEvent("change", (event) => {
            // Notify action in recording
            let lAction = new LogicalAction_1.default(this.setText.name, event.target.value);
            return lAction;
        });
        return true;
    }
    subscribeToTextChanged() {
        this.listenToEvent("change", (event) => {
            return new EventDetails_1.default("textChanged", event.target.value);
        });
    }
    /**
     * This method gets the value of the node.
     * @returns a GenericResult struct
     */
    getText() {
        let text = this.node.val();
        return new GenericResult_1.GenericResult(true, null, text);
    }
    /**
     * This method sets the value with the given text by dispatching change event on the node.
     * @param text - the text to set
     * @returns a GenericResult struct
     */
    setText(text) {
        this.node.val(text);
        this.node[0].dispatchEvent(new Event("change"));
        return new GenericResult_1.GenericResult(true, null, text);
    }
    isRecordable() {
        return this.node[0].getAttribute("type") != "password";
    }
}
exports.default = TextInputWebControlCoverageHandler;
//# sourceMappingURL=TextInputWebControlCoverageHandler.js.map