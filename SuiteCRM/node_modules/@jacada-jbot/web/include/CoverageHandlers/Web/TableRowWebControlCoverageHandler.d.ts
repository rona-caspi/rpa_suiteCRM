import WebControlCoverageHandler from "./WebControlCoverageHandler";
import { GenericResult } from "@jacada-jbot/base/include/Model/GenericResult";
import { CriteriaData, RowFieldsData, FieldsSetData } from "@jacada-jbot/base/include/Model/TableData";
import WebCustomTableControlCoverageHandler from "./WebCustomTableControlCoverageHandler";
import ControlCoverageHandler from "@jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler";
import RepositoryHandler from "@jacada-jbot/base/include/Model/RepositoryHandler";
export default class TableRowWebControlCoverageHandler extends WebControlCoverageHandler {
    customCoverageHandler: WebCustomTableControlCoverageHandler;
    /**
     * This method executes the requested get actions on fields inside a table row
     * @param fields the data containing the pathId and attributes
     * @returns a GenericResult struct with the required data inside the Data (of the GenericResult)
     */
    executeGetOnRow(fields: RowFieldsData[]): GenericResult;
    /**
     * This method executes the requested set actions on fields inside a table row
     * @param {FieldsSetData[]} fields - holds the data to set on each cell
     * @return {*}  {GenericResult}
     * @memberof TableRowWebControlCoverageHandler
     */
    executeSetOnRow(fields: FieldsSetData[]): GenericResult;
    /**
     * This method creates the cell coverage handler inside the row
     * @private
     * @param {ElementPath} elementPath - the path to the cell
     * @return {*}  {GenericResult} the created cell coverage handler inside GenericResult data
     */
    private createCellCoverageHandler;
    /**
     * This method gets a criteria and checks if this row meets the criteria
     * @param {CriteriaData} criteria
     * @return {*}  {GenericResult} a GenericResult struct with value true in the data if the row meets the criteria, false otherwise
     * @memberof TableRowWebControlCoverageHandler
     */
    checkRowCriteria(criteria: CriteriaData): GenericResult;
    /**
     * Walking on each table data and find fields and add their path into fieldsPathIds
     * @param fieldsPathIds
     * @returns
     */
    collectFieldsPathIds(fieldsPathIds: string[]): boolean;
    private setFieldName;
    /**
     * This method creates a selector from this coverage handler to childDomNode
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode: HTMLElement, useExistingSelector: boolean): string;
    findColumnNumber(elementDomNode: HTMLElement): number;
    getColumnName(columnNumber: number): string;
    /**
     * This method decide if to add this control coverage into repository
     * @returns false by default
     */
    isNodeToBeAddedToRepository(): boolean;
    /**
     * This function needs to be override because this CH is not added to repository, so we only have to continue to parent
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns
     */
    addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode: any, childCoverageHandler: ControlCoverageHandler): RepositoryHandler;
    canAccessDirectly(): boolean;
    getNode(): GenericResult;
}
