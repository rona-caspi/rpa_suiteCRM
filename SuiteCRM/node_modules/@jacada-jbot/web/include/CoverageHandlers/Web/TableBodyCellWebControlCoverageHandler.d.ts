import ElementPath from "@jacada-jbot/base/include/Model/ElementPath";
import { GenericResult } from "@jacada-jbot/base/include/Model/GenericResult";
import TableCellWebControlCoverageHandler from "./TableCellWebControlCoverageHandler";
import { CriteriaData, FieldsSetData } from "@jacada-jbot/base/include/Model/TableData";
import ControlCoverageHandler from "@jacada-jbot/base/include/CoverageHandlers/ControlCoverageHandler";
import RepositoryHandler from "@jacada-jbot/base/include/Model/RepositoryHandler";
export default class TableBodyCellWebControlCoverageHandler extends TableCellWebControlCoverageHandler {
    type: string;
    /**
     * This method executes the requested get actions on fields inside the table cell
     * @param elementPath - the path to the element
     * @param attrs - attributes to get value
     * @returns The requested attributes values inside GenericResult data
     */
    executeGetOnCell(elementPath: ElementPath, attrs: {
        [attribute: string]: string;
    }[]): GenericResult;
    /**
     * This method executes the requested set action on fields inside the table cell
     * @param {ElementPath} elementPath - the path to the element
     * @param {FieldsSetData} field - the data for setting the new value
     * @return {*}  {GenericResult}
     * @memberof TableBodyCellWebControlCoverageHandler
     */
    executeSetOnCell(elementPath: ElementPath, field: FieldsSetData): GenericResult;
    /**
     * This method creates the control coverage handler inside the cell
     * @private
     * @param {ElementPath} elementPath - the path to the control
     * @return {*}  {GenericResult} the created control coverage handler inside GenericResult data
     */
    private createControlCoverageHandler;
    /**
     * This method compares the given field value with the value in the criteria according to the operation required
     * @param {ElementPath} elementPath
     * @param {CriteriaData} criteria
     * @return {*}  {boolean} true if the value answers the criteria, false otherwise
     * @memberof TableBodyCellWebControlCoverageHandler
     */
    checkFieldData(elementPath: ElementPath, criteria: CriteriaData): boolean;
    /**
     * This function needs to be override because it is always added to repository
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns
     */
    addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode: any, childCoverageHandler: ControlCoverageHandler): RepositoryHandler;
}
