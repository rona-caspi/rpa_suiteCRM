"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GenericResult_1 = require("@jacada-jbot/base/include/Model/GenericResult");
const TableCellWebControlCoverageHandler_1 = require("./TableCellWebControlCoverageHandler");
const Constants_1 = require("@jacada-jbot/base/include/Model/Constants");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const Operations_1 = require("@jacada-jbot/base/include/Model/Operations");
const log = Log4jConfig_1.logFactory.getLogger("TableBodyCellWebControlCoverageHandler");
class TableBodyCellWebControlCoverageHandler extends TableCellWebControlCoverageHandler_1.default {
    constructor() {
        super(...arguments);
        this.type = "TableBodyCell";
    }
    /**
     * This method executes the requested get actions on fields inside the table cell
     * @param elementPath - the path to the element
     * @param attrs - attributes to get value
     * @returns The requested attributes values inside GenericResult data
     */
    executeGetOnCell(elementPath, attrs) {
        log.trace(`Inside executeGetOnCell`);
        let responseData = {};
        let result = this.createControlCoverageHandler(elementPath);
        // If the element does not exist in the cell - no need to return other attributes values
        if (!result.success) {
            return this.returnSuccess({ exists: false });
        }
        const controlCoverageHandler = result.data;
        Object.keys(attrs).forEach((action) => {
            let actionKey = attrs[action];
            log.debug(`Getting value for attribute name: ${actionKey}`);
            //running the action
            if (controlCoverageHandler.customCoverageHandler[action]) {
                result = controlCoverageHandler.customCoverageHandler[action].apply(controlCoverageHandler.customCoverageHandler);
                if (!result.success)
                    return new GenericResult_1.GenericResult(false, `There was an error during execution ${action} on element ${elementPath._elementPathId}`, Constants_1.Constants.GENERIC_EXCEPTION);
                let attrValue = result.data;
                responseData[actionKey] = attrValue;
            }
            else {
                log.error(`Control coverage handler ${controlCoverageHandler.repositoryHandler.name} does not implement action ${action}`);
                return new GenericResult_1.GenericResult(false, `Invalid action ${action} on element ${elementPath._elementPathId}`, Constants_1.Constants.TYPE_MISMATCH_EXCEPTION);
            }
        });
        return this.returnSuccess(responseData);
    }
    /**
     * This method executes the requested set action on fields inside the table cell
     * @param {ElementPath} elementPath - the path to the element
     * @param {FieldsSetData} field - the data for setting the new value
     * @return {*}  {GenericResult}
     * @memberof TableBodyCellWebControlCoverageHandler
     */
    executeSetOnCell(elementPath, field) {
        log.trace("Inside executeSetOnCell");
        let result = this.createControlCoverageHandler(elementPath);
        if (!result.success)
            return result;
        const controlCoverageHandler = result.data;
        if (controlCoverageHandler.customCoverageHandler[field.setter]) {
            result = controlCoverageHandler.customCoverageHandler[field.setter].apply(controlCoverageHandler.customCoverageHandler, [field.value]);
            if (!result.success)
                return new GenericResult_1.GenericResult(false, `There was an error during execution ${field.setter} on element ${elementPath._elementPathId}`, Constants_1.Constants.GENERIC_EXCEPTION);
        }
        return this.returnSuccess();
    }
    /**
     * This method creates the control coverage handler inside the cell
     * @private
     * @param {ElementPath} elementPath - the path to the control
     * @return {*}  {GenericResult} the created control coverage handler inside GenericResult data
     */
    createControlCoverageHandler(elementPath) {
        let result = this.getCoverageHandlerByNextPath(elementPath);
        while (!elementPath.isLast()) {
            result = result.data.coverageHandler.getCoverageHandlerByNextPath(elementPath);
            if (!result.success)
                return result;
        }
        if (!result.success)
            return result;
        const controlCoverageHandler = result.data.coverageHandler;
        if (!controlCoverageHandler.customCoverageHandler.node.length) {
            return new GenericResult_1.GenericResult(false, `Could not find element ${elementPath._elementPathId}`, Constants_1.Constants.ELEMENT_NOT_FOUND_EXCEPTION);
        }
        return this.returnSuccess(controlCoverageHandler);
    }
    /**
     * This method compares the given field value with the value in the criteria according to the operation required
     * @param {ElementPath} elementPath
     * @param {CriteriaData} criteria
     * @return {*}  {boolean} true if the value answers the criteria, false otherwise
     * @memberof TableBodyCellWebControlCoverageHandler
     */
    checkFieldData(elementPath, criteria) {
        log.trace("Inside checkFieldData");
        let attributes = [];
        attributes[criteria.getter] = criteria.getter;
        const result = this.executeGetOnCell(elementPath, attributes);
        if (!result.success)
            return false;
        switch (criteria.operation) {
            case Operations_1.Operations.EQUALS:
                if (result.data[criteria.getter] === criteria.value) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.NOT_EQUALS:
                if (result.data[criteria.getter] !== criteria.value) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.CONTAINS:
                if (result.data[criteria.getter].includes(criteria.value)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.NOT_CONTAIN:
                if (!result.data[criteria.getter].includes(criteria.value)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.START_WITH:
                if (result.data[criteria.getter].startsWith(criteria.value, 0)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.NOT_START_WITH:
                if (!result.data[criteria.getter].startsWith(criteria.value, 0)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.END_WITH:
                if (result.data[criteria.getter].endsWith(criteria.value)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.NOT_END_WITH:
                if (!result.data[criteria.getter].endsWith(criteria.value)) {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.IS_EMPTY:
                if (result.data[criteria.getter] === "") {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
            case Operations_1.Operations.IS_NOT_EMPTY:
                if (result.data[criteria.getter] !== "") {
                    log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} matches the field`);
                    return true;
                }
                break;
        }
        log.debug(`Criteria with operation ${criteria.operation} and value ${criteria.value} doesn't match the field`);
        return false;
    }
    /**
     * This function needs to be override because it is always added to repository
     * @param childRepositoryNode
     * @param childCoverageHandler
     * @returns
     */
    addChildRepositoryNodeToOurselvesRecursively(childRepositoryNode, childCoverageHandler) {
        return this.addChildRepositoryNodeToOurselves(childRepositoryNode, childCoverageHandler);
    }
}
exports.default = TableBodyCellWebControlCoverageHandler;
//# sourceMappingURL=TableBodyCellWebControlCoverageHandler.js.map