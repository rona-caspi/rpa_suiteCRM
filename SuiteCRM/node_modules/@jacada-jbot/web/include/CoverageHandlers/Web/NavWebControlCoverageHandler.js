"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WebControlCoverageHandler_1 = require("./WebControlCoverageHandler");
/**
 * Coverage handler for a navigation element
 */
class NavWebControlCoverageHandler extends WebControlCoverageHandler_1.default {
    type() {
        return "WebNavControl";
    }
    /**
     * Start listening on click for recording process
     * @returns
     */
    executeStartRecordingOnNode() {
        return true;
    }
    /**
     * Start listening on click for capturing process
     * @returns
     */
    executeStartCapturingOnNode() {
        return true;
    }
    isNodeToBeAddedToRepository() {
        return false;
    }
    /**
     * This method creates a selector from this coverage handler to childDomNode
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode, useExistingSelector) {
        // Get our JQuery path from this element to the given child node
        let partialSelector = this.createSelectorFromParentToChild(this.domNode, childDomNode);
        // As we will find ourselves, this partial selector is enough
        return partialSelector;
    }
    createElementRepositoryNode() {
        let elementNode = super.createElementRepositoryNode();
        if (this.domNode.hasAttribute("value")) {
            elementNode.selectedValue = this.domNode.getAttribute("value");
        }
        if (this.domNode.hasAttribute("name")) {
            elementNode.groupName = this.domNode.getAttribute("name");
        }
        return elementNode;
    }
    getAutoGeneratedIdPrefix() {
        return "NavigationBar";
    }
}
exports.default = NavWebControlCoverageHandler;
//# sourceMappingURL=NavWebControlCoverageHandler.js.map