"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCoveredApp = void 0;
const WebCoverageHandlerFactory_1 = require("./WebCoverageHandlerFactory");
const ApplicationContext_1 = require("../../Model/ApplicationContext");
const InboundHandlersFactory_1 = require("../../PlatformDrivers/InboundHandlersFactory");
const WebLogger_1 = require("../../Utils/WebLogger");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const CoverageHandlerCreator_1 = require("@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator");
const log = Log4jConfig_1.logFactory.getLogger("WebCoverageHandlerCreator");
/**
 * Creator to application coverage handler
 */
class WebCoverageHandlerCreator {
    /**
     * Entry point function
     *
     *Includes: initialized  logger, factory, creator, application context & inbound handlers factory
     */
    static init() {
        return new Promise((resolve) => {
            chrome.storage.local.get(["logLevel"], (result) => {
                let logger = new WebLogger_1.default(result.logLevel);
                let factory = new WebCoverageHandlerFactory_1.default();
                let applicationContext = new ApplicationContext_1.default(logger);
                this.inboundHandlersFactory = new InboundHandlersFactory_1.default(applicationContext);
                (0, CoverageHandlerCreator_1.setCoverageHandlerFactory)(factory);
                resolve();
            });
        });
    }
}
exports.default = WebCoverageHandlerCreator;
async function createCoveredApp(coveredApplication) {
    await WebCoverageHandlerCreator.init();
    let factory = (0, CoverageHandlerCreator_1.getCoverageHandlerFactory)();
    factory.addApplicationCoverageHandlers(coveredApplication.coverageHandlers);
}
exports.createCoveredApp = createCoveredApp;
createCoveredApp({ coverageHandlers: [] });
//# sourceMappingURL=WebCoverageHandlerCreator.js.map