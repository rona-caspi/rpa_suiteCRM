import WebControlCoverageHandler from "./WebControlCoverageHandler";
import { GenericResult } from "@jacada-jbot/base/include/Model/GenericResult";
import TableHeaderWebControlCoverageHandler from "./TableHeaderWebControlCoverageHandler";
import TableRowWebControlCoverageHandler from "./TableRowWebControlCoverageHandler";
import { TableDataGetter, TableDataSetter } from "@jacada-jbot/base/include/Model/TableData";
import WebCustomTableControlCoverageHandler from "./WebCustomTableControlCoverageHandler";
import ExecutionLogicalAction from "@jacada-jbot/base/include/Model/ExecutionLogicalAction";
import ElementPath from "@jacada-jbot/base/include/Model/ElementPath";
export default class TableWebControlCoverageHandler extends WebControlCoverageHandler {
    static ACTION_SELECT_FIRST: string;
    static ACTION_SELECT_LAST: string;
    numberOfColumns: number;
    numberOfHeaderRows: number;
    numberOfTRInBodyRow: number;
    customCoverageHandler: WebCustomTableControlCoverageHandler;
    headerCoverageHandler: TableHeaderWebControlCoverageHandler;
    rowCoverageHandler: TableRowWebControlCoverageHandler;
    currentRow: number;
    fieldsPathIds: string[];
    type: string;
    /**
     * This method gets a list of rows and fields, and returns the corresponding data from the table.
     * @param tableData - the data to get from the table, of type TableDataGetter
     * @returns a GenericResult struct with the required data inside the Data (of the GenericResult)
     */
    getTableDataByRange(tableData: TableDataGetter): GenericResult;
    /**
     * This method gets a list of rows and fields, and returns the corresponding data from the table.
     * @param tableData - the data to get from the table, of type TableDataGetter
     * @returns a GenericResult struct with the required data inside the Data (of the GenericResult)
     */
    getTableDataByField(tableData: TableDataGetter): GenericResult;
    /**
     * This method gets a list of rows and fields, and sets the corresponding data on the table.
     * @param {TableDataSetter[]} tableData - the data to set on the table, of type TableDataSetter
     * @return {*}  {GenericResult}
     * @memberof TableWebControlCoverageHandler
     */
    setTableData(tableData: TableDataSetter[]): GenericResult;
    private walkOnRows;
    /**
     * @temp
     * This method gets tableData which holds absolute paths inside, and turns it into relative paths to the table.
     * @param tableData - the data to change
     */
    private makeRelativePaths;
    private makeSingleRelativePath;
    /**
     * This method gets the number of all rows in the table.
     * @private
     * @return {*}  {number} the number of rows
     * @memberof TableWebControlCoverageHandler
     */
    private getNumberOfRows;
    /**
     * This method gets the node of the current selected row
     * @returns the node of the row
     */
    private getSelectedBodyRowOnScreen;
    performStartRecording(): GenericResult;
    performStartCapturing(): GenericResult;
    /**
     * This method executes the action received
     * @param lAction - the action to execute
     * @returns a GenericResult struct
     */
    protected executingAction(lAction: ExecutionLogicalAction, elementPath: ElementPath): GenericResult;
    /**
     * This method will add the the given repository node to it's parent in the repository, or updates the existing one.
     * @private
     * @param {*} previousRepositoryNode
     * @memberof TableWebControlCoverageHandler
     */
    private addOrUpdateRepositoryNodes;
    /**
     * This method creates coverageHandler for the rows and header
     */
    private createTableHeaderAndRowCoverageHandlers;
    /**
     * This method gets a headerRow node a creates a coverage handler
     * @param headerRow
     */
    private createTableHeaderCoverageHandler;
    /**
     * This method gets a node of the row, and creates a coverageHandler.
     * @param bodyRow - the node of the row
     */
    private createTableRowCoverageHandler;
    walkOnChildren(parentNode: any, func: any): void;
    protected performCapturingOnChildren(): boolean;
    /**
     * This method creates a selector from the nodes' parent to the node itself
     * @param childDomNode
     * @param useExistingSelector
     * @returns a selector
     */
    createSelectorToChild(childDomNode: HTMLElement, useExistingSelector: boolean): string;
    createElementRepositoryNode(): any;
    getName(repositoryNode: any): string;
    getAutoGeneratedIdPrefix(): string;
    getColumnName(columnNumber: number): string;
}
