"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventDetails_1 = require("@jacada-jbot/base/include/Model/EventDetails");
const GenericResult_1 = require("@jacada-jbot/base/include/Model/GenericResult");
const LogicalAction_1 = require("@jacada-jbot/base/include/Model/LogicalAction");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const WebCustomControlCoverageHandler_1 = require("./WebCustomControlCoverageHandler");
const log = Log4jConfig_1.logFactory.getLogger("LinkWebControlCoverageHandler");
/**
 * Coverage handler for a link element
 */
class LinkWebControlCoverageHandler extends WebCustomControlCoverageHandler_1.WebCustomControlCoverageHandler {
    constructor() {
        super(...arguments);
        this.type = "Link";
    }
    startRecording() {
        this.recordOverlayClickedEvent((event) => {
            log.debug(`URL: ${window.location.href}`);
            const lAction = new LogicalAction_1.default(this.click.name, "");
            return lAction;
        }, (event) => {
            this.click();
        });
        return true;
    }
    subscribeToClickedEvent() {
        this.listenToEvent("click", (event) => {
            return new EventDetails_1.default("clicked");
        });
    }
    /**
     * This method fires a click event on the jquery object
     * @returns a GenericResult struct
     */
    click() {
        this.node[0].click();
        return new GenericResult_1.GenericResult(true, null, null);
    }
    updateElementRepositoryNode(elementNode) {
        elementNode.name = this.getName();
    }
    getName() {
        const walker = document.createTreeWalker(this.node[0], NodeFilter.SHOW_TEXT);
        const nodesText = [];
        while (walker.nextNode()) {
            nodesText.push(walker.currentNode.textContent.trim());
        }
        // Join all texts with a space between them
        return nodesText.join(" ");
    }
}
exports.default = LinkWebControlCoverageHandler;
//# sourceMappingURL=LinkWebControlCoverageHandler.js.map