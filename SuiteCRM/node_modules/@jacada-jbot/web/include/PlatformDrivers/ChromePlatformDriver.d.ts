import RepositoryHandler from "@jacada-jbot/base/include/Model/RepositoryHandler";
import PlatformDriver from "@jacada-jbot/base/include/PlatformDrivers/PlatformDriver";
import LogicalAction from "@jacada-jbot/base/include/Model/LogicalAction";
import ExecutionLogicalAction from "@jacada-jbot/base/include/Model/ExecutionLogicalAction";
import ApplicationContext from "../Model/ApplicationContext";
import OutboundHandlersFactory from "./OutboundHandlersFactory";
import ListeningInfo from "@jacada-jbot/base/include/Model/ListeningInfo";
import { GenericResult } from "@jacada-jbot/base/include/Model/GenericResult";
export declare const MESSAGE_TREE_CHANGED: string;
/**
 * A platform driver for chrome browser which represent
 * layer between coverage handler to chrome extension includes support of iFrames
 */
export default class ChromePlatformDriver extends PlatformDriver {
    private applicationContext;
    static MESSAGE_START_LISTENING_ON_CHANGES_IN_FRAME: string;
    static MESSAGE_STOP_LISTENING_ON_FRAME: string;
    static FRAME_EXEC_NODE_ON_SCREEN_COMPLETED_MESSAGE: string;
    static FRAME_CAPTURED_ELEMENT_MESSAGE: string;
    static FRAME_CAPTURED_TABLE_MESSAGE: string;
    static FRAME_RECORDED_ELEMENT_MESSAGE: string;
    static FRAME_LISTENED_ELEMENT_MESSAGE: string;
    static FRAME_TREE_CHANGED_MESSAGE: string;
    static FRAME_TRIGGER_FIRED_MESSAGE: string;
    static REGISTER_FRAME_MESSAGE: string;
    static SYNC_FRAME_IDS_MESSAGE: string;
    outboundHandlersFactory: OutboundHandlersFactory;
    constructor(applicationContext: ApplicationContext);
    /**
     * Sends updated repository tree to extension
     * @remark in case we are inside iFrame send a post message that to parent window
     * @param repositoryHandler
     */
    reportTreeChanged(repositoryHandler: RepositoryHandler): void;
    /**
     * Send a captured element to chrome extension
     *
     * Note: in case we are inside iFrame send a post message to parent window
     * @param pathId path to element
     * @param snapshot screen snapshot
     * @param coordinates element's coordinates
     */
    reportCapturedTable(pathId: string, fieldsPathIds: string[], snapshot?: string, coordinates?: number[]): boolean;
    /**
     * @returns true if current window is an iFrame otherwise false
     */
    private isFrame;
    /**
     * In case we have iFrames below us, we will receive capture events from it to here
     */
    private registerForFrameMessages;
    /**
     * window's messages event handler
     * @param event
     */
    private frameMessages;
    /**
     * Send a recorded step to chrome extension
     * @remark in case we are inside iFrame send a post message to parent window
     * @param logicalAction action name such a click and its data if it exists
     * @param pathId path to element
     * @param snapshot screen snapshot
     * @param coordinates element coordinates
     */
    reportRecordedStep(logicalAction: LogicalAction, pathId: string, snapshot?: string, coordinates?: number[]): void;
    /**
     * Send a message to extension to perform active tab snapshot
     * @param responseCallback a callback function is called when the snapshot is ready
     */
    createSnapshot(responseCallback?: (response: any) => void): void;
    /**
     * Send a captured element to chrome extension
     * @remark in case we are inside iFrame send a post message to parent window
     * @param pathId path to element
     * @param snapshot screen snapshot
     * @param coordinates element's coordinates
     */
    reportCapturedElement(pathId: string, snapshot?: string, coordinates?: number[]): boolean;
    /**
     * Request for specific iFrame to start record
     * @param frameGuid iFrame's unique id
     */
    startRecordingOnFrame(frameGuid: string): void;
    /**
     * Request for specific iFrame to start listening
     * @param frameGuid iFrame's unique id
     * @param listeningInfo listening information
     */
    startListeningOnFrame(frameGuid: string, listeningInfo: ListeningInfo): void;
    /**
     * Request for specific iFrame to stop listening
     * @param frameGuid iFrame's unique id
     */
    stopListeningOnFrame(frameGuid: string): void;
    /**
     * Request for specific iFrame to start capturing
     * @param frameGuid iFrame's unique id
     * @returns
     */
    startCaptureOnFrame(frameGuid: string): void;
    /**
     * Search and synchronize iFrames elements
     */
    syncFrameIds(): void;
    /**
     * Execution has completed in iFrame notify parent window
     */
    execOnFrameCompleted(result: GenericResult): void;
    /**
     * Send a message to chrome extension that trigger was fired
     * @remark in case we are inside iFrame send a post message to parent window
     * @param pathId path of element that fire the trigger
     * @param trigger name of the trigger
     */
    reportTriggerFired(pathId: string, trigger: string): boolean;
    /**
     * Send a message to chrome extension that attribute/value has changed
     * @remark in case we are inside iFrame send a post message to parent window
     * @param pathId path of element that fire the trigger
     * @param attribute name of the trigger
     * @param newValue new value of attribute
     */
    reportChangedElement(pathId: string, attribute: string, newValue: unknown): boolean;
    /**
     * Perform an action on element(pathId) in specific iFrame
     * @param guid iFrame's unique id
     * @param pathId element path
     * @param executionLogicalAction action's information
     * @param validateOnly if true just verify that element exists on the current screen without perform any action otherwise perform an action
     */
    execNextNodeOnScreenOnFrame(guid: string, pathId: string, executionLogicalAction: ExecutionLogicalAction, validateOnly: boolean): void;
}
