"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MESSAGE_TREE_CHANGED = void 0;
const PlatformDriver_1 = require("@jacada-jbot/base/include/PlatformDrivers/PlatformDriver");
const FrameWebControlCoverageHandler_1 = require("../CoverageHandlers/Web/FrameWebControlCoverageHandler");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const OutboundHandlersFactory_1 = require("./OutboundHandlersFactory");
const log = Log4jConfig_1.logFactory.getLogger("ChromePlatformDriver");
const MESSAGE_CREATE_SNAPSHOT = "createSnapshot";
const MESSAGE_RECORDED_ELEMENT = "recordedElement";
exports.MESSAGE_TREE_CHANGED = "treeChanged";
const MESSAGE_CAPTURED_ELEMENT = "capturedElement";
/**
 * A platform driver for chrome browser which represent
 * layer between coverage handler to chrome extension includes support of iFrames
 */
class ChromePlatformDriver extends PlatformDriver_1.default {
    constructor(applicationContext) {
        super();
        this.applicationContext = applicationContext;
        this.outboundHandlersFactory = new OutboundHandlersFactory_1.default(applicationContext);
        // Prepare ourselves to receive messages
        this.registerForFrameMessages();
        // Create ids for all our iFrames and sync them with their children.
        this.syncFrameIds();
    }
    /**
     * Sends updated repository tree to extension
     * @remark in case we are inside iFrame send a post message that to parent window
     * @param repositoryHandler
     */
    reportTreeChanged(repositoryHandler) {
        log.trace(`ReportTreeChanged: Respiratory tree is: ${JSON.stringify(repositoryHandler._repository.tree)}`);
        this.applicationContext.appRepositoryNode = repositoryHandler._repository.tree;
        if (this.isFrame()) {
            let frameGuid = this.applicationContext.myFrameGuid;
            let applicationHandlerNode = repositoryHandler.applicationHandler().currentNode;
            if (frameGuid) {
                window.parent.postMessage({
                    message: exports.MESSAGE_TREE_CHANGED,
                    frameGuid: frameGuid,
                    applicationHandlerNode: applicationHandlerNode
                }, "*");
            }
        }
        else {
            log.debug('Sending tree to background');
            chrome.runtime.sendMessage({
                service: "treeChanged",
                tree: repositoryHandler._repository.tree
            });
        }
    }
    /**
     * Send a captured element to chrome extension
     *
     * Note: in case we are inside iFrame send a post message to parent window
     * @param pathId path to element
     * @param snapshot screen snapshot
     * @param coordinates element's coordinates
     */
    reportCapturedTable(pathId, fieldsPathIds, snapshot, coordinates) {
        log.debug(`Reporting captured table. Path ${pathId}`);
        // If we are a frame, we need to continue at the parent
        if (this.isFrame()) {
            log.debug("reportCapturedElement: Goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_CAPTURED_TABLE_MESSAGE,
                    frameGuid: frameGuid,
                    pathId: pathId,
                    fieldsPathIds: fieldsPathIds,
                    snapshot: snapshot,
                    coordinates: coordinates
                }, "*");
            }
            else {
                log.error("Error: In frame but no guid");
            }
            return false; // We are a frame. Not finished yet
        }
        else {
            // We are the top - report to extension
            chrome.runtime.sendMessage({
                service: "capturedTable",
                pathId: pathId,
                fieldsPathIds: fieldsPathIds,
                snapshot: snapshot,
                coordinates: coordinates
            });
            return true; // We are the top. Reporting completed
        }
    }
    /**
     * @returns true if current window is an iFrame otherwise false
     */
    isFrame() {
        return window.parent !== window;
    }
    /**
     * In case we have iFrames below us, we will receive capture events from it to here
     */
    registerForFrameMessages() {
        window.addEventListener("message", this.frameMessages.bind(this), false);
    }
    /**
     * window's messages event handler
     * @param event
     */
    frameMessages(event) {
        var data = event.data;
        if (!data)
            return;
        log.debug(`frameMessages: Message is:${data.message}`);
        let handler = this.outboundHandlersFactory[data.message];
        if (typeof handler !== "function") {
            log.error(`Could not find handler for ${data.message}`);
            return;
        }
        handler(data);
    }
    /**
     * Send a recorded step to chrome extension
     * @remark in case we are inside iFrame send a post message to parent window
     * @param logicalAction action name such a click and its data if it exists
     * @param pathId path to element
     * @param snapshot screen snapshot
     * @param coordinates element coordinates
     */
    reportRecordedStep(logicalAction, pathId, snapshot, coordinates) {
        log.debug(`PlatformDriver: Reporting recording step on: ${pathId}`);
        log.debug(`Action: ${logicalAction.actionName}`);
        log.debug(`Action value: ${JSON.stringify(logicalAction.value)}`);
        if (this.isFrame()) {
            log.debug("reportRecordedStep: goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_RECORDED_ELEMENT_MESSAGE,
                    frameGuid: frameGuid,
                    logicalAction: logicalAction.toJSON(),
                    pathId: pathId,
                    snapshot: snapshot,
                    coordinates: coordinates
                }, "*");
            }
            else {
                log.error("In frame but no guid");
            }
        }
        else {
            chrome.runtime.sendMessage({
                service: "recordedElement",
                logicalAction: JSON.stringify(logicalAction),
                pathId: pathId,
                snapshot: snapshot,
                coordinates: coordinates
            });
        }
    }
    /**
     * Send a message to extension to perform active tab snapshot
     * @param responseCallback a callback function is called when the snapshot is ready
     */
    createSnapshot(responseCallback) {
        log.debug("Send request to create snapshot.");
        chrome.runtime.sendMessage({
            service: MESSAGE_CREATE_SNAPSHOT
        }, responseCallback);
    }
    /**
     * Send a captured element to chrome extension
     * @remark in case we are inside iFrame send a post message to parent window
     * @param pathId path to element
     * @param snapshot screen snapshot
     * @param coordinates element's coordinates
     */
    reportCapturedElement(pathId, snapshot, coordinates) {
        log.debug(`Reporting captured element. Path ${pathId}`);
        // If we are a frame, we need to continue at the parent
        if (this.isFrame()) {
            log.debug("reportCapturedElement: Goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_CAPTURED_ELEMENT_MESSAGE,
                    frameGuid: frameGuid,
                    pathId: pathId,
                    snapshot: snapshot,
                    coordinates: coordinates
                }, "*");
            }
            else {
                log.error("Error: In frame but no guid");
            }
            return false; // We are a frame. Not finished yet
        }
        else {
            // We are the top - report to extension
            chrome.runtime.sendMessage({
                service: "capturedElement",
                pathId: pathId,
                snapshot: snapshot,
                coordinates: coordinates
            });
            return true; // We are the top. Reporting completed
        }
    }
    /**
     * Request for specific iFrame to start record
     * @param frameGuid iFrame's unique id
     */
    startRecordingOnFrame(frameGuid) {
        log.debug(`Start recording on frame ${frameGuid}`);
        let handler = this.outboundHandlersFactory.getHandler("startRecordingOnFrame");
        if (!handler) {
            log.error(`Could not find handler for startRecordingOnFrame`);
            return;
        }
        handler({ frameGuid: frameGuid });
    }
    /**
     * Request for specific iFrame to start listening
     * @param frameGuid iFrame's unique id
     * @param listeningInfo listening information
     */
    startListeningOnFrame(frameGuid, listeningInfo) {
        log.debug(`Start listening on frame ${frameGuid}`);
        let handler = this.outboundHandlersFactory.getHandler("startListeningOnFrame");
        if (!handler) {
            log.error(`Could not find handler for startListeningOnFrame`);
            return;
        }
        handler({ frameGuid: frameGuid, listeningInfo: listeningInfo });
    }
    /**
     * Request for specific iFrame to stop listening
     * @param frameGuid iFrame's unique id
     */
    stopListeningOnFrame(frameGuid) {
        log.debug(`Start listening on frame ${frameGuid}`);
        let handler = this.outboundHandlersFactory.getHandler(ChromePlatformDriver.MESSAGE_STOP_LISTENING_ON_FRAME);
        if (!handler) {
            log.error(`Could not find handler for startListeningOnFrame`);
            return;
        }
        handler({ frameGuid: frameGuid });
    }
    /**
     * Request for specific iFrame to start capturing
     * @param frameGuid iFrame's unique id
     * @returns
     */
    startCaptureOnFrame(frameGuid) {
        log.debug(`Start capturing on frame ${frameGuid}`);
        let handler = this.outboundHandlersFactory.getHandler("startCaptureOnFrame");
        if (!handler) {
            log.error(`Could not find handler for startCaptureOnFrame`);
            return;
        }
        handler({ frameGuid: frameGuid });
    }
    /**
     * Search and synchronize iFrames elements
     */
    syncFrameIds() {
        // Sync all iFrames with their content.
        let $iFrames = $('iframe,frame');
        log.debug(`syncFrameIds: Found ${$iFrames.length} iFrames`);
        $($iFrames).each((_index, iframe) => {
            FrameWebControlCoverageHandler_1.default.synchIdToContent(iframe);
        });
    }
    /**
     * Execution has completed in iFrame notify parent window
     */
    execOnFrameCompleted(result) {
        log.debug(`execOnFrameCompleted. Success ${result}`);
        // Notify parent about this completed
        if (!this.isFrame()) {
            log.error("PlatformDriver: Suppose to be a frame but we are not...");
            return;
        }
        log.debug("Platform Driver goes to parent");
        let frameGuid = this.applicationContext.myFrameGuid;
        if (frameGuid) {
            window.parent.postMessage({
                message: ChromePlatformDriver.FRAME_EXEC_NODE_ON_SCREEN_COMPLETED_MESSAGE,
                frameGuid: frameGuid,
                result: result
            }, "*");
        }
    }
    /**
     * Send a message to chrome extension that trigger was fired
     * @remark in case we are inside iFrame send a post message to parent window
     * @param pathId path of element that fire the trigger
     * @param trigger name of the trigger
     */
    reportTriggerFired(pathId, trigger) {
        log.debug(`Reporting trigger fired: path id - ${pathId} , trigger name - ${trigger}`);
        if (this.isFrame()) {
            log.debug("Platform Driver goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_TRIGGER_FIRED_MESSAGE,
                    frameGuid: frameGuid,
                    pathId: pathId,
                    trigger: trigger
                }, "*");
            }
        }
        else {
            chrome.runtime.sendMessage({
                service: "triggerFired",
                pathId: pathId,
                trigger: trigger
            });
        }
        return true;
    }
    /**
     * Send a message to chrome extension that attribute/value has changed
     * @remark in case we are inside iFrame send a post message to parent window
     * @param pathId path of element that fire the trigger
     * @param attribute name of the trigger
     * @param newValue new value of attribute
     */
    reportChangedElement(pathId, attribute, newValue) {
        log.debug(`Reporting changed element: path id - ${pathId} , attribute - ${attribute} , new value - ${newValue}`);
        if (this.isFrame()) {
            log.debug("Platform Driver goes to parent");
            let frameGuid = this.applicationContext.myFrameGuid;
            if (frameGuid) {
                window.parent.postMessage({
                    message: ChromePlatformDriver.FRAME_LISTENED_ELEMENT_MESSAGE,
                    frameGuid: frameGuid,
                    pathId: pathId,
                    attribute: attribute,
                    newValue: newValue
                }, "*");
            }
        }
        else {
            chrome.runtime.sendMessage({
                service: "changedElement",
                pathId: pathId,
                attribute: attribute,
                newValue: newValue
            });
        }
        return true;
    }
    /**
     * Perform an action on element(pathId) in specific iFrame
     * @param guid iFrame's unique id
     * @param pathId element path
     * @param executionLogicalAction action's information
     * @param validateOnly if true just verify that element exists on the current screen without perform any action otherwise perform an action
     */
    execNextNodeOnScreenOnFrame(guid, pathId, executionLogicalAction, validateOnly) {
        // Need to execute the action on the pathId in the frame identified by guid
        log.debug(`PlatformDriver: Need to execute the action ${executionLogicalAction.actionName} on the pathId ${pathId} in the frame ${guid} `);
        // Running from top frame to low, we perform execution (on pathId and lAction). The IFrame is now asking us to continue it on the Frame.
        // We use background for it
        chrome.runtime.sendMessage({
            service: "execNextNodeOnScreenOnFrame",
            frameGuid: guid,
            pathId: pathId,
            executionLogicalAction: executionLogicalAction,
            validateOnly: validateOnly
        });
    }
}
exports.default = ChromePlatformDriver;
ChromePlatformDriver.MESSAGE_START_LISTENING_ON_CHANGES_IN_FRAME = "startListeningOnChangesInFrame";
ChromePlatformDriver.MESSAGE_STOP_LISTENING_ON_FRAME = "stopListeningOnFrame";
ChromePlatformDriver.FRAME_EXEC_NODE_ON_SCREEN_COMPLETED_MESSAGE = "frameExecutedNodeOnScreenCompleted";
ChromePlatformDriver.FRAME_CAPTURED_ELEMENT_MESSAGE = "frameCapturedElement";
ChromePlatformDriver.FRAME_CAPTURED_TABLE_MESSAGE = "frameCapturedTable";
ChromePlatformDriver.FRAME_RECORDED_ELEMENT_MESSAGE = "frameRecordedElement";
ChromePlatformDriver.FRAME_LISTENED_ELEMENT_MESSAGE = "frameListenedElement";
ChromePlatformDriver.FRAME_TREE_CHANGED_MESSAGE = "treeChanged";
ChromePlatformDriver.FRAME_TRIGGER_FIRED_MESSAGE = "frameTriggerFired";
ChromePlatformDriver.REGISTER_FRAME_MESSAGE = "registerFrame";
ChromePlatformDriver.SYNC_FRAME_IDS_MESSAGE = "syncFrameIds";
//# sourceMappingURL=ChromePlatformDriver.js.map