import ApplicationContext from "../Model/ApplicationContext";
import ExecutionLogicalAction from "@jacada-jbot/base/include/Model/ExecutionLogicalAction";
/**
 * This class handles messages that sent from extension
 */
export default class InboundHandlersFactory {
    private applicationContext;
    /**
     * message handlers
     */
    private handlers;
    constructor(applicationContext: ApplicationContext);
    /**
     * Chrome extension message event handler
     * @param request message from extension
     * @param sender who send this message
     * @param sendResponse callback function
     */
    backgroundMessageHandler: (request: any, sender: any, sendResponse: any) => void;
    /**
     * Set handler to each message type
     */
    setHandlers(): void;
    /**
     * Get a handler by key
     * @param Key message's key
     * @returns handler
     */
    getHandler(Key: string): Function;
    /**
     * init message handler creates an application object
     * @param request message data: repository, application data, application name and iFrame guid (if exists)
     */
    init: (request: any) => void;
    /**
     * Request from current application to start record
     * @param request
     */
    startRecording: (request: any) => void;
    /**
     * Request from current application to stop record
     * @param request
     */
    stopRecording: (request: any) => void;
    /**
     * Request from current application to start capture
     * @param request
     */
    startCapturing: (request: any) => void;
    /**
     * Request from current application to stop capture
     * @param request
     */
    stopCapturing: (request: any) => void;
    /**
     * Execution is done first by validation
     * Validate screen and the control for the path
     * @param request
     */
    validateElementPath: (request: any) => void;
    /**
     * Execute action asynchronously. After validation that we are in the right place
     * @param request
     */
    executeAction: (request: any) => void;
    /**
     * Start listening on top level frame
     * @param request.listeningInfo Elements to listen to
     */
    startListening: (request: any) => void;
    /**
     *  Start listening on specific element at specific frame
     * @param request.listeningInfo Element to listen to
     */
    startListeningElementOnFrame: (request: any) => void;
    /**
     * This method let Background script know that this coverage handler is already loaded
     */
    isCoverageLoaded: (request: any) => boolean;
    /**
     * Start listening on changes (mutation observer) in frame
     */
    startListeningOnChangesInFrame: () => void;
    /**
     * Stop listening in all frames
     */
    stopListening: () => void;
    /**
     * Notify application that page has opened -
     * @param request
     */
    pageOpened: (request: any) => void;
    /**
     * Covert request into ExecObject
     * @param request
     * @returns
     */
    createExecObject(request: any): ExecObject | null;
    /**
     * Update repository tree when we have multiple tabs application during recording/capturing
     * @param request
     */
    treeUpdated: (request: any) => void;
    /**
     * We currently DO NOT support multiple instances therefore it must be the same instance
     * @param request
     * @returns true
     */
    isSameInstance: (request: any) => {
        isSameInstance: boolean;
    };
    mergeRepositoryObject: (targetNode: any, sourceNode: any) => void;
    mergeRepositoryArray: (targetNode: any[], sourceNode: any[]) => void;
}
interface ExecObject {
    elementPath: string;
    executionLogicalAction: ExecutionLogicalAction;
}
export {};
