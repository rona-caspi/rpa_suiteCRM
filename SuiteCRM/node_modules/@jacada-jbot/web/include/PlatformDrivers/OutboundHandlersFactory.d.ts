import ApplicationContext from "../Model/ApplicationContext";
/**
 * This class has set of handlers that related to iFrame
 *
 */
export default class OutboundHandlersFactory {
    private applicationContext;
    private handlers;
    constructor(applicationContext: ApplicationContext);
    /**
     * Set handler to each message type
     */
    setHandlers(): void;
    /**
     * Get a handler by key
     * @param Key message's key
     * @returns handler
     */
    getHandler(Key: string): Function;
    /**
     * An inner iFrame report that repository tree was changed,
     * dispatch an event to all iFrames  only relevant frame coverage handle will handle it.
     * @param data
     */
    treeChanged: (data: any) => void;
    /**
     * Recording has reached an iFrame and ask the extension to tell the Frame to start Record.
     * @param data contains frame guid - iFrame's unique id
     */
    startRecordingOnFrame: (data: any) => void;
    /**
     * Request from extension to stop recording on specific iFrame
     * @param data contains frame guid - iFrame's unique id
     */
    stopRecordingOnFrame: (data: any) => void;
    /**
     * Request from extension to start capture on specific iFrame
     * @param data contains frame guid - iFrame's unique id
     */
    startCaptureOnFrame: (data: any) => void;
    /**
     * Stop capturing
     * @param data
     */
    stopCapturingOnFrame: (data: any) => void;
    /**
     * Request from extension to start listening on changes on specific iFrame
     * @param data contains frame guid - iFrame's unique id
     */
    startListeningOnChangesInFrame: (data: any) => void;
    /**
     * Request from extension to start listening according to listening info on specific iFrame
     * @param data contains frame guid - iFrame's unique id  and listening info
     */
    startListeningOnFrame: (data: any) => void;
    /**
     * Request from extension to stop listening on specific iFrame
     * @param data contains frame guid - iFrame's unique id
     */
    stopListeningOnFrame: (data: any) => void;
    /**
     * An inner iFrame report that execution has completed,
     * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
     * @param data
     */
    frameExecutedNodeOnScreenCompleted: (data: any) => void;
    /**
     * An inner iFrame report that element has been captured,
     * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
     * @param data
     */
    frameCapturedElement: (data: any) => void;
    /**
     * An inner iFrame report that table has been captured,
     * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
     * @param data
     */
    frameCapturedTable: (data: any) => void;
    /**
     * An inner iFrame report that element has been recorded,
     * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
     * @param data
     */
    frameRecordedElement: (data: any) => void;
    /**
     * An inner iFrame report that attribute/value has changed,
     * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
     * @param data
     */
    frameListenedElement: (data: any) => void;
    /**
     * An inner iFrame report that trigger has fired,
     * dispatch an event to all iFrames only relevant frame coverage handle will handle it.
     * @param data
     */
    frameTriggerFired: (data: any) => void;
}
