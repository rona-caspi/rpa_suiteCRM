
export interface IRequestMessage {
    service: string;
    options?: any;
}

export interface IResponseMessage {
    success: boolean;
    result?: any;
    error?: any;
}

export interface IExecuteResponse {
    Id: string;
    ResultData: string;
    ErrorMessage?: string | null;
    ErrorId?: string | null;
}

export interface IExecuteResult {
    requestId: string;
    returnValue: string;
    errorMessage: string;
    errorId: string;
}

export interface IEventObject {
    EventId: string;
    Timestamp: number;
    EventData: any;
}

export interface ICallback {
    callbackId: string;
    data: any;
    result: any;
}

export interface IFrameData {
    windowId?: number,
    tabId: number,
    frameId: number,
    app: IApplication | null,
    frameGuid?: string
}

export interface IRequestFromBot {
    requestId: string,
    message: string,
    type: string,
    pathId: string,
    logicalAction: string
}
/**
 *  Hold the repository node
 */
export interface IRepositoryNode {
    id: string,
    name: string,
    type: string,
    config?: any,
    children: IRepositoryNode[],
    isMatchFunctionString?: string,
    factoryInitFunctionString?: string,
    factoryConstructorFunctionString?: string,
    coverageHandlerFactory?: any,
    coverageHandlerName:string
}

export interface IApplication {
    name: string,
    appRepositoryNode: IRepositoryNode,
    coverageHandlerScript : string
}

export interface IApplicationText {
    name: string,
    repository: string,
    coverageHandlerScript: string
}

export interface IWaitForElementObject {
    tabId : number,
    frameId : number,
    requestId : string,		    // The Id of the request from JBot
    endMilli: number,			// Reaching this time indicates failure
    found: boolean,				// Once element found this will be turned to true
    elementPath: string,        // This is the element we wait for
    logicalAction : string      // in order to execute this on the element
}

export interface XMLHttpRequestInterceptorEventMap {
    "open": (xhr: XMLHttpRequest, method: string, url: string, async?: boolean, user?: string, password?: string) => void;
    "send": (xhr: XMLHttpRequest, data?: any) => void;
    "abort": (xhr: XMLHttpRequest) => void;
    "readySteateChange" : (xhr: XMLHttpRequest, ev: XMLHttpRequestEventMap["readystatechange"]) => void;
}

export type XMLHttpRequestInterceptor = <K extends keyof XMLHttpRequestInterceptorEventMap>(type: K, listener: XMLHttpRequestInterceptorEventMap[K]) => void;

export interface Window {
    withEval(withObj: any, script: string): any;
}

export interface Dictionary<T> {
    [Key: string]: T;
}