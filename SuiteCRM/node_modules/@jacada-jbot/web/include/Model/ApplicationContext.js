"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CoverageHandlerCreator_1 = require("@jacada-jbot/base/include/CoverageHandlers/CoverageHandlerCreator");
const Log4jConfig_1 = require("@jacada-jbot/base/include/Utils/Log4jConfig");
const log = Log4jConfig_1.logFactory.getLogger("WebCoverageHandlerCreator");
/**
 * Application context holds set of property to coverage an application
 */
class ApplicationContext {
    /**
     *
     */
    constructor(logger) {
        this.logger = logger;
    }
    /**
     * Create application coverage handler globally
     */
    createAppObject() {
        log.debug(`initializing  ${this.applicationName} application`);
        // Create the app object for this page using the factory function
        try {
            (0, CoverageHandlerCreator_1.setLogger)(this.logger, this.applicationName);
            // Create the repository handler.
            //in iframe we don't have appRepositoryNode
            (0, CoverageHandlerCreator_1.createRepositoryHandler)(JSON.stringify(this.appRepositoryNode));
            // Create the platform driver object which is the intermediate between the repository and this module
            // The parameter is a function here that provides the call back from the repository
            (0, CoverageHandlerCreator_1.createPlatformDriver)(this);
            //Application Data - Dynamic attribute
            (0, CoverageHandlerCreator_1.createApplicationData)(this.applicationData);
            // Finally can create the application coverage handler
            (0, CoverageHandlerCreator_1.createApplicationCoverageHandler)();
        }
        catch (e) {
            log.error("Exception when creating app:", e);
        }
    }
}
exports.default = ApplicationContext;
//# sourceMappingURL=ApplicationContext.js.map